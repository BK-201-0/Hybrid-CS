[
    {
        "nl_input": "The query requires a function to apply shot noise corruption to images, adjusting severity levels. The code should simulate shot noise by using a Poisson distribution, scaling the input image appropriately, and ensuring output values are clipped within valid ranges before converting back to the original format.",
        "url": "bf4f16738e1373b1734389fb368c4035"
    },
    {
        "nl_input": "The query requires a function to convert a comma-delimited string into a list of strings. The provided code includes a function named `comma_delimited_to_list` that checks if the input is a string, then splits it by commas to return a list of strings. If the input is already a list, it returns it as is; otherwise, it returns an empty list.",
        "url": "bef112878733e2d59a2929a7920b88a7"
    },
    {
        "nl_input": "The query requires a function to return the last dimension's index of a tensor 'x'. If 'x' has no shape, it should return a specified default dimension ('default_dim'). The function needs to check if 'x' has dimensions and accordingly return the last index or the default value provided.",
        "url": "123635b9b49cfe244f1f03b3cf7a2181"
    },
    {
        "nl_input": "The query requires a function to tag entities in a given document using an existing tagging model. The function should take a Document object as input, process its sentences to extract features, apply the tagging model, and return the labeled sequences. The focus is on entity recognition and tagging within the EstNltk framework.",
        "url": "588db07117735817741eca7dee7745a4"
    },
    {
        "nl_input": "The query requires implementing a segmented minimum operation, where the minimum values are computed for segments defined by 'ids' in array 'a'. The desired function should use a mapping approach to apply a min operation on each segment efficiently. The result should return the minimum values for each segment based on the provided indices.",
        "url": "0ac06c72778fbae3d211690a5144ee35"
    },
    {
        "nl_input": "The query requires a function to set the title of the console window, specifically for Windows platforms, using the `SetConsoleTitleW` function from the `ctypes` library to handle Unicode messages. The provided code demonstrates setting the console title with a message parameter. Other unrelated functionalities should be ignored.",
        "url": "adb202dabb7da58b5d21780a6344bf64"
    },
    {
        "nl_input": "The query requires finding the largest real value h such that all elements in array x are integer multiples of h. This involves determining the greatest common divisor (GCD) of the elements in x, as the GCD represents the largest value by which all elements can be divided to yield integers. The solution should compute and return this GCD value.",
        "url": "7a0e230522dc1bfb6f427d5c55f1b354"
    },
    {
        "nl_input": "The query requires a Python3-compatible generator function. The relevant code demonstrates a generator named `gen_lower`, which takes an iterable of strings and yields each string in lowercase. This satisfies the requirement for a generator function compatible with Python3, showcasing the use of type hints and the `yield` keyword for generating lowercase strings from input.",
        "url": "718ca45cd2a8aeb3d6d3c93b5772846b"
    },
    {
        "nl_input": "The query requires a function to convert bytes to unicode strings. Specifically, it needs a method that checks if the input is in bytes and then decodes it using 'utf-8'. The function should handle both byte inputs and, optionally, Python 2 string types, ensuring the output is a unicode string for proper text representation.",
        "url": "0fd02d1357d249743abe621c23164a46"
    },
    {
        "nl_input": "The query requires a function that ensures any function returns an iterable object by wrapping non-iterable results in a list. This is achieved by checking if the result has an '__iter__' attribute and returning it directly if true, otherwise wrapping it in a list before returning.",
        "url": "1cf347f32e0553e66342c5b228b6d453"
    },
    {
        "nl_input": "The query requires a function to perform linear interpolation between two data points [X, Y] at a given x value. It needs to calculate the interpolated y-value based on the relative position of x between X[0] and X[1], using a weighted average of Y[0] and Y[1]. The result should accurately estimate the value at x within the range of the given data points.",
        "url": "80c2dd99d1070a015466e83c6bbaca96"
    },
    {
        "nl_input": "The query requires a function to convert GraphQL queries into JSON format, enabling the handling of multiple queries by assigning unique keys to each. It should accept variable arguments, iterate through them, and serialize the resultant dictionary into a JSON string for API requests or similar purposes. Other functionalities in the provided code are unrelated to this requirement.",
        "url": "30ec3c40428cf0142b78086fcf52ab34"
    },
    {
        "nl_input": "The query seeks a function to determine the current maximum ID of objects in a database. It requires logic to check if the database is empty and, if not, to compute the maximum ID value from the \"id\" fields of the stored objects. If the database is empty, the function should return 0 as the default maximum ID.",
        "url": "af9699e529fc3f759e3b88f38e727526"
    },
    {
        "nl_input": "The query requires a function to extend or update an existing dictionary without replacing it entirely. The desired functionality merges two dictionaries, updating values for existing keys while preserving keys not present in the second dictionary. It may involve recursive updates for nested dictionaries to ensure deep merging instead of outright replacement.",
        "url": "6d3492893fe452efa23b2aa871bb96ba"
    },
    {
        "nl_input": "The query requires a function to calculate the number of quartets using the combination formula (n-choose-k) for deciding between exhaustive and random sampling in equal splits. Edges with fewer quartets use exhaustive sampling, while those with too many use random sampling. The provided code includes a relevant n-choose-k implementation for this purpose.",
        "url": "08fedeb109d03a7efb9a793b2faf11e3"
    },
    {
        "nl_input": "The query requires creating a MultiIndex from specified columns of a DataFrame. The resulting index should use unique combinations of values from the given columns, with column names as index names. This involves generating tuples from selected columns and constructing a pandas MultiIndex for efficient data organization and access.",
        "url": "640aa848a8c64fde652dc858267e207e"
    },
    {
        "nl_input": "The query requires testing a multiprocess functionality, specifically starting a process, waiting for a duration, and stopping it. The provided code demonstrates initiating a process (MVisionProcess), utilizing sleep for delay, and terminating the process. Another code snippet shows parallel processing with multithreading, mapping processes to threads, and ensuring all threads complete.",
        "url": "305d82a1849c66873989c4284d69ab1d"
    },
    {
        "nl_input": "The query requires implementing functionality to delete the character behind the cursor. If a numeric argument is provided, it should kill the specified number of characters instead of just deleting one. The implementation should focus on manipulating the buffer or text based on cursor position and argument value.",
        "url": "6d0e43840f9291ed29bad306bcad084b"
    },
    {
        "nl_input": "The query requires a function to pretty print an object in YAML format with proper indentation and UTF-8 encoding. It seeks to convert the object into a human-readable YAML structure, ensuring clarity and organization in the output presentation. The provided code examples include functionalities for printing objects in different formats, with one specifically targeting YAML output.",
        "url": "77ef270248a249d46314cb1cc698b63b"
    },
    {
        "nl_input": "The query requires a check to determine if the voice client (VC) is available in a bot, ensuring necessary libraries like PyNaCl and libopus are loaded. The relevant code evaluates whether these dependencies are present and raises an error if they are missing, confirming VC functionality.",
        "url": "b5a7289d2fab611cfcc7c4ed4b850c0f"
    },
    {
        "nl_input": "The query requires adding an INFO-type log message. The relevant code demonstrates methods to log informational messages by appending a prefix to the text, using a logger's info method, or printing logs with specific formatting. The focus is on integrating a logging function that handles informational messages effectively.",
        "url": "96e946ca05b4d59e5a6276c0b3af415b"
    },
    {
        "nl_input": "The query requires a Decision Tree implementation with a focus on explaining raw probability outputs. The needed code should define a DecisionTreeClassifier with specific parameters (random_state=0, max_depth=4) and include a predict function that returns probabilities. Other codes related to binary tree traversal or tree type identification are irrelevant to the query's requirement.",
        "url": "c3435338c01b1a188567decfc5fc0927"
    },
    {
        "nl_input": "The query requires a function to find the index of an element in a reversed iterator or sequence. It calculates the position of the element as if the sequence were reversed, using the length of the sequence and the original index of the element. The result should adjust for zero-based indexing by subtracting one from the calculated position.",
        "url": "a81aae6b2b81cacc3595226458d367e8"
    },
    {
        "nl_input": "The query requires a function to determine if a given dtype is a numeric type. The most suitable code defines a function that checks if the base dtype is a subclass of numpy's numeric type, returning True for numeric dtypes and False otherwise. This function ensures accurate identification of numeric data types using numpy's capabilities.",
        "url": "0682dad1c78a66e735141f7465044213"
    },
    {
        "nl_input": "The query requires computing the shape of a dataset as a tuple (rows, cols). It needs a function that determines the number of rows based on the length of the dataset and the number of columns based on the dimensions or features of the data. If the dataset is empty, it should return (0, 0).",
        "url": "03902bd67078aa4474f8a53295175922"
    },
    {
        "nl_input": "The query requires a function to determine if a platform is Unix-like with a typical Unix filesystem. It should check for \"linux\", \"darwin\", or \"cygwin\" in the platform string, defaulting to sys.platform if no parameter is provided. The function returns a boolean value indicating whether the platform is Unix-like.",
        "url": "8251bcf4cb40c1528106d1b53d5f5d85"
    },
    {
        "nl_input": "The query requires a function to validate if a given key is a BaseCondition with an \"==\" operation specifically against the hash_key of a query_on object. It ensures the key's column matches the hash_key attribute of query_on, focusing on conditional equality checks rather than general hashing or instance checking functionalities.",
        "url": "92ac75d4fe43a04ecb953753efd02c0e"
    },
    {
        "nl_input": "The query requires a function to remove text nodes containing only whitespace from a document. The provided code demonstrates iterating through child nodes of a document element, identifying text nodes with only whitespace using the `isspace` method, and removing those nodes while returning the cleaned document. Other codes are unrelated as they focus on stripping spaces from byte strings or counting leading whitespace.",
        "url": "e4a076b56da21a4b5fe16b2735022613"
    },
    {
        "nl_input": "The query requires a function to parse dates in ISO 8601 format. It needs to handle both date and datetime strings, validate the format, and return appropriate success or error messages. The solution should accommodate variations in string length and ensure robust error handling if the input does not conform to ISO 8601 standards. External libraries like `isodate` or `dateutil` can be utilized for parsing.",
        "url": "fb219ccbaa6021dddb6fd7adce3cc214"
    },
    {
        "nl_input": "The query requires a function to return a unique list of items while preserving the original order. It should iterate through the input list, check for item existence in the result list, and append if not already present, ensuring no duplicates and maintaining item sequence.",
        "url": "a62a2755f5b02fde0ea76637776e4739"
    },
    {
        "nl_input": "The query requires a function to determine whether a given value is either a byte string or a unicode string. The provided code examples aim to identify string types, with one specifically checking for 'str' or 'unicode' types, while the others use isinstance to verify against 'str' and 'bytes' classes, adapting to Python versions.",
        "url": "26c958614bee5fc1c19896b5f0551f81"
    },
    {
        "nl_input": "The query requires a function to create or convert data into a masked array, allowing for handling missing or invalid entries. The desired function should take input data, apply a mask, and optionally set a fill value for the masked elements, enabling efficient data manipulation while preserving the structure of the original dataset.",
        "url": "0773ccccc7a4410b99a67a524e967ef2"
    },
    {
        "nl_input": "The query requires a function to trim spaces from both ends of a given string. It involves removing leading and trailing spaces, tabs, or other whitespace characters while preserving the main content of the string. The solution should cleanly process the input string and return it without unnecessary whitespace on either side.",
        "url": "59c94f3828b90b2607f5aa28822b7c61"
    },
    {
        "nl_input": "The query requires a function to return a new datetime object representing the start of the month for a given date. It should accept a datetime.date or datetime.datetime input and output a datetime.datetime object with the day set to the first day of the month, maintaining the original date's year and month.",
        "url": "29ccc9cc8cfe03ed5a7d60a2087692cd"
    },
    {
        "nl_input": "The query requires a function to close all connections. The provided code snippets demonstrate different approaches to closing connections, such as closing all database connections, disconnecting websockets, or stopping a session for a specific connection. The requirement focuses on ensuring any open connections are properly closed.",
        "url": "0276eac263fca46f864f24050a9ea3e9"
    },
    {
        "nl_input": "The query requires a function to retrieve the local IP address of the device. It needs to use socket operations to fetch the hostname and resolve it to an IPv4 address, selecting one from the available network interfaces. The provided code examples include methods for IP address manipulation but focus on extracting a single local IP address using socket functions.",
        "url": "0424d5e9fb2e0ef43c6f3ae42a6c2316"
    },
    {
        "nl_input": "The query requires a function to create a directory if it does not already exist, ensuring the specified path is available for use in the current environment. This involves checking for the existence of the directory and creating it if necessary, using operations like `os.makedirs` and `os.path.exists`. The focus is on directory creation functionality.",
        "url": "92c4f725f0d1d243dd04b7d28c2f983f"
    },
    {
        "nl_input": "The query requires adding Builders and construction variables for SGI MIPS C++ to an Environment. Specifically, it involves setting the C++ compiler ('CXX') to 'CC', defining compiler flags ('CXXFLAGS') for standard language support, specifying shared object suffix ('SHOBJSUFFIX'), and ensuring static and shared objects are treated the same. The focus is on configuring the environment for C++ compilation on the specified platform.",
        "url": "d86c7ef069bae9bd25b1719469eaa20e"
    },
    {
        "nl_input": "The query requires a function to resize an image while maintaining its aspect ratio. Given the reference codes, the requirement focuses on calculating the new dimensions based on the original aspect ratio and resizing the image accordingly without distorting it. The result should be a resized image with proportional width and height.",
        "url": "1374156da8327d67bd9b7097f1cd1692"
    },
    {
        "nl_input": "The query requires a function to return the index of the nth occurrence of a pattern in a list of strings. It should iterate through the strings, count matches using a lookup function, and return the index when the nth match is found. If the nth match is not found, it should return -1.",
        "url": "7d6d4d30261325455aae41d30721f891"
    },
    {
        "nl_input": "The query requires a function to determine if a given dtype is a real floating-point type. The most relevant code defines a function that checks if the base dtype is a subclass of numpy's floating type, returning True for real floating-point types and False otherwise. This function specifically targets floating-point identification, distinguishing it from other numeric or datetime types.",
        "url": "a5fcb7627c23a69f2c2c9416c128e1f5"
    },
    {
        "nl_input": "The query requires creating a BigQuery table using the Google Cloud BigQuery library. The caller must provide a callback function that accepts a google.cloud.bigquery.Table object and modifies it as needed. The function creates the table and handles exceptions during the creation process. Other provided code snippets are unrelated to this requirement.",
        "url": "32b013a3ed613334012d04e2cfcc7a7a"
    },
    {
        "nl_input": "The query requires a Python function to compute the Nth Fibonacci number using an iterative approach. The function should take an integer input 'n' and return the corresponding Fibonacci number by iterating through a loop and updating two variables that store intermediate Fibonacci values until the desired position is reached.",
        "url": "215b9f753c4bedbf5e252691c757d9ae"
    },
    {
        "nl_input": "The query requires a function to convert a string representation into a corresponding Python date object. It should handle cases where the input is already a date object, returning it directly, and otherwise parse the string to return the date. The desired functionality involves using libraries like `dateutil` or `datetime` for parsing and formatting dates.",
        "url": "dfec582c3aa4ec5eaafa97cc052f017e"
    },
    {
        "nl_input": "The query requires a mechanism to handle retries for function calls or requests. It needs to account for exceptions, implement a back-off strategy, and potentially propagate specific errors immediately without retrying. The solution should allow customization of the number of retries, handle different types of errors appropriately, and ensure the system doesn't fail prematurely by attempting multiple connections before determining failure.",
        "url": "1e5bac42bcbc9caf07b1a590df790c7d"
    },
    {
        "nl_input": "The query requires a helper function to read a JSON file into an OrderedDict, preserving the order of keys. It should open the specified JSON file, read its content, and use the `json.load` method with `object_pairs_hook=OrderedDict` to ensure the data structure maintains key sequence during processing.",
        "url": "a0a2b0aaa72c7779cfe2be0738354f8c"
    },
    {
        "nl_input": "The query requires a function to replace all occurrences of specified symbols in a string based on a given mapping dictionary. The function should take the mapping and the input string as arguments and return the modified string with replacements applied according to the mapping.",
        "url": "85d3c78c884351b4ba1ab4b9bbd83d89"
    },
    {
        "nl_input": "The query requires creating a dataframe that represents a cross join between two dataframes, df1 and df2. The resulting dataframe should combine all rows from both inputs, ensuring all possible combinations are included, with columns from both dataframes preserved in the original order. A key column is temporarily added to facilitate the merge operation.",
        "url": "347fd8e0a2fd4e7d60db3a5ab300aee6"
    },
    {
        "nl_input": "The query requires a function to flatten a list of lists into a single list. It should take a nested list as input and return a flat list containing all the elements from the sublists, preserving their order. The provided code examples demonstrate different approaches to achieve this functionality using list comprehensions, itertools, or recursive functions.",
        "url": "a585673f9c5f7a80e31dda59ae292d9a"
    },
    {
        "nl_input": "The query requires a function to print a colored string to the standard output. The function should accept parameters for the string, foreground color, background color, ending character, and output target. It must also reset color settings after writing to ensure subsequent outputs are unaffected.",
        "url": "96a6f76f819c942ab3d6ea2451f8f2f3"
    },
    {
        "nl_input": "The query requires a function to patch global variables by removing platform-incompatible objects. Specifically, it needs to identify and delete globals that are not available on certain platforms, ensuring compatibility. The solution should dynamically adjust based on the system platform and remove specified incompatible entries from the global namespace and associated lists.",
        "url": "db80e58cf17dd98d1e3e4ff2cdfd5bb0"
    },
    {
        "nl_input": "The query requires a function to print a message with emphasis, incorporating a timestamp and specific formatting. It should utilize color codes and ensure output is immediately visible by flushing the stream. The solution involves defining a function that integrates these elements for styled and timely console output.",
        "url": "e2aa9367d8be0f1d00d8b3baa409dd7a"
    },
    {
        "nl_input": "The query requires a function to determine if a specified image file is valid. The function should attempt to open and load the image, handling exceptions to verify its integrity, particularly for formats like PNG. It may also involve checking the file's existence and ensuring it is not truncated or corrupted during loading.",
        "url": "78471e6efe57a56cdcbd6dc99918d5e9"
    },
    {
        "nl_input": "The query requires a function to flush all items from a cache. The provided code examples demonstrate different approaches to clearing cached items, such as iterating through a range to delete specific cache entries, emptying an age list and resetting a hash dictionary, or removing items from a cache using internal keys. The requirement is to implement a method that effectively clears all cached data.",
        "url": "0669053426216dbed5fb7b5c5d5f0e2b"
    },
    {
        "nl_input": "The query requires a function to print an error message. The most suitable code defines a function `print_error(msg)` that checks if the environment is POSIX-compliant. If true, it prints an error message with ANSI color formatting; otherwise, it prints a plain error message. The other codes are irrelevant as they focus on logging with different formatting.",
        "url": "e018e33b4b9bfadcd5b2801d5f2bb07b"
    },
    {
        "nl_input": "The query requires a function to remove multiple specified keys from a dictionary-like object and return their values. The desired functionality should handle cases where not all keys may exist in the dictionary, ensuring that only existing keys are removed and returned as a new dictionary. This operation must be performed efficiently in a single function call.",
        "url": "76651b46ae4fa8a26688ff91f2822a35"
    },
    {
        "nl_input": "The query requires a function to retrieve a specific attribute of a given field in a model class. It needs to identify the field by name within the model's metadata and return the requested attribute value associated with that field. The provided code examples demonstrate methods for accessing field attributes or properties in different contexts.",
        "url": "4d40e0af146c3ed90744e11883779b2f"
    },
    {
        "nl_input": "The query requires a function to call a callable with given arguments (*args, **kwargs) while fixing any occurring type errors. If a TypeError arises during the call, it should be caught, and the error should be corrected using a fix_type_error function before re-raising the exception. The primary goal is to ensure the callable executes successfully after resolving type mismatches.",
        "url": "20241a259de49265645c61a4331ec435"
    },
    {
        "nl_input": "The query requires creating a function that maps rows with a specific header structure to the structure of a given table. This involves generating lambda functions for headers and body rows, using the positional information of the headers to reference the correct data columns, and returning the mapping logic as executable code. The focus is on dynamically aligning row data with table columns based on header names.",
        "url": "4bf3b9d30f1dc43cd9a257f7c001464b"
    },
    {
        "nl_input": "The query requires a function to round a number to a specified number of significant figures. The most suitable code demonstrates rounding by adjusting the decimal places based on the number's magnitude. It calculates the difference between the desired significant figures and the number's actual digits, ensuring precise rounding. Other codes focus on different rounding methods or formatting, not matching the significant figures requirement.",
        "url": "fcee00bb04d97a1c4b375046f0e3f094"
    },
    {
        "nl_input": "The query requires a function to check if a specific network interface exists by examining the running configuration. It involves parsing the configuration to find lines that match the given interface name and confirming their existence based on the retrieved data. The focus is on network device interfaces and their configuration settings.",
        "url": "7752c2898f7c89e4e3bbdcc1d36f55ee"
    },
    {
        "nl_input": "The query requires a function to validate whether a given input is a non-empty string. It should handle potential errors, such as raising a TypeError if the input is not a string and a ValueError if the string is empty after stripping whitespace. The function must return True only for non-empty strings.",
        "url": "4c267ab3b1fbf3f4c4270f715d93e37c"
    },
    {
        "nl_input": "The query requires a function to clean trailing whitespaces and replace multiple spaces with a single space. The desired functionality involves trimming spaces at the beginning and end of a string, as well as condensing consecutive spaces within the string into one space for cleaner output.",
        "url": "c2470f0a06ff47da7848e58f4b1660bb"
    },
    {
        "nl_input": "The query requires a function to check if a given variable is a tuple containing exactly two elements, both of which are either integers or floats. The function should return True if the variable meets these criteria, and False otherwise. This ensures the variable represents geometric information with two numeric values.",
        "url": "78a1d1468f072b1981c8d8674ce82a8f"
    },
    {
        "nl_input": "The query requires identifying the most recent RQ job associated with a specific task. It involves checking if an RQ job ID and origin exist, then fetching the job using these details from a connection. If no valid job is found or an error occurs, it should return None. The focus is on retrieving the last executed RQ job for a given context.",
        "url": "44da2dcc6b77c92c6d2ded457f0dff61"
    },
    {
        "nl_input": "The query requires a function to decode a value from a serialized stream by determining its length and unpacking the corresponding bytes. The desired implementation should extract the value based on its length and return it, ensuring proper deserialization of data stored in a specific format within the stream.",
        "url": "3ac89cc6e7278682dcf430aa32e4074e"
    },
    {
        "nl_input": "The query requires a function to rotate a list in-place by a specified number of steps. The function modifies the original list without creating a new one, moving the first 'steps' elements to the end of the list. If the number of steps exceeds the list length, it adjusts the steps accordingly. The default number of steps is 1.",
        "url": "707569fdd77ebde2ce9e44aeb15df944"
    },
    {
        "nl_input": "The query requires a method to format a numpy array as a string, including its shape and data type. The most relevant code converts a numpy array to a string representation with a specified threshold, appending the array's data type and shape. This meets the requirement to represent numpy arrays as formatted strings for better readability or storage purposes.",
        "url": "d0df2377b019e7963fd32ca8ad6667b7"
    },
    {
        "nl_input": "The query requires a function to return a dictionary mapping items to their indices in a list, identifying duplicate elements and their positions. It involves iterating through the list, checking for existing keys in a dictionary, and appending indices accordingly. The focus is on efficiently grouping indices of duplicate items within the input list.",
        "url": "f663b65182d638f4a50a8edd8d907ce2"
    },
    {
        "nl_input": "The query requires a function to add executable permissions to a file. The function should use the `os` and `stat` modules to modify the file's mode, ensuring it has execute permission for the user. Among the provided code snippets, the relevant ones use `os.stat` and `os.chmod` with `stat.S_IXUSR` or `stat.S_IEXEC` to achieve this functionality.",
        "url": "e398c233699ff803f1d5a5d64f31d77c"
    },
    {
        "nl_input": "The query requires a function to check if a given string starts with any prefix from a provided list. It should return True if the string matches at least one prefix and False otherwise. The function iterates through the list of prefixes and uses the `startswith` method to perform the check.",
        "url": "848410ee09fccd5cd9d637b91b29dab9"
    },
    {
        "nl_input": "The query requires a function to determine if a given parent/item combination is a directory. It needs to check the directory status by joining the parent path with the item and verifying if the resulting path is a directory using appropriate library functions. The focus is on identifying directory existence or type accurately.",
        "url": "ca432f95f8726269ef3e7f30fd1a43ef"
    },
    {
        "nl_input": "The query requires a function to find and return the indices of all occurrences of a specific value (val) in a given list or array (m). The desired output is a list of indices where the value matches. The most relevant code provided achieves this by using numpy's 'where' function to locate matching elements and returning their indices as a list.",
        "url": "94119862fe17106353860bbfe1d89231"
    },
    {
        "nl_input": "The query requires a function to recursively iterate through and flatten nested lists into a single list. The provided code examples demonstrate solutions using both nested list comprehensions and recursive helper functions to achieve this, ensuring all levels of nesting are properly handled and flattened.",
        "url": "d77464bbd1d4690e450af59886ceb745"
    },
    {
        "nl_input": "The query requires a function to handle double-click events on a square in a map, identifying the clicked node and posting an event with relevant details. The needed code should capture the position of the double-click, find the corresponding node, and trigger an event notification with the node, click position, and map context.",
        "url": "18a4c302730948b48a653fb99dfe5f4f"
    },
    {
        "nl_input": "The query requires a recursive DFS implementation to detect connected components in a graph. It needs a function that marks visited nodes and explores unvisited neighbors recursively, effectively traversing the graph to identify all nodes within a connected component starting from a given node. The provided code includes a relevant DFS implementation for this purpose.",
        "url": "a0a4bfd06d70e1443c66598deeeef9f6"
    },
    {
        "nl_input": "The query requires a function to find the longest common substring among a list of strings. The provided code demonstrates a method that iterates through all possible substrings of the first string and checks their presence in all other strings, returning the longest common substring found. It assumes at least one string in the input list.",
        "url": "08a0e7248e853cbfb87305700f081955"
    },
    {
        "nl_input": "The query requires a function to format and display data, potentially replacing non-printable characters with dots or rounding numbers for matrix or decimal presentations. It may involve creating a visual representation of data, ensuring readability by handling character substitution, numeric formatting, or structured output like matrices. The focus is on enhancing data presentation clarity.",
        "url": "78ab1db794bcc9dca29d020e49f51eb6"
    },
    {
        "nl_input": "The query requires converting a 3x3 matrix into a 6-element list following the method described by Tauxe (1998). The resulting list should include the diagonal elements (s[0], s[1], s[2]) and specific off-diagonal elements (s[3]=a[0][1], s[4]=a[1][2], s[5]=a[0][2]) of the input matrix.",
        "url": "7d7c9d0f3deb7edef22d856213841fb9"
    },
    {
        "nl_input": "The query requires a function to reshape a multidimensional array into a single vector. It needs to flatten the array by iterating through its dimensions and appending elements to a temporary list, ultimately returning the flattened array. The focus is on converting nested structures into a one-dimensional array without using direct library functions like NumPy's reshape.",
        "url": "cdbc3b94d8dc579d2fdda174b7d41881"
    },
    {
        "nl_input": "The query requires implementing a function to register a modele onto the lemmatizer by associating it with its corresponding group (gr). The provided code demonstrates how to add a modele to the lemmatizer's internal dictionary using the modele's group as the key for easy retrieval and organization. Only relevant code from the first snippet should be considered for this requirement.",
        "url": "66f6db21565028d4fad0f3cfa2faa44a"
    },
    {
        "nl_input": "The query requires a function to render a list of dictionaries into an HTML display object. It needs to take data and optional fields as input, then return an HTML representation using a specific rendering method, likely utilizing an HTML builder utility for structured output. The focus is on displaying tabular data in a web environment.",
        "url": "521b584906bc8240a28beac05fa8a4dd"
    },
    {
        "nl_input": "The query requires a function to convert a timestamp with millisecond accuracy into a datetime object. It should handle timezone information and ensure the milliseconds are accurately represented in the resulting datetime object. The provided code includes a relevant function that performs this conversion by dividing milliseconds by 1000 and adjusting the microsecond field accordingly.",
        "url": "b17378f402d83c02a4e7bf5b967bca23"
    },
    {
        "nl_input": "The query requires a function to convert text into camel case. Specifically, it should split the input text by underscores, capitalize each segment except the first one, and concatenate them without separators. The provided code examples include a relevant implementation for converting snake case strings to camel case.",
        "url": "c954b335d705a71796714fc13a69018b"
    },
    {
        "nl_input": "The query requires a function to retrieve a zero-indexed line from an open file-like object. The desired code should accept a file handle and a line number, iterate through the file, and return the specified line if it matches the given index. Only the first code snippet fully meets this requirement by iterating through the file and returning the line based on the index.",
        "url": "abc96f2c92b62e0900fb5359682ed0f1"
    },
    {
        "nl_input": "The query requires a function to retrieve a global variable by its name. If the variable doesn't exist, it should optionally create it using a provided factory function. The solution should involve checking for the variable's existence, potentially creating it, and then returning it.",
        "url": "a0327bfe2ebddf93ceabf0d5ccb9f890"
    },
    {
        "nl_input": "The query requires a function that takes a string and a dictionary, then replaces all occurrences of keys (i) in the string with their corresponding values (j) from the dictionary. The function should iterate through the dictionary, performing replacements, and return the modified string as the result.",
        "url": "248a51a67e1e4f407628e9ccafebb8d6"
    },
    {
        "nl_input": "The query requires a function to warn users if NaN values exist in a numpy array. It calculates the number and percentage of rows with NaNs, issuing a warning message if any NaNs are detected, indicating that only complete rows will be plotted. The focus is on identifying and notifying about NaN-containing rows in the dataset.",
        "url": "ad5bd51b70e1f23385706f6e87a1af60"
    },
    {
        "nl_input": "The query requires implementing an unbound method call by constructing a bound method to ensure observer management is invoked as in bound methods. It involves creating a callable that retrieves and executes the bound method using the object and its class, maintaining the same invocation behavior as standard bound methods.",
        "url": "efb9ec101eb27e6bc1248d7878ee42a9"
    },
    {
        "nl_input": "The query requires a function to convert a list of elements into a string representation, with an optional separator parameter. The function should transform each element into a string and concatenate them using the specified separator, returning the final string output. Only relevant code meeting this requirement should be considered.",
        "url": "bde3fb5a6302302752336ef6267a3877"
    },
    {
        "nl_input": "The query requires a function to split a string into a list of substrings, each with a specified maximum length. The provided code examples demonstrate methods to achieve this by iterating through the string and slicing it into chunks of the given size. The most relevant functions are those that return a list of sliced substrings based on the specified length.",
        "url": "76cd4a4bb3cb411efcd7e36430af7631"
    },
    {
        "nl_input": "The query requires an order-preserving sorting function. It needs a method that sorts elements while maintaining their original sequence when keys are identical. This involves using a stable sorting algorithm or technique, ensuring that the relative order of items with equivalent sort keys is preserved from the initial list.",
        "url": "4aace1140f498da16c231c1d664bc11c"
    },
    {
        "nl_input": "The query requires creating a directory for the current environment's topic template. It needs a function to ensure the specified directory exists, creating it if necessary. The provided code snippets include functions that check for a directory's existence and create it if it doesn't exist, meeting the requirement for directory creation in the specified path.",
        "url": "92c4f725f0d1d243dd04b7d28c2f983f"
    },
    {
        "nl_input": "The query requires a function to remove non-alphanumerical characters from a metric word and trim excessive underscores. The solution should replace non-alphanumeric characters with underscores, reduce multiple consecutive underscores to a single one, and remove leading/trailing underscores, ensuring the word is sanitized and formatted correctly.",
        "url": "67e48b1877d796ea66fb7448c13e582f"
    },
    {
        "nl_input": "The query requires a function to rename Newick tree labels from numbers to sample names. It involves extracting leaf node names, mapping numbered names to corresponding sample names from a predefined list or dictionary, and returning the modified tree in Newick format with updated labels while preserving its topology. The focus is on biological tree data manipulation.",
        "url": "a35d426aad387434705c007efdc6f5d8"
    },
    {
        "nl_input": "The query requires a function to compute the greatest common divisor (GCD) for a sequence of numbers, including floats. It should use a numerical tolerance to handle floating-point values accurately. The function iteratively calculates the GCD of the sequence, ensuring precision by comparing remainders against a specified tolerance level.",
        "url": "ea16c18890317cf7a6b4d6a0d1d42fbd"
    },
    {
        "nl_input": "The query requires a method to determine if an object behaves like a list. This involves checking if the object is iterable, not a string or unicode, and potentially belongs to list-like types such as lists, tuples, or sets. The solution should confirm \"list-like\" behavior by evaluating these characteristics.",
        "url": "1cf7b63ec959e949becf181328c3cd52"
    },
    {
        "nl_input": "The query requires a function to split a string containing comma or space-separated elements into a list. The provided code examples demonstrate splitting a string by commas while stripping whitespace, and handling cases where the input may already be a list or contain only one element. The goal is to return a clean list of elements from the input string.",
        "url": "83b708851d8a2b1f85ac0c32273ee690"
    },
    {
        "nl_input": "The query requires a function to retrieve the SQL datatype (e.g., VARCHAR) for a specified database column. The most relevant code defines a method that accepts a table and column name, returning the corresponding datatype in uppercase. This matches the need for identifying column datatypes in a database context. Other provided codes do not directly fulfill this specific requirement.",
        "url": "9a59c46a79ec9a1b3731b4548cca5a35"
    },
    {
        "nl_input": "The query requires a function to calculate the high median of a dataset. The high median is the middle value in a sorted list, or the higher of the two middle values if the list length is even. The function should handle empty datasets by raising an error or returning None. It must sort the data and return the appropriate median value based on the dataset's length.",
        "url": "997b00081c660133f7a1864bfcd2e171"
    },
    {
        "nl_input": "The query requires a function to convert arrays of datetime and timedelta objects into numpy datetime64 and timedelta64 formats following pandas conventions. This involves handling datetime-like data types and ensuring proper conversion while maintaining array structure and shape. The focus is on identifying and processing datetime and timedelta objects efficiently.",
        "url": "82304e3180b3ef100b8e39ece9ac1d39"
    },
    {
        "nl_input": "The query requires a helper function to convert coordinates into a dictionary format for logging purposes. The function should take a coordinate as input and return a dictionary with keys 'z', 'x', and 'y', representing the zoom level, column, and row of the coordinate, respectively, with values converted to integers if possible.",
        "url": "f67b0373a9f046509fad8d0562410c39"
    },
    {
        "nl_input": "The query requires a function to divide an even number of rows into groups, calculating the distribution of elements per group with as equal sizes as possible. It should handle remainders by adding one extra element to some groups and return the resulting chunk sizes for further logging or processing.",
        "url": "5cf5cc55de5757c435dcdbdd195fa0d1"
    },
    {
        "nl_input": "The query requires a function to flatten all dimensions of an input 'a' except for the last one. The desired output reshapes the input into a 2D structure where the first dimension is flattened, but the last dimension remains intact. Additionally, it ensures the output retains the correct shape information if possible.",
        "url": "72a8ef07c2b3b7ac06dd53c3280aa1f4"
    },
    {
        "nl_input": "The query requires a function to return the nth value of an array. If the nth index is not available (either due to being out of bounds or the key not existing), the function should return a NaN value. The focus is on safely accessing the nth element while handling potential errors gracefully.",
        "url": "95fe08e717d93da59f9b5c17579ef66e"
    },
    {
        "nl_input": "The query requires a function that applies styling to text using ANSI codes and optionally resets the styling afterward. The desired function conveniently formats text with specified styles and ensures that any applied ANSI formatting is reset at the end if required, allowing for clean output without residual styling effects.",
        "url": "4a001865bf994287cdf1092a7be76350"
    },
    {
        "nl_input": "The query requires a function to take a date object and return the first day of the month. The provided code examples demonstrate methods to achieve this by either converting the date to the first day of its month or directly creating a new date object with the day set to 1. The focus is on manipulating date objects to ensure the output is the desired first day of the given month.",
        "url": "74483d2e3e4816f59f302670fc2add82"
    },
    {
        "nl_input": "The query requires a method to execute tests, potentially with verbosity or additional options. It involves using testing frameworks like unittest, tox, or py.test, and may include command-line arguments for enhanced test execution control. The focus is on running tests with possible customization of output or test discovery.",
        "url": "12a70ddb1c8efce59ed94b4732ccce1b"
    },
    {
        "nl_input": "The query requires a function to compute the unit vector of a given vector. The most relevant code normalizes a vector by dividing it by its length, calculated using the Euclidean norm. This process ensures the resulting vector has a magnitude of 1 while preserving its direction. Other codes are unrelated to this specific task.",
        "url": "f40fe1d1e953f62337812550e43f7ebc"
    },
    {
        "nl_input": "The query requires a function to extract and return the year from a given date string formatted as '%m/%d/%Y'. If the date string does not match the format, the function should return 0. The focus is on handling date parsing and managing potential format errors effectively.",
        "url": "6c997aefc629ec3ddb36fa1869964c25"
    },
    {
        "nl_input": "The query requires a function to return the first n sentences with the highest ranking. It needs a method that takes a ranking dictionary and an integer n, then returns the top n elements based on their ranking values. The most relevant code should implement a functionality to extract the highest-ranked items from a given ranking.",
        "url": "4ffacc05681c3e55136ae1aca8a91b26"
    },
    {
        "nl_input": "The query requires a method to replace the old-style JSONTemplateResponse by generating JSON responses with embedded HTML content or converting objects into JSON format. The focus is on functions that accept data, templates, or objects, process them (e.g., rendering HTML or serializing), and return JSON-formatted outputs with appropriate content types.",
        "url": "0aa7b5cc50b7b2fc58973bcd7bb80020"
    },
    {
        "nl_input": "The query requires a function to find the row with the maximum numerical value in a specified column from a list of rows (dictionaries mapping columns to cells). It should return this as a single-element list for consistency with other functions like 'select' and 'all_rows'. If the input list is empty, it should return an empty list.",
        "url": "b28453d2e0b8222a369ff53ddfa194a9"
    },
    {
        "nl_input": "The query requires a function to replace multiple values in a string. It needs to iterate through a set of replacements and apply each one to the input string, updating it progressively. The function should accept the string and the replacement mappings (as tuples, lists, or dictionaries) and return the modified string after all replacements are performed.",
        "url": "5cc38f990774f5e46761e330e30ba551"
    },
    {
        "nl_input": "The query requires a function to open a file, read its content, and return the value. The provided code examples demonstrate different implementations of this requirement, using various methods to open and read files while handling paths and encoding. The focus is on creating a reliable function to retrieve file content as a string.",
        "url": "e49d4cb2c549747b334ad86c75fed3c3"
    },
    {
        "nl_input": "The query requires a function to return all child objects in nested lists of strings. It needs a method that can traverse through the nested structure, collect child objects, and represent them as lists of strings. The desired output should flatten these nested lists into a single list containing all child objects as string elements.",
        "url": "f56f6544f22eb714a280494b428d028c"
    },
    {
        "nl_input": "The query requires a fast median calculation for masked arrays using the 50th percentile. It needs to handle cases where the array might be empty or fully masked, returning a masked value in such scenarios. The solution should efficiently compute the median from the compressed version of the masked array.",
        "url": "86a3784ce948451d6f92d9d8027f66e0"
    },
    {
        "nl_input": "The query requires a function to terminate a process given its Popen object. The function should check if the process is alive, terminate it if necessary, and confirm the process is no longer running. Alternatively, it may use system signals to kill the process group associated with the provided subprocess.",
        "url": "ff5650a6fb621a5dd82d24d3fdc0acc1"
    },
    {
        "nl_input": "The query requires a function to check if a given pair exists in a search_list and return its index if found. If the pair is not in the list, it should return -1. The focus is on iterating through the list, comparing elements with the pair, and returning the appropriate index or -1 if the pair is absent.",
        "url": "ede2661d49f95400193f400c777d9bb7"
    },
    {
        "nl_input": "The query requires a function to select rows from a table where a specified field evaluates to True. The most suitable code defines a function that returns rows based on a boolean evaluation of the given field, with an optional complement parameter to potentially invert the selection logic. This matches the requirement to filter rows by field truthiness.",
        "url": "6d691369f43d77bf61e57088cbb540aa"
    },
    {
        "nl_input": "The query requires a function to check the syntax of a given URL. It should verify if the URL is non-empty, valid as a string, and conform to URL standards. The function must return a boolean or equivalent result indicating whether the URL's syntax is correct or not, ensuring it can be processed further without errors.",
        "url": "2aee16e7ce75310a4402b9b751615bed"
    },
    {
        "nl_input": "The query requires a function to format and set a console window title. It needs to handle platform-specific implementations, particularly for Windows, where the title is set using system calls. The function should accept a message or title string as input and apply any necessary transformations before setting it as the console title.",
        "url": "bc4cedef2d13710f541bee8a0b25cc9b"
    },
    {
        "nl_input": "The query requires a method to perform signal filtering using Python, specifically focusing on techniques like downsampling, Fourier Transform-based bandpass filtering, or 2D Gaussian convolution. The provided code examples demonstrate approaches such as strided downsampling, FFT-based filtering, and Gaussian kernel convolution, indicating a need for signal or image processing functions.",
        "url": "86780644487ad34f70f295b2b0d48f74"
    },
    {
        "nl_input": "The query requires implementing a normal cumulative density function (CDF). It should compute the CDF values for input x, optionally returning the log of the result. The function must handle array inputs and ensure proper output formatting, including logarithmic transformation if specified. This involves using numerical libraries for efficient computation.",
        "url": "ea825e032e07f3974f9144799bf7ae57"
    },
    {
        "nl_input": "The query requires extracting the contribution of a receiver to a tree diagram. This likely involves identifying specific tree structures or types and their associated data contributions. The focus is on understanding how elements (like nodes or subtrees) are represented and labeled within a tree structure, potentially for visualization or analysis purposes.",
        "url": "e7c7a5c899b079bc11587820e4bc5bc0"
    },
    {
        "nl_input": "The query requires a function to return a JSSObject for an element with a specific ID. The relevant code defines a method that searches for an item with the given ID, ensuring uniqueness, and returns its associated data. It involves iterating through a collection, matching IDs, and retrieving the corresponding object's information. The focus is on identifying and returning the correct object by its unique identifier.",
        "url": "9bc06fc86f744f32effbee5c3fb819f1"
    },
    {
        "nl_input": "The query requires a function to compose multiple preprocessing functions into a single function that applies them sequentially. The composed function should take an input and apply each preprocessing function in the given order, returning the final processed output. This allows for chaining operations to create complex preprocessing pipelines efficiently.",
        "url": "3489959eeae90ba054249170c05b205f"
    },
    {
        "nl_input": "The query requires a function to convert a binary address into IPv4 format. Specifically, it needs to take a binary input and return the corresponding IPv4 address as a string using appropriate networking libraries or formatting techniques. The provided code snippets include examples of such conversions using Python's `socket` and `struct` modules.",
        "url": "8df29dc77c73b7c88e379a59e99ce43c"
    },
    {
        "nl_input": "The query requires a function to print log messages to standard error, likely with formatting options. It should include the script name and support additional parameters like colors for enhanced output presentation. The provided code examples indicate the need for cross-platform compatibility and handling different environments (e.g., POSIX).",
        "url": "336b9bafdd37d354437a6c0bf18ca5ba"
    },
    {
        "nl_input": "The query requires a function to retrieve a list of table names in a SQLite database. The provided code examples demonstrate querying the \"sqlite_master\" table where the type is 'table', using either a cursor's execute method and fetchall or a list comprehension to extract and return the table names. Other functionalities, such as retrieving column names, are irrelevant to this query.",
        "url": "b08c3d745d6f7e646d2b3ccf262f3d81"
    },
    {
        "nl_input": "The query requires a function to check if a remote database exists by performing an HTTP HEAD request to the database URL. It should verify the response status code, ensuring it indicates successful existence (200) or non-existence (404), and handle unexpected status codes by raising an error. The focus is on validating the database's presence through network communication.",
        "url": "02bd43c82e1cda155a1f8e42686f5917"
    },
    {
        "nl_input": "The query requires a function to retrieve a single system variable from CCU or Homegear. The most suitable code defines a method that takes 'remote' and 'name' as parameters and returns the system variable if the server is available. It specifically interacts with a server object to fetch the required variable, ensuring proper communication with the CCU/Homegear system.",
        "url": "864a4dafef1292703051736e4cad33c7"
    },
    {
        "nl_input": "The query requires extracting the full remote import path used in Go source files' import statements. It needs a function that combines the remote root and package name to form the import path, ensuring it accurately represents the structure as utilized in '.go' files for proper module importing.",
        "url": "9c7eee617072fa977274be4dcd7f6281"
    },
    {
        "nl_input": "The query requires a function to delete all files matching a specified glob pattern. It should use the `glob.glob` function to identify files and then remove them using `os.remove`. The solution must iterate through the matched files and delete each one, ensuring that all files conforming to the pattern are successfully removed.",
        "url": "28ecff7f6156dd9d5d8dd360941562f7"
    },
    {
        "nl_input": "The query requires a function to convert a list of elements into a string, with elements separated by a specified separator (default is a comma). The function should handle converting each element in the list to a string before joining them. This is useful for formatting lists into readable strings with custom separators.",
        "url": "c94f78d28d8b78bbf30d3d201d9059b3"
    },
    {
        "nl_input": "The query requires a function to read a data stream, discard the content, and return the total size of the stream. The relevant code reads the stream in chunks, accumulates the size, and stops when the stream ends, effectively discarding the data while measuring its size. Other codes focus on readability checks or memoryview operations, which do not meet this requirement.",
        "url": "c3f7e9b39fe78dfbe1d4bccc994e122e"
    },
    {
        "nl_input": "The query requires a function to output a string to the console (stdout) with immediate flushing to ensure the text appears without delay. It should support basic printing functionality, potentially with additional features like color management or custom endings, but primarily focuses on reliable and instant string display to stdout.",
        "url": "828984305b0d337fae5e014dce303d6e"
    },
    {
        "nl_input": "The query requires a function to divide a given number into a specified number of groups as evenly as possible, returning a list of numbers representing the division. The first code snippet demonstrates this by using divmod to calculate the base count and remainder, then distributing the remainder across the groups for an even distribution. Logging is used to debug the resulting chunks.",
        "url": "9802db16c86d0ad727009b0976a80804"
    },
    {
        "nl_input": "The query requires a function to send a file via FTP. It needs to establish an FTP connection using host, user, and password credentials, set passive mode, and upload the file in binary format. The function should take the filename as input and use libraries like ftplib and os.path for handling FTP operations and file paths.",
        "url": "b930dc0a570db92902aafa697c7c432a"
    },
    {
        "nl_input": "The query requires a solution to make collections iterable when using JPype, as they are no longer directly iterable. The requirement involves either checking if an object is iterable (excluding strings) or converting a collection into a list to ensure iterability, allowing for proper handling of collections in Python when interfacing with Java via JPype.",
        "url": "9e445111477bc6119a47621daa6fed03"
    },
    {
        "nl_input": "The query requires a function to round a float value to a specified precision. The provided code examples demonstrate different approaches to achieve this, including handling errors, formatting the output, and allowing customization of decimal places and comma usage. The goal is to implement a robust rounding function with adjustable precision and optional formatting features.",
        "url": "dde986d7cf845f71dfa4d9e8aba699a2"
    },
    {
        "nl_input": "The query requires a function to convert a given date into a Unix timestamp in milliseconds. The provided code snippets demonstrate methods to achieve this conversion using Python's `calendar` and `time` modules, ensuring the timestamp is accurate to milliseconds by multiplying seconds since the epoch by 1000 and adding microseconds if necessary.",
        "url": "c45019dbaf87a4dda8ed93145a8d72d9"
    },
    {
        "nl_input": "The query requires a function to extract distinct values from a list while preserving their original order. It avoids using `collections.OrderedDict` for compatibility with older Python versions (e.g., Python 2.6). The solution should iterate through the list, maintain a set or list of seen items, and return a new list containing only the first occurrence of each item.",
        "url": "328596b5f38ea5aea10ae6d53e289f18"
    },
    {
        "nl_input": "The query requires a method to retrieve the value of a property. The most relevant code defines a function that accesses a property's value through its getter method, ensuring the property is readable. If not, it raises an attribute error. Alternatively, it could involve fetching a property by name from a list or reading a property value from a file.",
        "url": "4db783ef8b2b3e7c49e8863ce241b880"
    },
    {
        "nl_input": "The query requires a function that calculates the factor and offset for a linear regression model using the least squares method. It involves processing a series of data points, computing sums of indices and values, and determining the regression coefficients (factor and offset) based on these calculations, ensuring valid data handling and returning None if the denominator is zero.",
        "url": "bf587f6399e742e7aba0f76f6ecacae3"
    },
    {
        "nl_input": "The query requires a function to remove a specified element from a list, set, or dictionary. The provided code defines a function `remove_once` that removes an element from a set or list using the `remove` method, and from a dictionary using `del`. It handles different data structures uniformly, ensuring the element is removed if it exists.",
        "url": "0a08a131b7f20c6ae80cbd8db43c9210"
    },
    {
        "nl_input": "The query requires a function to log out the current session by removing it from the cache, clearing the session data, and ensuring the process completes successfully. This typically happens when a session is no longer needed and involves invalidating the session key in the cache and cleaning up session-related information. The provided code examples demonstrate this functionality using a cache and session management.",
        "url": "6b1aedce31fc54b676ef475bbccca0f4"
    },
    {
        "nl_input": "The query requires a function to extract the background color in RGB tuple format from a specific line on the right. The code should process color information, potentially converting it from a packed format to an RGB tuple with normalized values (0-1 range). Among the provided examples, the relevant code processes color attributes and converts them into an RGB tuple for returning as the background color.",
        "url": "85dfbd57feec7e7e4e52db546ce843e9"
    },
    {
        "nl_input": "The query requires a function to calculate the probability density function (PDF) of a normal distribution, given by the formula involving mean (mu), standard deviation (std), and variable (x). The most relevant code implements this PDF using the mathematical expression with exponential and square root components, directly matching the normal distribution's PDF requirements.",
        "url": "f5cbc71ac811b41099e04e17f8e31c77"
    },
    {
        "nl_input": "The query requires retrieving the MachineGuid from the Windows registry path HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Cryptography\\MachineGuid. The relevant code demonstrates connecting to the local machine's registry, opening the specified key, and querying the MachineGuid value, ensuring proper resource closure afterward. This functionality specifically targets Windows systems using the `winreg` module.",
        "url": "e3bf9172dd49a9a59f04d9306fdbf881"
    },
    {
        "nl_input": "The query requires a function to serialize a Python object into YAML format and associate it with a specific document subtree element. The focus is on converting the Python object into YAML serialization, embedding it within a named parameter or structure, and ensuring it can be retrieved as part of the document's subtree. This involves using YAML libraries for dumping and formatting the object appropriately.",
        "url": "f80d296aa7ce2fb9662847a78d719948"
    },
    {
        "nl_input": "The query requires a function to fit an exponential decay model. The desired function should take parameters like 'x', amplitude 'a', time constant 'tau', and offset 'c'. It calculates the exponential decay using these parameters, combining them in the formula: a * exp(-x / tau) + c. Only the first code snippet matches this requirement, as it defines the exponential decay fitting function.",
        "url": "ce8760834322972b4fa83206ed10c958"
    },
    {
        "nl_input": "The query requires a function to remove decoded instructions from the instruction cache based on a given address and size. The most relevant code demonstrates iterating through a range of addresses, checking for their existence in the cache, and deleting them if found. This ensures specific instructions are invalidated from the cache effectively.",
        "url": "c8cfb7fd4310c734636a046495ee2078"
    },
    {
        "nl_input": "The query requires a function to return the first line of a file. It should handle files with only one line, decode byte strings to UTF-8, and remove trailing newline characters. If the file is empty or an error occurs, it should return a specified default value. The solution must include proper file handling and edge case management.",
        "url": "c506dda59325d20d5965f344e05d1d0e"
    },
    {
        "nl_input": "The query requires a function to calculate the total character count in a token list, excluding specific zero-width escape tokens. The relevant code defines a function that sums the lengths of token strings while ignoring tokens of type `ZeroWidthEscape`. This meets the requirement to process and filter the token list appropriately. (80 characters)",
        "url": "45e6a2312d51a32582aceb7c2ab19780"
    },
    {
        "nl_input": "The query requires a function to find the closest matching key and/or value in a dictionary with all string keys. It should support fuzzy matching based on a similarity threshold and optionally return both the key and value. The solution must handle tuple keys by joining them with a delimiter for comparison. If no match is found, a default value should be returned.",
        "url": "227eced7ff543a599d686706f73f1699"
    },
    {
        "nl_input": "The query requires creating a de-duplicated collection (set) of text from a file, assuming one item per line. The function should read the file, remove duplicates by storing unique items in a set, and return this collection. The provided code examples demonstrate reading a file line-by-line, stripping whitespace, and adding items to a set for deduplication.",
        "url": "af678636432a410c764ca9cb0a1afa68"
    },
    {
        "nl_input": "The query requires a function to output a string to the console (stdout) with optional formatting and color settings. It should support immediate flushing to ensure real-time output and may include parameters for foreground and background colors, as well as customization of the output target and ending character.",
        "url": "828984305b0d337fae5e014dce303d6e"
    },
    {
        "nl_input": "The query requires a function to import a class or function using its absolute path. The desired functionality dynamically imports modules and retrieves the specified class or function by splitting the path, loading the module, and returning the requested attribute. This allows for flexible, runtime importing based on provided paths.",
        "url": "355e9f8613c706128bec8cc335909375"
    },
    {
        "nl_input": "The query requires a utility function to print output conditionally based on the 'verbose' parameter being set to True. The function should accept variable arguments and keyword arguments, evaluate the 'verbose' flag, and execute the print operation (e.g., `gprint`) only when verbosity is enabled. Other functionalities or parameters are not relevant to this requirement.",
        "url": "c2e5110262917b6ebfe935a20ae47862"
    },
    {
        "nl_input": "The query requires implementing the softplus activation function, applying it element-wise to an input. The relevant code demonstrates how to define a softplus operation by adding attributes specifying the activation type as 'softrelu' and linking it with inputs. The result should focus on creating or utilizing a function that applies the softplus activation effectively.",
        "url": "23005309942f0a6b09cddbb10972e548"
    },
    {
        "nl_input": "The query requires an iterator function to process a file with JSON objects stored line-by-line. The function should read the file, parse each line as a JSON object, and yield it sequentially. This allows for efficient, line-by-line processing of JSON data without loading the entire file into memory.",
        "url": "041dfc26ca25ef267899427de19315e1"
    },
    {
        "nl_input": "The query requires a simple and reliable peak finder function, alternative to argrelmax(). The desired function should identify peaks within a dataset by locating maximum values. It must be straightforward in implementation and dependable in finding all occurrences of the maximum value(s) in an array or list. The provided code examples serve as references for creating such a function.",
        "url": "a81da6bde809fcb933671792c5feb2ca"
    },
    {
        "nl_input": "The query requires a function to remove trailing zeros from an indexable collection of numbers. It should iterate through the collection from the end, identify the last non-zero element, and return the collection up to that point, effectively eliminating any trailing zeros present in the input data structure.",
        "url": "18282b3d8bec1a731e59daf433dfd841"
    },
    {
        "nl_input": "The query requires implementing a maximum reduction operation, which involves finding the maximum value along specified axes in an array while optionally keeping dimensions. The focus is on handling different axis types and ensuring compatibility with ndarray structures, similar to the provided code examples using NumPy functions.",
        "url": "a35ad1a4dd29efc1322f1abb1af58fc6"
    },
    {
        "nl_input": "The query requires implementing a hash function for an iterable of arbitrary length with O(1) memory usage. It should iteratively update a hash value based on the iterable's content and its type, ensuring constant memory consumption regardless of the iterable's size. The resulting hash must represent the entire iterable efficiently.",
        "url": "264508a3cfd0a1c3ebd6eda1a8efe7c6"
    },
    {
        "nl_input": "The query requires a function to check if a flyweight object with a specified key has already been created. The function should take the key as input and return a boolean indicating whether the key exists in the set of created flyweight objects. This involves checking the availability of the key within an existing collection of keys associated with instantiated objects.",
        "url": "1f298b72446c9d426a3f72d16b7519dd"
    },
    {
        "nl_input": "The query requires creating a new list where each element is copied to a new memory location, ensuring that modifications to the new list do not affect the original list. This involves iterating through the original collection and appending copies of each element to a new list before returning it.",
        "url": "a99ed37d53f472069723258e200ebd61"
    },
    {
        "nl_input": "The query requires a function to retrieve the value of a specific cell in a matrix given the row and column names. It should map the row and column names to their respective indices and return the corresponding cell value from the matrix. The focus is on directly accessing the cell value using the provided indices.",
        "url": "8dec57e52e7ed4372e59774ea788a4cb"
    },
    {
        "nl_input": "The query requires a method to convert a list attribute (self.out) into a string, potentially using a separator. The provided code examples demonstrate joining list elements into a string with a specified separator, indicating the need for a function that handles this conversion efficiently. The focus is on transforming list items into a single string output.",
        "url": "38ff90082d85c5f7fea097765e369093"
    },
    {
        "nl_input": "The query requires a method to remove a resource instance from an internal cache by using its internal key. The most relevant code demonstrates removing an item from a cache dictionary using the resource's type and internal cache key, ensuring proper cache management when a resource is deleted.",
        "url": "bf6a4144ae873567dfbd61579c2bba94"
    },
    {
        "nl_input": "The query requires running unit tests with verbosity. It needs a function that discovers test cases, executes them, and provides detailed output. The focus is on utilizing a test loader to gather tests from a specified directory and employing a test runner with adjustable verbosity to present the results clearly.",
        "url": "7bd4b3dfbcd3512c6c868dd135577546"
    },
    {
        "nl_input": "The query requires a function to convert a string into a sanitized list by splitting the string using a specified separator, stripping whitespace from each item, and removing empty elements. The function should raise an error if the resulting list is empty, ensuring the list contains only valid, non-empty items after sanitization.",
        "url": "1e5368f3b43db029f24ec30a718ddd75"
    },
    {
        "nl_input": "The query requires creating a new Image instance filled with a specified color. The relevant code demonstrates initializing an image with a given size and fill color using the RGB mode. It focuses on generating a solid-colored image rather than manipulating or retrieving colors from an existing image. Other codes are unrelated to the query's purpose.",
        "url": "e2f935a5471d0c81e26004ffca00f05d"
    },
    {
        "nl_input": "The query requires a string hashing function using the djb2 algorithm, ensuring consistency across Python 2 and 3, with persistency between runs. The function should handle string encoding differences between Python versions and avoid using the built-in hash function, which lacks persistence. A suitable implementation iterates through the string, applying the djb2 hashing formula for consistent results.",
        "url": "92cd3b014d092cfeac9dedc5c78bc968"
    },
    {
        "nl_input": "The query requires attaching a callback function to a pubsub group for listening to updates. It involves subscribing to a pubsub channel using a method like `subscribe`, where the callback is specified to handle incoming messages. The focus is on setting up real-time communication or event handling within a group context.",
        "url": "c6a79937f94ef8bf784d0ba67544fc5d"
    },
    {
        "nl_input": "The query requires displaying all available logging information. The provided code snippets suggest the need for a function that logs messages with optional formatting or outputs log information to standard error or through a logger instance. The focus is on creating or utilizing a method to effectively display logging details, potentially with prefixes or color formatting for better visibility.",
        "url": "b1185ffd3684956e7a014023d1d730e1"
    },
    {
        "nl_input": "The query requires converting a Python unicode string list into a Java String array. This involves creating an object array in Java, populating it with the strings from the Python list using UTF encoding, and returning the resulting Java String array for interoperability between Python and Java environments.",
        "url": "cb7ea10fe8e12a61d1c4426495277b2b"
    },
    {
        "nl_input": "The query requires executing a command within the active virtual environment. The relevant code demonstrates how to run a command using the `venv_bin` function to locate the executable in the virtualenv and then invoke it with arguments, ensuring proper escaping of special characters. This setup ensures the command is executed in the context of the active virtual environment.",
        "url": "4b6a114bab89cc57079b686d158c8dc2"
    },
    {
        "nl_input": "The query requires a function to retrieve (and optionally create) a set identified by a specific name or key. The function should handle operations related to the set and potentially initialize it if it doesn't exist. It may involve internal methods for type-specific retrieval or file-based initialization, ensuring the set is ready for use.",
        "url": "4a5f1c5d94b495eb1d55bb70bfb4e935"
    },
    {
        "nl_input": "The query requires a function to calculate the bounding box of a rendered image using PIL. It needs to handle cases where no bounding box is detected, convert pixel units to PDF's bp units, and adjust for coordinate system differences between images and PDFs. The result should be returned in lower-left and upper-right point format.",
        "url": "cf3ce037b96a42e72d396298a671ad3f"
    },
    {
        "nl_input": "The query requires a function to parse format strings for substitutions using regular expressions. It seeks functionality that identifies and extracts substitution patterns from a given format string, similar to the provided example where placeholders are found using a regex pattern. The focus is on locating and returning these substitution elements within the string.",
        "url": "5727620d57aa415b320a2caf400e156f"
    },
    {
        "nl_input": "The query requires a function to process an iterable of dictionaries, deleting a specified key from each dictionary if it exists. The function should iterate through the list, using the `pop` method to remove the key without raising an error if the key is absent. This ensures clean data by eliminating unnecessary or redundant entries.",
        "url": "9c7542a2ddb9b898a1ef814aa988a382"
    },
    {
        "nl_input": "The query requires initializing an object's state with a specific status (e.g., STATE_INITIALIZING) and recording the start time. The relevant code demonstrates setting an initial state and capturing the current time during object initialization, fulfilling the requirement to establish the object's starting condition and timestamp. Other provided code snippets are unrelated to this specific initialization task.",
        "url": "9ebd199a3bad6857c594078352fc308a"
    },
    {
        "nl_input": "The query requires calculating Tanimoto similarity distances between a target set and multiple sets in a given dictionary. The task involves returning a dictionary where keys are from the input dictionary, and values are the computed Tanimoto similarity scores with the target set. Only the first code snippet is relevant as it calculates Tanimoto set similarities. Other snippets are unrelated.",
        "url": "bee73c442bef215e9afdbde513dea74f"
    },
    {
        "nl_input": "The query requires a function to return window bounds as a tuple (x, y, w, h). It needs to extract positional and dimensional data (x-coordinate, y-coordinate, width, height) representing a window or rectangle. This involves directly providing these values in the specified format for further use in applications like UI elements or image processing.",
        "url": "bfcfd9614f0ea2bb08b2f413845cfe91"
    },
    {
        "nl_input": "The query requires a function to delete a specified file from the local filesystem. It should check if the file exists and then remove it. The provided code examples demonstrate different approaches to file and directory deletion, but the requirement focuses on removing a single specified file.",
        "url": "17728e7096342292cd488ebca0d9b0cd"
    },
    {
        "nl_input": "The query requires a function to validate if a given string 'x' conforms to the YYYYMMDD date format, returning True for valid dates and False otherwise. It involves parsing the string and comparing it to ensure it matches the specified format, handling exceptions for invalid cases. The provided code examples attempt similar validations but use different libraries and formats.",
        "url": "8dce08e6c99c22329f7a299e12d01400"
    },
    {
        "nl_input": "The query requires a function to safely convert a single number to an integer. It should handle different input types, validate the conversion's safety, and raise an error if the conversion is not possible. The function must ensure the input can be accurately represented as an integer before performing the conversion.",
        "url": "cb150b8a0bfcc950bb207c95077778d3"
    },
    {
        "nl_input": "The query requires a function to format a UTC timestamp for Elasticsearch in the ISO 8601 format (e.g., 2014-07-09T08:37:18.000Z). The function should take a timestamp as input and return it as a string in the specified format, ensuring proper timezone handling and localization to UTC.",
        "url": "bec2bb3dbbcb3542f275f94bece9fff6"
    },
    {
        "nl_input": "The query requires a function to convert markdown content into plain text by first transforming it into HTML and then extracting the text. The provided code includes a relevant function, `md_to_text`, which performs this conversion using a markdown parser and an HTML-to-text utility, ensuring the return of plain text from markdown input. Irrelevant code is ignored.",
        "url": "a98a0d961b4a5dfb134ed7d96517dc6a"
    },
    {
        "nl_input": "The query requires a function to convert a datetime object into its ISO-8601 string representation. The desired output format is \"YYYY-MM-DDTHH:MM:SSZ\", which includes the date and time components with a 'Z' to indicate UTC time. The function should take a datetime object as input and return the corresponding ISO-8601 formatted string.",
        "url": "42dabaf1c6f12b6da12ac8fbb5b231fe"
    },
    {
        "nl_input": "The query requires a function to convert a string to bytes in Python 3. The function should handle different input types, ensuring that if the input is already bytes or None, it returns the input as is. If the input is a string, it should encode it to bytes, preferably handling encoding errors gracefully.",
        "url": "e5d70952cf637a2fa0cd1455199a8e33"
    },
    {
        "nl_input": "The query requires a function to parse an integer robustly by ignoring commas and other unnecessary characters. It should handle different input types, remove commas from string inputs, and convert the cleaned value into an integer. If the input is empty or invalid, the function should return None. The focus is on creating a reliable integer parsing mechanism.",
        "url": "ce0452492d46cab7a6354fbcfb785abf"
    },
    {
        "nl_input": "The query requires a function to read and return the contents of a text file specified by its path. The provided code examples demonstrate reading a file's content using different methods, including handling file paths and encoding. The requirement is to implement or extract a function that opens a file, reads its content, and returns it as a string.",
        "url": "c17f502f4969f974e5c6e15cb098c59e"
    },
    {
        "nl_input": "The query requires a function to find the row with the maximum numerical value in a specified column from a list of rows (dictionaries). It should return this as a single-element list for consistency with other functions like 'select' and 'all_rows'. If the input list is empty, it should return an empty list.",
        "url": "b28453d2e0b8222a369ff53ddfa194a9"
    },
    {
        "nl_input": "The query requires a function to normalize a list of numbers. The normalization process involves dividing each number by the sum of all numbers in the list, resulting in a new list where the values are proportionally scaled. The goal is to ensure the normalized values represent the relative sizes of the original numbers. Only relevant code meeting this criterion should be considered.",
        "url": "b81fe6522b305a5caff1b0ff9b17acdc"
    },
    {
        "nl_input": "The query requires starting the Django development server, potentially with a specified port. The relevant code defines a function to initiate the Django dev server using `manage.py runserver`, allowing an optional port parameter to customize the server's listening address. This matches the requirement to start the Django development server.",
        "url": "694887945fe811afedbc4b26d3d370ef"
    },
    {
        "nl_input": "The query requires identifying the file extension for an abi3-compliant Extension. It needs a function that searches for a suffix containing '.abi3' (for Unix) or '.pyd' (for Windows) among C_EXTENSIONS, as defined by the imp module's get_suffixes method. The result should return the appropriate ABI3-compatible extension.",
        "url": "013baf410fba66902adf797b55ac8aa1"
    },
    {
        "nl_input": "The query requires a function to remove empty utterances from a list, ensuring only non-empty text entries remain. It processes a list of utterance objects, checking if the 'text' attribute is non-empty after stripping whitespace, and returns a filtered list excluding empty texts. This operation enhances data cleanliness for further processing.",
        "url": "5ca8d1be36d4955478ff4ef72fbc653a"
    },
    {
        "nl_input": "The query requires a function to check if any of the given filenames exist. It needs to verify the existence of files and potentially validate them. The focus is on identifying whether at least one file from the provided list exists, ensuring proper file handling and existence confirmation.",
        "url": "0a26527d2153f952031786977dfda90c"
    },
    {
        "nl_input": "The query requires a function that sets default values for dictionary keys if they are not already present, ensuring kwarg values always have defaults. The provided code examples demonstrate setting defaults for dictionary keys or normalizing field values by assigning default values when the input is None or empty. The focus is on implementing logic to handle default value assignments effectively.",
        "url": "b7b9cfe9bc7611c1ad042e6257d5ab3d"
    },
    {
        "nl_input": "The query requires a function to read and iterate through all image files in a specified directory. The desired functionality should handle file paths, check for image file formats, and yield each image file's data along with its filename for further processing. It must efficiently traverse the directory structure containing these image files.",
        "url": "711c408a26e009e46a957a3bc5891670"
    },
    {
        "nl_input": "The query requires a function to extract the hostname from a given URL. It should parse the URL, retrieve the network location part, and split it to isolate the hostname, ignoring any port information. If the network location is empty, it should return an empty string.",
        "url": "13343f8f3c5515600e035d8cca7abd84"
    },
    {
        "nl_input": "The query requires a slicing operation on an array or tensor, where a sub-region is extracted based on the 'begin' index and 'size'. The relevant code demonstrates how to use slicing with numpy to copy and slice multidimensional data. It constructs slices from 'begin' and 'begin + size' tuples for each dimension, returning the sliced portion of the input array. Other codes are unrelated to slicing operations.",
        "url": "d2b5b746f02bfe0d8d6ff1f510e1828e"
    },
    {
        "nl_input": "The query requires a function to determine the SQL typename for storing a given FieldDefinition. It needs logic that extracts or maps data types, potentially using type attributes like `__name__` or custom string representations, ensuring compatibility with SQL storage requirements. The provided code suggests identifying and formatting data types as strings.",
        "url": "af0980ef65b107138b9164f39686a882"
    },
    {
        "nl_input": "The query requires calculating the fill similarity between two regions (r1 and r2) within an image, considering their sizes and positions relative to the total image size (imsize). The calculation involves determining the bounding box size of the two regions, subtracting their individual sizes, and computing a similarity score based on these values.",
        "url": "ce8ba68fe6e18f6be13595643c857111"
    },
    {
        "nl_input": "The query requires a function to remove a pandas Series from a chart. Specifically, it needs to ensure that the last series cannot be removed, update the internal list of series, and clear the reference to the chart in the series object. The implementation should handle these operations seamlessly.",
        "url": "67cf3739e350f2ea5801335c51b59d6b"
    },
    {
        "nl_input": "The query requires a function to retrieve all column names and their corresponding data types as a list of tuples. The desired output format includes the column name as a string and its data type in a simplified string format, extracted from the schema fields of a dataset or table structure.",
        "url": "1001aab66e7872b45d9825d901ea4412"
    },
    {
        "nl_input": "The query requires a function to convert a ctypes float pointer array into a numpy array. The solution should take the ctypes pointer and its length as input, verify the pointer type, and use numpy's fromiter method to create a numpy array of dtype float32 with the specified count. If the pointer type is incorrect, an exception should be raised.",
        "url": "ce6eacb4f12ded20e034e69bafe8d36c"
    },
    {
        "nl_input": "The query requires a function to process a list of strings by removing whitespace from each string element using the `strip()` method. If an element is not a string, it should remain unchanged. The function should iterate through the input list, apply the stripping operation where applicable, and return the modified list while preserving non-string elements.",
        "url": "c5e0bd41ae3189370dbad3a0bf904d17"
    },
    {
        "nl_input": "The query requires a function to convert input values into a list of scalars for the lookup_field. This involves handling various input types (e.g., dictionaries, single values) and ensuring they are transformed into a list format using a specific coercion method for the lookup_field. The provided code demonstrates converting and validating such inputs.",
        "url": "2acfd946899b1082d7f65b3960457769"
    },
    {
        "nl_input": "The query requires a function to generate a random datetime within a specified range. It should take two datetime inputs (start and end) and return a random datetime between them using internal methods for timestamp conversion. The solution involves converting datetimes to timestamps, generating a random integer in that range, and converting it back to a datetime.",
        "url": "7d26da2177ec3962d36d304e92d85b02"
    },
    {
        "nl_input": "The query requires a function to zero-pad a numeric or string input to a specified width, returning the result as a string. The relevant code demonstrates zero-padding by converting non-string inputs to strings and applying the zfill method to achieve the desired width. Other provided codes are unrelated to zero-padding functionality.",
        "url": "ec71b8a5543bb8262f46f32c31348dea"
    },
    {
        "nl_input": "The query requires a function to convert a list into a space-separated string and then store it in a dictionary. The provided code snippets include functions that convert lists to strings with a specified separator, but none directly place the result into a dictionary as described. A suitable implementation should combine these functionalities to meet the requirement.",
        "url": "a318fa43339d6fa4ed9b949a5b77562e"
    },
    {
        "nl_input": "The query requires initializing a noise variable. The focus is on generating noise, potentially using random processes. The provided code examples demonstrate various noise generation techniques, such as normal noise with random scaling and offset, shot noise with severity levels, and lognormal noise. The requirement likely involves creating a function to produce noise based on specific parameters or distributions.",
        "url": "f1f28c0dd35c71a830aa7cbc94c40f10"
    },
    {
        "nl_input": "The query requires an iterable of column names for a specific table or view. The code should dynamically retrieve and return the column names, allowing for iteration over them. This involves executing a query or pragma command to fetch the column information and providing it in an iterable format.",
        "url": "d7658ee7d6f5d6fb22fece433d0eb088"
    },
    {
        "nl_input": "The query requires a function that removes underscores from a string and capitalizes the adjacent character. This transformation modifies strings by eliminating underscores and converting the following character to uppercase, effectively changing snake_case structures into a more compact format without separators. The desired output is a cleaner, camelCase-like string representation.",
        "url": "78f9639da029a80f29cbed10f796c01c"
    },
    {
        "nl_input": "The query requires creating a Conda environment within a specified sandbox directory using given dependencies and options. It involves constructing a command-line instruction with \"conda create,\" specifying the environment path, and executing it silently. The process logs creation details and confirms completion upon success. Only the first code snippet is relevant to this requirement.",
        "url": "372b930fd10719406ee97e024c0a53a1"
    },
    {
        "nl_input": "The query requires a function to add a column to an existing table. The provided code includes a relevant function `add_column(connection, column)` which constructs and executes an SQL statement to add a column using Alembic's `AddColumn` method, then reflects the metadata changes. Other codes are unrelated to adding columns.",
        "url": "fc0fba0d26d93f6bd9c23bc1314f2d81"
    },
    {
        "nl_input": "The query requires a function to check if a specified key exists within a datastore, returning True if the key is present and False otherwise. The provided code examples demonstrate methods that retrieve keys from the datastore and verify the existence of a given key by checking its presence in the retrieved list or instance dictionary.",
        "url": "cca5dd52a3d19626fff09249a49c1508"
    },
    {
        "nl_input": "The query requires a function to visually represent a tree structure in ASCII art, starting from a given node. It should recursively traverse the tree and print each node with a prefix indicating its level or relationship in the hierarchy. The focus is on creating a readable, textual depiction of the tree for debugging purposes.",
        "url": "11cf04105fcbba8990217a87a8578844"
    },
    {
        "nl_input": "The query requires a function to compute the natural logarithms of input values using numpy, ignoring runtime warnings such as division by zero. It should take an input array and return its natural logarithm as a numpy array, handling potential warnings gracefully without interruption.",
        "url": "167edd67f1adeb4d6c5cfb29e50e9308"
    },
    {
        "nl_input": "The query requires a function to handle redrawing events for a figure panel, ensuring the panel updates with a new figure while preventing recursive updates. The function should toggle an 'updating' flag to control update flow, using a method to retrieve or generate the figure for display.",
        "url": "081aa8089b7e676937cd3affc2e08cd8"
    },
    {
        "nl_input": "The query requires applying Gaussian blur to given data. It needs a function that takes input data and parameters for kernel size (width and height) and sigma values (X and Y), then applies Gaussian blur using these parameters. The function should return the blurred image or data as output.",
        "url": "7e9213011cfc7c3f677806f277665dc3"
    },
    {
        "nl_input": "The query requires a function to set the value of a checkbox. The desired function should take a parameter to determine whether the checkbox is checked or unchecked, using appropriate methods to modify the checkbox state based on the input value. This involves conditional logic to apply the checked or unchecked state accordingly.",
        "url": "529e86a0567df6183fe381968569a669"
    },
    {
        "nl_input": "The query requires a function to convert dictionary keys and values into native strings, handling nested structures if necessary. The desired implementation should recursively process the dictionary elements to ensure all contents are appropriately stringified while preserving the dictionary structure. This transformation aims for compatibility or representation purposes.",
        "url": "5e241db72862fc70c36e7e20ad5edea0"
    },
    {
        "nl_input": "The query requires extracting the fully-qualified name of a function, combining its module and name if the module exists. It aims to construct a string in the format \"module.name\" for functions with a defined module, or just the name if the module is not specified.",
        "url": "50fd86592c25f16bbc23c5961ad15dea"
    },
    {
        "nl_input": "The query requires a function to read and return data from a JSON file containing a corpus. It needs to handle the file reading process, utilize the `json` library to parse the contents, and ensure proper encoding and formatting of the returned data. The function should be self-contained and capable of loading the JSON structure accurately.",
        "url": "218ac30809c3bdc7d261a5ea19802ace"
    },
    {
        "nl_input": "The query requires a function to test if a given value is a scalar, including cases where the value is a NumPy array that can be reduced to a scalar. The solution should handle both standard scalar types and NumPy-specific scenarios, ensuring compatibility with squeezed arrays of zero dimensions.",
        "url": "8970a4c2fc876814d02a1c6e13dc45be"
    },
    {
        "nl_input": "The query requires a function to swap the i-th and j-th rows in a matrix. The most relevant code demonstrates this by creating an identity matrix, modifying it to serve as a row-swapping transformation matrix, and applying it to the original matrix using dot product. The result updates the matrix with swapped rows. Other codes are unrelated to row swapping in matrices.",
        "url": "d0357f86ddf7b0105d9d1b1b69314584"
    },
    {
        "nl_input": "The query requires a function to execute tests, potentially with options for verbosity or running all tests. The provided code examples demonstrate different approaches to achieve this, such as using `unittest` for discovery and execution, invoking external test runners like `tox` or `py.test`, or managing processes for testing purposes. The focus is on flexibility and control over test execution.",
        "url": "2aec19bb1e81428966e9d71583289404"
    },
    {
        "nl_input": "The query requires a standard Python function to compute the Nth Fibonacci number. The function should iteratively calculate Fibonacci numbers using a loop, maintaining the last two numbers in the sequence and updating them until reaching the desired Nth number, then returning the result.",
        "url": "215b9f753c4bedbf5e252691c757d9ae"
    },
    {
        "nl_input": "The query requires a function to convert a datetime object to a timestamp with millisecond accuracy. The desired function should handle both the seconds and microseconds components of the datetime, ensuring the final timestamp reflects millisecond precision by appropriately converting and combining these values.",
        "url": "ba63741c151123bfce637e652480a02a"
    },
    {
        "nl_input": "The query requires a function to determine the deepest level of nesting within a list of lists. It needs to recursively analyze the structure, identifying sublists and calculating their depth levels. The most relevant code should use recursion or iteration to traverse the list hierarchy and return the maximum depth found, ensuring non-list elements are handled appropriately without affecting the depth calculation.",
        "url": "54daf1d9eb3d92a38eb85fd0febb6a26"
    },
    {
        "nl_input": "The query requires an iterator that returns chunks of a string, with a specified buffer size, without implementing line buffering since StreamBufferer handles it. The solution should provide reasonable-sized string chunks. The focus is on creating an efficient generator that processes and returns parts of the input string sequentially.",
        "url": "b66381638399324a2212ecf9179e9699"
    },
    {
        "nl_input": "The query requires a function to remove duplicates from a list, ensuring all elements are unique. It can be achieved either by using a set to filter duplicates in a list comprehension or by iteratively appending items to a new list if they haven't already been added. Both methods preserve the original order of first occurrences.",
        "url": "74f3af5ff87a388959abca8a236acf5c"
    },
    {
        "nl_input": "The query requires moving the cursor to a specific line in the current buffer. The solution involves identifying the target buffer, calculating the cursor position based on the desired line number, and updating the cursor's position accordingly within the document. This ensures precise navigation to the specified line.",
        "url": "85bf8f526e4cc0590ecb0b556389c65a"
    },
    {
        "nl_input": "The query requires initiating a Pdb debugging instance at the caller's frame, ensuring stdout is directed to sys.__stdout__. This allows for interactive debugging with proper output routing, enabling developers to inspect variables and control program execution effectively. The provided code examples demonstrate how to achieve this by using Pdb with the desired stdout configuration.",
        "url": "0a05a5da32b1fb72cca49d13dc8e3410"
    },
    {
        "nl_input": "The query requires a function to normalize a list of numbers so that their sum equals 1.0. It involves calculating the sum of the input list, then dividing each element by this total. The result is a new list where all elements are proportionally adjusted to meet the normalization condition, as demonstrated by the example: normalize([1, 2, 1]) returns [0.25, 0.5, 0.25].",
        "url": "f9b02c7991372e2168cda998af17b5df"
    },
    {
        "nl_input": "The query requires a function to rename a column in a DataFrame. It needs parameters for the DataFrame, the current column name, and the new column name. The function should locate the specified column and update its name within the DataFrame's columns list.",
        "url": "8afe30c3c1d7a21a89370867722d657a"
    },
    {
        "nl_input": "The query requires a function to validate and expand IP address ranges. It should take an input, attempt to interpret it as a single IP address, and if unsuccessful, treat it as an IP network range, expanding it to list all host IP addresses within the range. The function needs to handle both IPv4 and IPv6 formats effectively.",
        "url": "4e29078b31bdc20c9249a66228a95f11"
    },
    {
        "nl_input": "The query requires a function to convert a Numpy array into a string format compatible with database storage. The most suitable code should serialize the array while preserving its structure and data type, ensuring it can be stored as a string and later reconstructed. It must handle array shape and dtype information effectively for accurate representation.",
        "url": "85791d7ca6694ef78a7d42f79c958ef6"
    },
    {
        "nl_input": "The query requires a function to remove stopwords from a list of words. It should iterate through the input list, check if each word is in the stopwords list (case-insensitive), and return a new list excluding the stopwords. The provided code demonstrates this functionality by filtering out unwanted stopwords effectively.",
        "url": "6ce9ae857507f7292c65caae0d829141"
    },
    {
        "nl_input": "The query requires a function to ensure that a specified directory exists, creating it if necessary. The desired functionality involves checking for the existence of the directory and using a method to create it if it does not already exist, ensuring the program can proceed without errors related to missing directories.",
        "url": "ffb454a23a874db7b8ba84dec008ffc9"
    },
    {
        "nl_input": "The query requires a function to check if a variable is a 2D numpy array consisting of boolean values. The function should confirm the input is a numpy ndarray, has two dimensions, and contains boolean data types, returning True if all conditions are met, otherwise False.",
        "url": "8a3b1c52b2ad77e9fd817568f4cec12c"
    },
    {
        "nl_input": "The query requires a function to return the approximate size of a queue, which may not be entirely reliable. The focus is on acquiring the size by accessing a queue's internal state while ensuring thread safety through mutex operations. The result should reflect the current number of items in the queue without guaranteeing absolute accuracy.",
        "url": "66ad16d7b38f79a6e991c2f96f9a6395"
    },
    {
        "nl_input": "The query requires a function to join elements of an iterable into a comma-separated string. The desired functionality converts each element of the iterable to a string and concatenates them using a comma as the separator, ensuring compatibility with both Python 2 and 3 through the use of `six.text_type`.",
        "url": "d5cd6bdee354cd4c13e1317060fe6702"
    },
    {
        "nl_input": "The query requires a function to push an item onto a heap while maintaining the heap's invariant. The relevant code demonstrates a method that appends the item to the heap and then performs a sift-down operation to preserve the heap property, ensuring the structure remains valid after insertion. This operation is essential for heap data structure management.",
        "url": "b7ef5c01f2bb54150c1e764f1b5301aa"
    },
    {
        "nl_input": "The query requires a function that retries a given operation until it no longer raises an EINTR error. It should continuously attempt the operation, handling interruptions specifically caused by EINTR, and raise other exceptions if they occur. The solution must ensure robustness against signal interruptions without infinite looping on unrelated errors.",
        "url": "b5df8b3347e8f9eddcd0ec1aa6e25197"
    },
    {
        "nl_input": "The query requires calculating the probability density function (pdf) value at the peak of a distribution. Specifically, it needs the ratio of the distance from the peak to the lower bound to the total range of the distribution. This involves determining the relative position of the peak within the defined bounds (low and high).",
        "url": "0b331f2127c3538176983a9640cb177f"
    },
    {
        "nl_input": "The query requires a function to remove comments (denoted by '#') from Python code while preserving the executable content. The solution should ensure that only actual comments are removed, leaving quoted strings or other code elements unaffected. The provided code examples demonstrate different approaches to achieve this functionality using regular expressions or string manipulation techniques.",
        "url": "e9606c2ede25ed01dadee38b936b292b"
    },
    {
        "nl_input": "The query requires a simple method to determine if a URL is relative or absolute. It needs a function that checks whether a URL starts with specific indicators like \"://\" or \"//\" to identify it as absolute, and returns True for relative URLs and False for absolute ones. The solution should handle basic URL string analysis without complex parsing.",
        "url": "a7c751f435108eb653de787c9016c077"
    },
    {
        "nl_input": "The query requires a function to insert multiple items into a temporary table at once. It needs to handle bulk insertion efficiently, potentially using executemany for performance or converting items into a suitable format before insertion. The focus is on processing and inserting a list of items in one operation.",
        "url": "c4bbbb9264cf558138ca7d49ad446d86"
    },
    {
        "nl_input": "The query requires a function that checks if a given condition (test) is True for all elements in an array, returning True if the condition holds for every element, and False otherwise. It should support multi-dimensional arrays and recursively evaluate sub-arrays based on the specified dimension.",
        "url": "46e171604d456aab34ab6b4d624435a2"
    },
    {
        "nl_input": "The query requires a function to calculate the memory byte size of a Numpy array, utilizing the product of its shape and the itemsize of its data type, returning the result as an integer value. This involves determining the total elements in the array and multiplying by the bytes per element based on its dtype.",
        "url": "f0456030f3cb36953670e94276edb1d5"
    },
    {
        "nl_input": "The query requires a function to remove problematic characters from a string. It should replace specified characters (e.g., ':', ',', '(', ')', ' ', '|', ';', \"'\") with underscores. The solution must iterate through the string, identify these characters, and substitute them accordingly, ensuring the resulting string is cleaned of problem characters.",
        "url": "be5711e9db130456deb244ee94eed831"
    },
    {
        "nl_input": "The query requires identifying the Excel worksheet reference for X values of a chart, excluding column labels. It needs a function that calculates the top and bottom row indices based on the series data and formats them into an Excel range reference (e.g., \"Sheet1!$A$2:$A$10\") for the X values.",
        "url": "25e289a769f7ae896c02b2c308474c4e"
    },
    {
        "nl_input": "The query requires a function to generate a random string of a specified length, using uppercase letters, lowercase letters, digits, and special characters. The provided codes demonstrate different approaches to create such strings by utilizing UUID manipulation, predefined character sets, or random selection from valid characters, ensuring flexibility in generating random strings based on specific requirements.",
        "url": "d0012fec75a957ee2d77e2ac6478bdee"
    },
    {
        "nl_input": "The query requires a method to convert a structured NumPy array into a table format. The provided code examples suggest the need for functions that transform array data into sequences or iterable structures, potentially involving type conversion and serialization for compatibility with table representations. The solution should handle structured arrays and output a table-like structure.",
        "url": "4193356c3a00f554a415099595307044"
    },
    {
        "nl_input": "The query requires an HTTP response function for handling unauthorized access with a status code of 403 (Forbidden). It needs a function that returns an appropriate HTTP response when access is forbidden, ensuring the correct status code and potentially including a template, content, or content type for the response.",
        "url": "d5eeb1f8ad1e4d020d24cce0e3083342"
    },
    {
        "nl_input": "The query requires a function to stop a progress bar. The desired code should contain a method that halts the progression, likely by setting a flag to False and joining any related threads to ensure the progress bar ceases updating in a controlled manner. Additional GUI-related or computation-stopping functionalities are not relevant for this specific requirement.",
        "url": "66112d5d1ef6700a828265dbc4da86d6"
    },
    {
        "nl_input": "The query requires a function to add one tick to a progress bar, updating its status and resetting when reaching a specific factor. It involves incrementing a counter, checking if it matches a defined factor, updating the progress indicator by writing a symbol, and resetting the counter afterward.",
        "url": "9402a316375e935cabce06eadf9d542a"
    },
    {
        "nl_input": "The query requires serializing a column's representation for local caching. This involves converting column information into a dictionary format containing details like schema, table, name, and type, enabling efficient storage and retrieval. The focus is on creating a serialized version of the column data for caching purposes.",
        "url": "7720471d366176807aa531dadb064217"
    },
    {
        "nl_input": "The query requires a function that returns the default WSGI handler for the runner. It should integrate with Django's internal WSGI application and potentially handle static files. The focus is on creating or retrieving a WSGI handler suitable for serving a Django application, ensuring static files are appropriately managed during development.",
        "url": "3f2207516acc039310a03d719345bbd1"
    },
    {
        "nl_input": "The query requires a function to convert time strings in \"%H:%M:%S\" format into integer seconds. It needs to split the string by colons, calculate total seconds by multiplying hours and minutes with 3600 and 60 respectively, and summing them with seconds. The result should be an integer value representing the total number of seconds.",
        "url": "64d9dc81c20e31b854e0eab01dee6498"
    },
    {
        "nl_input": "The query requires a method to restore the scrollbar position after the main window becomes visible. This involves retrieving a stored scrollbar position and applying it to the relevant UI component, ensuring the scrollbar returns to its previous state when the window is reopened or reactivated. The provided code demonstrates how this can be implemented using a function that sets the scrollbar position based on a saved value.",
        "url": "00b975fe0f0c6867c45f8b890f4fe429"
    },
    {
        "nl_input": "The query requires a function to convert a sequence of string IDs into a corresponding sequence of integer IDs. The desired functionality involves taking an iterable of strings, parsing them as integers, and returning the resulting list or iterable of integers. The conversion should handle basic type transformations without additional formatting or complex logic.",
        "url": "6eaf6a5e1e5f229137f1cf2cf2bfdaca"
    },
    {
        "nl_input": "The query requires a function to remove duplicates from an iterable while preserving the original order of elements. The provided code examples demonstrate different implementations of this functionality, using either a list comprehension with a set for tracking seen elements or a loop to append items to a result list if they haven't been added yet.",
        "url": "215a474be7e5886d15c8a3a59eb1b842"
    },
    {
        "nl_input": "The query requires a pre-order depth-first traversal implementation. It should explore nodes' values before their children, likely in a tree or graph structure. The provided code examples include depth calculation, recursive DFS for graphs, and tree node printing, but the requirement focuses on a clear pre-order depth-first traversal function.",
        "url": "7f09c0c1fb655aa7be69dd12ae8b3459"
    },
    {
        "nl_input": "The query requires a function to make a file user-readable if it is not a symbolic link. The solution should check if the file is a link, and if not, adjust its permissions to ensure the user can read it, using appropriate system calls or utilities for setting file modes.",
        "url": "ace76e2287f89f73f0d302ad68c6b28d"
    },
    {
        "nl_input": "The query requires a function to convert text into camel case. Specifically, it should split the input text by underscores, capitalize each segment except the first one, and concatenate them without separators. The provided code examples include a relevant implementation for converting snake case strings to camel case.",
        "url": "c954b335d705a71796714fc13a69018b"
    },
    {
        "nl_input": "The query requires a function to colorize text with a specified color. The provided code snippets demonstrate different implementations of this functionality, using ANSI escape codes or libraries like colorama to apply color formatting to text output. The goal is to return the colored text or directly write it to an output stream, supporting customization such as color and style.",
        "url": "b0187a0236d4299c56f0154fb18e9680"
    },
    {
        "nl_input": "The query requires a method to extract and validate a specific method name from a given Python module path. The solution should dynamically import the module, navigate through its submodules, and confirm the existence of the specified method, ultimately returning it for use. This ensures the method is accessible and correctly linked to its module.",
        "url": "4a9b986374bae09d4078e1f195a5d2c4"
    },
    {
        "nl_input": "The query requires a function that replicates Python 3's int.from_bytes functionality, converting a sequence of bytes into an integer with options for byte order (\"big\" or \"little\") and signedness (True or False). The provided code examples include a direct replication of this functionality, as well as related byte manipulation methods.",
        "url": "aad5675e5e47b94c38b92c39e101b732"
    },
    {
        "nl_input": "The query requires a function to check if a given dtype is a subclass of numpy's datetime types, including datetime64 or timedelta64. The relevant code should return True if the dtype matches these datetime subclasses and False otherwise, ensuring accurate identification of datetime-like types in numpy.",
        "url": "a1bda233eb59bf9da775dcb1ca1b62c7"
    },
    {
        "nl_input": "The query requires extracting key/value pairs from the operating system's environment variables. The most relevant code defines a function that takes a list of keys and returns a dictionary with corresponding values from `os.environ`, handling missing keys appropriately. This matches the need to access and organize environment variable data into a dictionary format for specific keys. \n\nResult: {\"description\": \"Extract specified key/value pairs from os.environ into a dictionary.\"}",
        "url": "40a703bc56a740baa9b642c07f243912"
    },
    {
        "nl_input": "The query requires a function to determine the dimensions (width and height) of an image by providing its URL without loading the entire file. If the image's dimensions cannot be retrieved, the function should return a tuple with None values. The solution involves fetching the image data, processing it to extract size information, and handling exceptions gracefully.",
        "url": "cf303e12e0a23ea3d8cf9d64a44bb720"
    },
    {
        "nl_input": "The query requires a function to retrieve a configuration value from a main config section using a specified key. If the key does not exist, it should return a default value. The function may also include an optional type conversion for the returned value.",
        "url": "386feb46f7695b77a7a29cf6c0dc5ac9"
    },
    {
        "nl_input": "The query requires a function to set foreground and background colors along with intensity for console output. It needs to handle color settings for text display, potentially using libraries like colorama to manage and reset console colors effectively while supporting customization of foreground, background, and style attributes.",
        "url": "7f7b530bb1644e7ff3a20d39b9f6d9fa"
    },
    {
        "nl_input": "The query requires a function to write a string to a file. The desired functionality involves opening a file in write mode, writing the specified string to it, and ensuring the file is properly closed afterward. The provided code examples demonstrate writing strings to files, with one example using binary write mode and another writing JSON content.",
        "url": "cfe10971d3e9565b10d9a8da615d0b58"
    },
    {
        "nl_input": "The query requires a utility function to support alphabetically sorting file tabs. The function should compare tab texts and determine their order, ensuring correct alphabetical arrangement. It involves iterating through tab elements, extracting text, and validating their sorted status by comparing adjacent tab labels. The result ensures tabs are organized alphabetically for improved user interface navigation.",
        "url": "65c25e4888533db2382a5501c97b7fe7"
    },
    {
        "nl_input": "The query requires reconstructing an image from a TensorFlow (tf) example. The task involves decoding the tf example into an image, ensuring it has the correct number of channels and data type, and setting the image shape accordingly. The provided code demonstrates how to decode and reshape the image from the tf example. Other codes are unrelated to TensorFlow image reconstruction.",
        "url": "ee6f7f25b60a54d1abdd6b0904517c41"
    },
    {
        "nl_input": "The query requires adding Builders and construction variables for SGI MIPS C++ to an Environment. This involves setting the C++ compiler ('CXX') to 'CC', defining compiler flags ('CXXFLAGS') for standard language support, specifying shared object suffix ('SHOBJSUFFIX'), and confirming that static and shared objects are the same. The focus is on configuring the environment for MIPS C++ compilation.",
        "url": "d86c7ef069bae9bd25b1719469eaa20e"
    },
    {
        "nl_input": "The query requires a proximal operator function that projects onto zero, effectively returning an array of zeros with the same shape and data type as the input. This involves creating a function that takes an input array and a step parameter, then outputs an array of zeros matching the input's dimensions and data type.",
        "url": "fe2927654759fba2b7cfee8b53e498ca"
    },
    {
        "nl_input": "The query requires a function to convert a given date into a Unix timestamp in milliseconds. The provided code examples demonstrate methods to achieve this conversion using Python's `calendar` and `timegm` functions, multiplying the result by 1000 to get milliseconds, and optionally adding microseconds for higher precision.",
        "url": "c45019dbaf87a4dda8ed93145a8d72d9"
    },
    {
        "nl_input": "The query requires a function to obtain the parent directory of a given filename. It should handle file paths, extract the parent directory, and return it. The solution must manage absolute paths and ensure proper functionality when the filename is provided as input.",
        "url": "d4c1f44c7bd93d72431c1636e15a2c94"
    },
    {
        "nl_input": "The query requires a function to flatten a multi-dimensional array into a one-dimensional array while preserving the contents. It needs to iterate through all levels of the input array, extracting elements and placing them sequentially in a single list. The provided code includes examples of dimension analysis and flattening logic for this purpose.",
        "url": "6c2f0cae41d4a8defbd80e5fc9ecf368"
    },
    {
        "nl_input": "The query requires a function to receive and process a JSON file from a URL. It needs to open the URL, read the data, decode it from UTF-8 format, and load it as a JSON object for further use. The function should handle the entire process of fetching and parsing the JSON content seamlessly.",
        "url": "22b581c617befce3a934d35f780c7538"
    },
    {
        "nl_input": "The query requires a function to compile an expression specifically for the SQLite target. The function should take an expression and optional parameters, converting the expression into a SQLite-compatible format using SQLAlchemy dialect context. The focus is on ensuring the expression is properly compiled for SQLite use without executing or optimizing it further.",
        "url": "1c31b5225729722e73162d729a8a9e91"
    },
    {
        "nl_input": "The query requires a function to patch modules with gevent for asynchronous support. If gevent and grequests are unavailable, it should log a warning and fallback to multiprocess mode. Otherwise, it patches all necessary modules using `monkey.patch_all()` before proceeding with photo information retrieval. The function returns either GEVENT or MULTITHREAD based on availability.",
        "url": "b2d8c9ff02a806e11c86616df579b848"
    },
    {
        "nl_input": "The query requires a function that lemmatizes a given word and returns a list of its synsets. The focus is on identifying the code that performs lemmatization with an option to prevent stemming and then retrieves synsets for the lemmatized word using a library like WordNet. Only the first code snippet directly fulfills this requirement.",
        "url": "ef50ba41894d62298e768a8a40286eeb"
    },
    {
        "nl_input": "The query requires a function to identify the longest Open Reading Frame (ORF) from a given list of ORFs. The desired code should sort the ORFs based on their sequence lengths in descending order and return the ORF with the maximum length. This matches the first code snippet, which performs this exact operation using a lambda function for sorting.",
        "url": "88b2e5b638d21e4cad0678aa5548008d"
    },
    {
        "nl_input": "The query requires a function to retrieve the name of the current Git branch. The relevant code implements this by using the `git rev-parse --symbolic-full-name HEAD` command, checking if the result is \"HEAD,\" and returning either `None` or the base name of the branch. It specifically focuses on interacting with Git to determine the active branch name.",
        "url": "313f3e2f971c34ffd53caa9c21f4515c"
    },
    {
        "nl_input": "The query requires creating a pie chart visualization based on the given data related to house explosions, with categories including 'Budding Chemists', 'Propane issues', 'Meth Labs', and 'Attempts to escape mortgage'. The code should define a function that generates and saves the chart as 'pie-house-explosions.png'. Other provided codes are unrelated to this task.",
        "url": "d9b236e9fcf20fa21ca7851c87a14c84"
    },
    {
        "nl_input": "The query requires a function to terminate a shell session. The desired code should close any open resources, such as files or connections, and then exit the session cleanly. It may involve closing a current object, managing resources, and ensuring the session ends properly after executing necessary commands.",
        "url": "552e6841d09f58e5e1c8fb096c977099"
    },
    {
        "nl_input": "The query requires testing a multiprocess functionality, specifically starting a process, allowing it to run for a certain duration (e.g., 5 seconds), and then stopping it. The focus is on ensuring the process lifecycle is correctly managed in a multiprocess environment.",
        "url": "305d82a1849c66873989c4284d69ab1d"
    },
    {
        "nl_input": "The query requires implementing a function to save the current session, overriding any previous saved session. It should use pickle to serialize the session's cookies if a session was previously saved. The function must ensure that the new session data replaces the old one without creating duplicates or additional files.",
        "url": "426b13c860e6d3db831d7782b6af8328"
    },
    {
        "nl_input": "The query requires creating an n+1 dimensional one-hot array from an n-dimensional integer-categorical array. Specifically, it needs a function that takes an n-dimensional array of categorical integers and converts it into a one-hot encoded array with an additional dimension, using a specified size and data type (default float32). The first code snippet demonstrates this functionality by comparing the input array with a range of values and converting it to the desired one-hot format.",
        "url": "c5ab7e6fd56d3fb3273938700034235b"
    },
    {
        "nl_input": "The query requires a function to truncate a numerical value to a specified number of decimal places without rounding. The desired functionality involves taking a value and the number of decimal places as inputs, then returning the truncated result. Only the relevant truncation logic from the provided code should be considered for this requirement.",
        "url": "a9f00f4b4472333451594b653fd3ddf4"
    },
    {
        "nl_input": "The query requires a method to terminate a child subprocess. The provided code demonstrates terminating a subprocess by sending a SIGTERM signal to the process group or using the `terminate` method followed by `communicate` to ensure the process ends. The requirement is to properly close or kill a subprocess and confirm its termination.",
        "url": "12a0563f902fd7a97c3632a9db804067"
    },
    {
        "nl_input": "The query requires a function to check if a value is an integer, long integer, or float. It needs to handle different types and ensure the value is either an integer, a long integer (if applicable), or a finite float. The solution should accommodate type differences across Python versions and confirm the value's numeric nature accurately.",
        "url": "11f24e28ca5d6dfbed610eec3da9c58d"
    },
    {
        "nl_input": "The query requires a function to raise or bring focus to a specified figure window, identified by its number. The function should accept a figure number as an argument, retrieve the corresponding figure if it exists, and then bring its window to the front for visibility. This ensures the desired figure is actively displayed to the user.",
        "url": "67b7ab9b728b03a77afa0fe61d8517e2"
    },
    {
        "nl_input": "The query requires a function to check if all elements in a list are equal. It should return True if every element in the list is the same, and False otherwise. The function needs to handle empty lists and ensure the input is a list. It does not require complex comparisons or external dependencies, focusing solely on equality within a list.",
        "url": "2d9deba8d6ccb83eaf09c795b1e77e6a"
    },
    {
        "nl_input": "The query requires a function to encode a list of strings into a single string, where each string is prefixed by its length followed by a colon. The encoded string concatenates these components without any additional separators between the encoded strings. The provided code snippets include attempts at implementing this functionality but contain errors or mismatches with the requirement.",
        "url": "f796b43787cd30bb20850ab43571b623"
    },
    {
        "nl_input": "The query requires a function to read a public RSA key from a PEM file. The function should open the specified file, read its contents, and deserialize the PEM-encoded public key using a backend, such as the default backend provided by a cryptography library. The result is the public RSA key extracted from the PEM file for further use in cryptographic operations.",
        "url": "15c537891f0dde8802ff6c44a92ad71e"
    },
    {
        "nl_input": "The query requires a function to retrieve the contents of an object stored in AWS S3 as a string, with an optional encoding parameter. The most suitable code decodes the S3 object's byte content into a string using the specified encoding (default utf-8). It assumes the existence of a method to fetch the object as bytes and then decodes it accordingly.",
        "url": "6b951991361dc39522cbc34fb09ce7bc"
    },
    {
        "nl_input": "The query requires a function to determine how many times a method has been wrapped. The relevant code calculates the number of wraps by checking for the presence of '__aspects_orig' attribute, incrementing a counter, and returning the total count. It focuses on traversing wrappers to find the original method and counting layers.",
        "url": "0ce77b0ad69c4b908a250a40ad5ce9dd"
    },
    {
        "nl_input": "The query requires writing an ROI model to a FITS file. The code should create a table from the ROI model, convert it to a FITS HDU, and then write it to a specified FITS file using appropriate functions, ensuring the data and header information are correctly saved in the file format.",
        "url": "34b2636593edbd5cd8975c050f2db4ac"
    },
    {
        "nl_input": "The query requires an iterator that yields chunks of a string, with a specified buffer size, without implementing line buffering since it's handled by StreamBufferer. The solution should return reasonable-sized string chunks, ensuring efficient data handling. The provided code examples demonstrate creating such an iterator by slicing the input string into chunks based on the defined buffer size.",
        "url": "b66381638399324a2212ecf9179e9699"
    },
    {
        "nl_input": "The query requires a function to terminate a process, given a Popen object. The function should check if the process is alive, then terminate and confirm the process is no longer active. Alternatively, it may involve closing a subprocess using signals like SIGTERM and setting the subprocess reference to None for cleanup.",
        "url": "ff5650a6fb621a5dd82d24d3fdc0acc1"
    },
    {
        "nl_input": "The query requires a function to convert a UTC datetime object into a Unix timestamp, represented as the number of seconds since January 1, 1970. The solution should handle UTC time properly and may involve operations like time deltas or calendar conversions to ensure accurate timestamp generation.",
        "url": "e81cce5fd2d39302c2607c85226f94d8"
    },
    {
        "nl_input": "The query requires a function to remove and return an item at a specified index from a custom data structure, maintaining both a list and a dictionary. The most relevant code demonstrates removing an item using the `pop` method on a list, then deleting the corresponding entry in a dictionary before returning the removed value. Index defaults to -1 if not specified.",
        "url": "e13e58839609a1526153c3e30429efd5"
    },
    {
        "nl_input": "The query requires a function to load a library module based on the specified version. It checks the version, retrieves the appropriate module name from supported libraries, and imports the module if not already loaded. The focus is on dynamically loading the correct module version as needed.",
        "url": "cd7a724a7a438604f3c2ad7be5002c74"
    },
    {
        "nl_input": "The query requires a function to convert a string into a list while sanitizing it by removing excess whitespace and filtering out empty items. The function should take a string and a separator as inputs, split the string based on the separator, strip whitespace from each item, remove any empty strings, and return the sanitized list or raise an error for invalid input.",
        "url": "1e5368f3b43db029f24ec30a718ddd75"
    },
    {
        "nl_input": "The query requires a function to transparently unzip a file handle. It should determine if the handle is a string and then use appropriate gzip opening methods (_gzip_open_filename or _gzip_open_handle) to unzip the content. The focus is on handling both string and non-string file handles for gzip compression.",
        "url": "4df8b32d822042305892bf4e9ffbf95a"
    },
    {
        "nl_input": "The query requires a function that handles the event when a new item is selected in a dropdown menu. It should log the selected value, perform an action based on the selection (e.g., selecting by value), and optionally return the selected value for further use in the application.",
        "url": "bbc7873866d390e8731cc146e44f537d"
    },
    {
        "nl_input": "The query requires a function to calculate the standard deviation of a set of values. If the mean is already known, it should be passed as an argument. The function computes the deviation using the formula that involves the square root of the average squared differences from the mean, adjusting for sample size.",
        "url": "058eaf9c0c5351b7b551170db3cfeb8a"
    },
    {
        "nl_input": "The query requires a function to calculate the time elapsed in milliseconds from a given start time. It involves subtracting the start time from the current time and converting the result into milliseconds. The provided code includes a relevant function that performs this calculation by obtaining the current time, subtracting the start time, and converting the difference to milliseconds.",
        "url": "d49558a22ad4625b2bbd4e37fe9b2f37"
    },
    {
        "nl_input": "The query requires a function to add a new entity (given as a dictionary) to a service. The function should send a POST request to a 'connections' endpoint, handle the response status, raise an error if addition fails, and return the decoded result upon successful entity addition. Logging/debugging the result is also required.",
        "url": "043f36a47ed7073d2532d69e54bbd43d"
    },
    {
        "nl_input": "The query requires a generator of indices where the maximum value in array 'x' occurs, utilizing the array's max() method for efficiency. It assumes 'x' has a max() function (e.g., NumPy arrays). For single maximum entries or finding only the first max index, using argmax() on NumPy arrays is recommended as a simpler and faster alternative.",
        "url": "b63b959eb91b99f3a70976d46e49ae48"
    },
    {
        "nl_input": "The query requires a function to check if all elements in 'x' belong to any of the specified 'types'. The desired functionality flattens 'x' and validates each element against the provided types, ensuring they match at least one. The most relevant code implements this logic using numpy's ravel for flattening and nested comprehensions for type checking.",
        "url": "5ab579ff3b2ee7681b98e2869ba83148"
    },
    {
        "nl_input": "The query requires a helper method to determine if a given set of types is the singleton { AnyObject }. The method should check if the set contains exactly one element and verify if that element is of type 'AnyObject'. This involves evaluating the size of the set and confirming the type of its single element.",
        "url": "ddc17c866549c6ed7d51235989c860c8"
    },
    {
        "nl_input": "The query requires a method to convert a NumPy array into YAML format for storage or transmission. The solution should involve serializing the NumPy array data in a way that it can be represented as a YAML sequence, ensuring it can later be reconstructed if needed. This typically includes converting the array to a list and tagging it appropriately in the YAML structure.",
        "url": "68912019b18c412305b0cdb7486fec01"
    },
    {
        "nl_input": "The query requires calculating the covariance between two points using the Vario2d implication. Specifically, it needs a function that accepts two points (pt0 and pt1), computes their covariance based on their x and y coordinates, and returns the covariance value derived from a matrix generated by a custom method within the Vario2d context. Other models or convolution methods are irrelevant to this requirement.",
        "url": "1cc6545a29dbb49958711e7c2b5d549f"
    },
    {
        "nl_input": "The query requires a function to compare two strings after coalescing all contiguous whitespace into a single space. The comparison should ignore differences in whitespace amounts, focusing on the structure and content of the strings after normalization. The result indicates whether the processed strings are identical.",
        "url": "5b70ae74acdc38b5b21bbe84441c0c9d"
    },
    {
        "nl_input": "The query requires a function to check if a specified dependency is installed. It should take the name of the module as input and verify its availability. If the module exists in predefined dependencies, it returns the result of the check; otherwise, it raises an error indicating the module is unknown. The focus is on validating the presence of required dependencies.",
        "url": "84e2d66751e0a8ee1b8ae1a7abcdbac3"
    },
    {
        "nl_input": "The query requires a function to serialize a Python object into a JSON-formatted string, handling special cases like NaN and ensuring proper encoding. The provided code examples demonstrate different implementations, using libraries such as `simplejson`, `json`, and custom utilities to achieve this serialization with options for formatting and ASCII encoding.",
        "url": "fb7d849f7856e91684a22299e34b8e2d"
    },
    {
        "nl_input": "The query requires a function that returns one value if a condition is TRUE and another if FALSE. It involves evaluating a logical test and returning the specified true or false value based on the test result, potentially converting inputs to boolean values for proper evaluation.",
        "url": "2552c85beba28c28615849a68c3cbdde"
    },
    {
        "nl_input": "The query requires a function to read a Python object stored in a specified YAML file. It needs to open the given file path, read its content, and parse the YAML data into a Python object, facilitating data handling in applications using YAML for configuration or data storage. Only YAML-related functions are relevant to this requirement.",
        "url": "fbbe03581abc8a6791e6650ce07ec9ba"
    },
    {
        "nl_input": "The query requires a function to round down a given time to the nearest half-hour. It should adjust the time by reducing the minutes to the closest previous half-hour mark while keeping other components of the datetime unchanged. The provided code examples include a relevant implementation that achieves this by manipulating the datetime object's minute attribute.",
        "url": "7ef0b3dda0b7af841693956bd803333a"
    },
    {
        "nl_input": "The query requires a function to detach from all tracked classes and objects, restore original constructors, and cleanse tracking lists. The provided code demonstrates clearing objects, indexes, and keeping alive lists, as well as cleaning up instances and plugins to fulfill the requirement of resetting the tracking system completely.",
        "url": "c6cd16b1f8c53bd52a696c9afd132194"
    },
    {
        "nl_input": "The query requires a function to check if a specific JSON element is present for a given task. The function should return True if the JSON element exists within the task's response. It involves verifying the presence of a property in a JSON-like structure obtained from a service task response.",
        "url": "e8395d634fd7e19cbe150042998fd059"
    },
    {
        "nl_input": "The query requires a function to split a string into parts based on multiple delimiter characters. The desired functionality should iterate through the string, identify the delimiters, and yield substrings that are separated by these delimiters. Only the first code snippet matches this requirement, as it handles splitting based on multiple characters.",
        "url": "7d09bf15750d9a6d6c96b7cee93c93a3"
    },
    {
        "nl_input": "The query requires a function to empty a range from start to stop. The most relevant code defines a method that sets a range from start to stop as \"NOT_SET,\" effectively emptying it. This matches the requirement to clear or remove elements within a specified range in a data structure.",
        "url": "df5d600ef0977e23ecd997c06192235b"
    },
    {
        "nl_input": "The query requires a function to convert a string representation of an array, stored in a database, back into a Numpy array. This involves interpreting the string, potentially serialized or stored in a specific format, and reconstructing it as a Numpy array for further use in computations or data processing. The provided code examples include relevant transformations for this purpose.",
        "url": "7ab4dcc303b95f41a8e282a1be11765c"
    },
    {
        "nl_input": "The query requires an internal function to address the pickling issue in Python 2. It needs a method to load or save Python objects using serialization, overcoming limitations or errors in the pickling process. The function should handle file operations and ensure successful object loading or saving, possibly using libraries like `dill` for enhanced compatibility.",
        "url": "6f49a9d3d5434a4da776633e29108547"
    },
    {
        "nl_input": "The query requires a function to handle user input compatible with both Python 2 and Python 3. It needs to check the Python version and use `input()` for Python 3 or `raw_input()` for Python 2, ensuring consistent string input behavior across versions. The solution should adapt to the Python environment dynamically.",
        "url": "080fc0fc8b3ab53b0bf658fa8b4f0b09"
    },
    {
        "nl_input": "The query requires constructing argument parsers using the argparse module. Specifically, it involves creating a parser with a program name and default help formatting, adding arguments for dry run options and component release specifications, and potentially parsing tuple strings. The focus is on defining and returning ArgumentParser instances with appropriate configurations and arguments for specific functionalities.",
        "url": "3f4199e0fe99241698056724f54fe656"
    },
    {
        "nl_input": "The query requires extracting and printing specific columns from a row based on given column indices. The result should only include the part of the row that matches the specified columns, maintaining their order. Return the tuple of selected column values from the row as the output.",
        "url": "c90da7779a167e77043c04ce9292eb6e"
    },
    {
        "nl_input": "The query requires a function to calculate the day number of the last day in a given month, taking a datetime object as input and returning an integer. The provided code examples demonstrate adding days to the input date, adjusting to the next month, then subtracting to find the last day of the original month. Only relevant code for this purpose should be considered.",
        "url": "820668a155ea53034787f1042a2328c0"
    },
    {
        "nl_input": "The query requires a function to flatten a nested list structure into a single list containing all the elements. The provided code examples demonstrate recursive and comprehension-based approaches to achieve this, ensuring all nested elements are appended to a single-level list if they are not already.",
        "url": "746e950661be8d29bb8cf497c2bb802a"
    },
    {
        "nl_input": "The query requires an implementation for making HTTP requests using a specified method, endpoint, and optional parameters such as headers, data, or query parameters. The implementation should handle exceptions, retries, and timeout configurations while returning the response as a dictionary. It may also involve switching URLs upon repeated failures and handling specific status codes like 406.",
        "url": "81f78b855d5b8fe9705ac46615003bea"
    },
    {
        "nl_input": "The query requires a helper method to determine if a given set of types is the {AnyObject} singleton. Specifically, it needs a function that checks whether the set contains exactly one type and if that type is AnyObject. The provided code examples include a function that performs this check by ensuring the set size is one and verifying the sole element's type.",
        "url": "ddc17c866549c6ed7d51235989c860c8"
    },
    {
        "nl_input": "The query requires converting a 4x4 numpy row-major homogeneous transformation matrix into a column-major GLfloat array for OpenGL usage. The function should transpose the matrix, flatten it into a 1D array, and ensure it is in GLfloat format, suitable for OpenGL transformations.",
        "url": "59d8da7afcf5b0e96574ac4215a35798"
    },
    {
        "nl_input": "The query requires a function to remove the legend from a plot, either for specific axes or the current axes (gca). The desired functionality should handle the case where no axes are specified by defaulting to the current axes and ensure the legend is removed without affecting other plot elements.",
        "url": "84f9940c4dee76cc18b2c7cf263add76"
    },
    {
        "nl_input": "The query requires a function to parse a string \"a, b, c, d\" into a tuple (a, b, c, d). The most relevant code converts a comma-separated string into a tuple of integers, matching the query's need for parsing and transforming string inputs into tuple format. Other codes focus on tuple representation and search, which are not directly related to the parsing requirement.",
        "url": "971e5642fa7223efcc06c337dca4248b"
    },
    {
        "nl_input": "The query requires a function to convert a string representation into a corresponding Python date object. The provided code examples demonstrate methods using `dateutil.parser.parse` and `datetime.strptime` to achieve this conversion, ensuring the input string is properly parsed and returned as a date object. If the input is already a date, it should be returned directly.",
        "url": "dfec582c3aa4ec5eaafa97cc052f017e"
    },
    {
        "nl_input": "The query requires generating x and y numpy arrays representing a Gaussian distribution spanning \u00b14 standard deviations from the mean, useful for plotting. The function should take mean and standard deviation as inputs, with an optional parameter for the number of points, and return the corresponding x and y values for the distribution.",
        "url": "8d2a0bf0c1937e144da08f9d53432914"
    },
    {
        "nl_input": "The query requires a function to invoke a specified Trigger of another Area with optional parameters. The most relevant code defines a method that takes a target, trigger, and parameters (as a dictionary), aligning with the requirement to call a trigger with optional parameters. This method facilitates inter-area communication by executing triggers dynamically.",
        "url": "93fd9d04ea0ba686378532352580da58"
    },
    {
        "nl_input": "The query requires a method to force PyYAML's `yaml.dump` function to use multi-line string style (block scalar style \"|\") when serializing strings containing newline characters. The solution involves customizing the representation of strings by checking for newline characters and applying the appropriate YAML scalar style during the dump process.",
        "url": "d04afb88b8e76370816e10e2ef0489ce"
    },
    {
        "nl_input": "The query requires a function that ensures a given function is executable only once. Subsequent calls to the function should have no effect. The solution involves creating a wrapper function that tracks whether the original function has already been called and prevents further executions after the first call.",
        "url": "e3cab059569d3c5bbd974a42e0a7a488"
    },
    {
        "nl_input": "The query requires creating a Graphviz graph from text input. Specifically, it needs a function that takes textual data, processes it using Graphviz's Source class, and outputs the graph in SVG format by decoding the result. The focus is on converting text representations into graphical visualizations leveraging Graphviz capabilities. Other functions are unrelated to this requirement.",
        "url": "c492f4d1b811b4b2f599b2b594ef2fa4"
    },
    {
        "nl_input": "The query requires implementing a method to retrieve the next value in a sequence or page. Specifically, it involves iterating through items, processing each item to produce a result, and updating the remaining count after successfully obtaining the next value. The solution should handle iteration and potentially manage an iterator's state.",
        "url": "1cd8598eada8e6213ad9a5841079e3a4"
    },
    {
        "nl_input": "The query requires creating a new *Document* instance from a given collection. The relevant code demonstrates how to instantiate a new object by assigning the collection to a parameter and returning a new instance of the specified class with provided arguments. It focuses on object creation using existing class structures and attributes.",
        "url": "4bae73fa2bdaf7b167050bf6b5c09902"
    },
    {
        "nl_input": "The query requires a function to extract a subimage from a given image based on a specified rectangle segment (x, y, w, h). The most relevant code defines a function that takes an image and a segment, then returns the corresponding subimage by slicing the image array using the segment's coordinates and dimensions.",
        "url": "adf1e40be190a7d6a349c02a10d5a420"
    },
    {
        "nl_input": "The query requires a function to format a given number in decimal format, using a period as the decimal separator and optionally including commas for thousands separators. The solution should allow customization of decimal places and provide an option to exclude commas if desired, ensuring numeric values are presented clearly and consistently.",
        "url": "6c190d35f3b002574675f1e3ab001e73"
    },
    {
        "nl_input": "The query requires a function to decode a bytearray into a value, potentially handling raw data. The desired function should take a bytearray as input, optionally process it as raw data, and return the decoded value using a specific format or encoding method, possibly involving structural unpacking or base64 decoding.",
        "url": "57a4c6f385e589e91cd6625dab4b410e"
    },
    {
        "nl_input": "The query requires fetching an image from a given URL and converting it into a Pillow Image object. This involves using a library to request the image data, handling the response content appropriately (e.g., using BytesIO), and then opening the image data with Pillow's Image module to create an Image object for further processing or use in applications.",
        "url": "927f00ae21352b1a481fdb3b3a998709"
    },
    {
        "nl_input": "The query requires a function to perform 2D Gaussian convolution on an image using a 1D Gaussian kernel. The desired code should apply the kernel separately along each axis of the image, achieving a smooth and efficient blurring effect through separable convolution. Only the first code snippet matches this requirement by utilizing `scipy.ndimage.filters.correlate1d` for sequential axis-wise filtering.",
        "url": "e9c213af9e538bd916581d4896dba6bb"
    },
    {
        "nl_input": "The query requires a function to ensure that a mock object is called exactly once. If the mock is called more or fewer times, an AssertionError should be raised with a descriptive message indicating the expected and actual call counts. This ensures the mock's behavior adheres strictly to the expectation of a single invocation.",
        "url": "283407ebde908befdeb4f9e9a180dcad"
    },
    {
        "nl_input": "The query requires a function to compute the L2 norm of an array, defined as the square root of the dot product of the vector with itself. The function should take an array as input, convert it to a suitable format if necessary, and return the L2 norm value. Among the provided code snippets, the focus is on identifying the implementation that matches this requirement.",
        "url": "6eae45bb8c323c115cf65c7a07fdcc89"
    },
    {
        "nl_input": "The query requires a function to lock a connection, preventing its use elsewhere. It needs to set a locked state and potentially block until the lock is acquired. The focus is on managing connection access through locking mechanisms, ensuring that the connection remains unavailable for other processes until unlocked.",
        "url": "816895340ccbbbb54d93a01f6a2e90d8"
    },
    {
        "nl_input": "The query requires a function to calculate the MD5 hash of a file. It should read the file in binary mode, compute its MD5 hash using the hashlib library, and return the hexadecimal digest of the hash. The function must handle file input and produce an MD5 hash string as output.",
        "url": "26bc7d3a200bdf0ca8e1859c261311a2"
    },
    {
        "nl_input": "The query requires obtaining a ctypes void pointer to a memory-mapped region. This involves casting a pointer to the memory-mapped area, using ctypes to handle the memory buffer and ensure it is represented as a void pointer for flexible usage in interfacing with other C-level operations or libraries.",
        "url": "fec232c19895c2355a9c5e0943bd3500"
    },
    {
        "nl_input": "The query requires a function to identify and return duplicated values from the specified column (col_name) in a DataFrame (df). The desired output is a DataFrame containing only the rows with duplicate entries in the given column, excluding null values. The provided code snippet '71ac2d55c8dc09493dd8ee9bf38f707a' fulfills this requirement by filtering duplicates based on the specified column.",
        "url": "71ac2d55c8dc09493dd8ee9bf38f707a"
    },
    {
        "nl_input": "The query requires a function to validate email addresses, ensuring they conform to standard email formatting rules. The most relevant code implements this by using Django's built-in `validate_email` and handling exceptions to return a boolean value indicating validity. It takes a string input (email) and checks if it is a properly formatted email address.",
        "url": "c6194fe5a34f0e66d7c6f7108b41e3c2"
    },
    {
        "nl_input": "The query requires loading a floating-point value from a specified memory address. If the second argument starts with \"*\", it should be treated as an indirect reference. The task involves interpreting memory addresses and handling indirect references to load the correct floating-point value.",
        "url": "036b4c02ed9098fec68a728552683cf6"
    },
    {
        "nl_input": "The query requires creating an object of a given class with specified content members. The relevant code demonstrates how to instantiate an object of class `cls` and assign it a dictionary of members. The requirement is to ensure the object is properly initialized with the provided attributes, returning the constructed object as the result. Other codes are unrelated to this specific task.",
        "url": "06e514824a4cbc11df6792c766d1107e"
    },
    {
        "nl_input": "The query requires converting a Python list of unicode strings into a Java String array. This involves creating an object array in Java, finding the \"java/lang/String\" class, and setting each element of the array with the corresponding string from the Python list using UTF encoding. The provided code demonstrates this conversion process.",
        "url": "cb7ea10fe8e12a61d1c4426495277b2b"
    },
    {
        "nl_input": "The query requires a function to extract distinct values from a list while preserving their original order. It avoids using certain modules (e.g., `collections.OrderedDict`) for compatibility reasons and prefers efficient methods, such as utilizing a set to track seen elements or iteratively building a new list with only unique items. The implementation should be compatible with older Python versions like 2.6.",
        "url": "328596b5f38ea5aea10ae6d53e289f18"
    },
    {
        "nl_input": "The query requires a function to remove newlines and multiple spaces from a string. It should clean up unnecessary whitespace, potentially including tabs, and ensure the resulting string is compact without altering the core content. The solution may involve replacing or stripping specific whitespace characters.",
        "url": "ffaf50749737d70a6ecb6ce9b0f9ac24"
    },
    {
        "nl_input": "The query requires a function to check if a given key exists in a datastore, returning True if the key is present and False otherwise. The provided code examples demonstrate methods that retrieve keys from the datastore and verify the existence of the specified key within them.",
        "url": "cca5dd52a3d19626fff09249a49c1508"
    },
    {
        "nl_input": "The query requires extracting the last row or column of a square matrix A. The relevant code demonstrates obtaining the last index of a tensor or array, which can be utilized to access the last row or column. The requirement focuses on identifying the appropriate indexing method for this operation, ensuring compatibility with the structure of square matrix A.",
        "url": "cffe83a2e89929847264ed6d72d2bfca"
    },
    {
        "nl_input": "The query requires a function to split a multiline string into a list of non-blank lines. It should exclude any empty or whitespace-only lines, returning a clean list of stripped strings from the input. The provided code demonstrates a list comprehension approach to achieve this by splitting the string and stripping each line, including only non-empty results.",
        "url": "aea5c1280e87fefede7936dd80701640"
    },
    {
        "nl_input": "The query requires a function to remove all namespaces from an lxml etree document. The desired function iterates through the document's elements, checks for namespace presence using '}', and modifies tags by removing namespace prefixes. Additionally, it ensures namespaces are cleaned up properly without analyzing each provided code snippet.",
        "url": "4897101b66976544fdacfbf2e9c0905c"
    },
    {
        "nl_input": "The query requires a function to end an indentation block and ensure an empty line follows. It involves decreasing the current indentation level and checking if a new line has been automatically added; if not, it writes a new line and sets the auto-added line flag to True. This ensures proper code formatting with appropriate indentation and spacing.",
        "url": "42b3324ffb7137bc277bcb02f986b8c2"
    },
    {
        "nl_input": "The query requires a function to display structured information of object lists, tuples, etc. It needs to format these structures into a readable string representation, handling different separators and ensuring proper formatting for single-element tuples. The solution should join elements with specific separators and manage various data types like strings, lists, and tuples effectively.",
        "url": "8d8f80a0b950b795f1c8a086acdd7118"
    },
    {
        "nl_input": "The query requires printing a list in tabular format. The solution involves calculating column widths based on the longest entry in each column, then formatting and printing rows with separators for a clean table appearance. Data should be aligned within columns for readability, using formatted strings to ensure consistent spacing and structure.",
        "url": "fdf9c3138a50fcd116a6a649d76c6fd5"
    },
    {
        "nl_input": "The query requires extracting the domain part of a URL, specifically the network location (netloc) without any port information. The provided code examples demonstrate methods to parse a URL and return the domain component, ensuring that any port numbers are excluded from the result.",
        "url": "e252a286af69716cea212276bf27704f"
    },
    {
        "nl_input": "The query requires a function to move the turtle forward by a specified step. The relevant code defines a 'forward' method that calculates new coordinates based on the current position, rotation, and step size, then moves the turtle while optionally leaving a trace depending on the brush state. Other provided functions are unrelated to moving the turtle forward.",
        "url": "a90e229ae60bf14f33825c5a2076279a"
    },
    {
        "nl_input": "The query requires a function to request the power state of a server. Specifically, it needs to retrieve the current power status using a mapping system from a server object. The relevant code should interact with a server instance and return its power state through a predefined mapping.",
        "url": "4df736d409ad256e418ff40790a155c7"
    },
    {
        "nl_input": "The query requires a function to print system information, including version and MAC addresses. The most relevant code is an asynchronous function that retrieves and prints system information and interface details, closely matching the query's need for displaying version and MAC address data. Other provided codes are unrelated to system information retrieval.",
        "url": "a9ce795a398353c1a729dd88e9f36571"
    },
    {
        "nl_input": "The query requires a method to handle cursor instances, specifically returning a cursor only if configured for multiselect. It involves processing and converting cursor data, potentially from a database, ensuring it is in a usable dictionary format by removing or altering specific keys like \"_id\". The focus is on cursor manipulation and conditional returns based on configuration.",
        "url": "3517a110d923d3d76980623ab8f32f0a"
    },
    {
        "nl_input": "The query requires a function to process an iterable of dictionaries, deleting a specified key from each dictionary if it exists. The function should iterate through the list of dictionaries and remove the given key using the `pop` method, ensuring no error occurs if the key is absent. The provided code examples demonstrate this functionality with type annotations and concise implementation.",
        "url": "9c7542a2ddb9b898a1ef814aa988a382"
    },
    {
        "nl_input": "The query requires a function to process and format comments from a given input. Specifically, it needs to handle single-line comments by prefixing them with \"* \" and multi-line comments by adding a leading '*' to each line except the last one. The function should also handle cases where the input is None or lacks any line breaks.",
        "url": "ec7551975fa7792ee15876bf8a1fd28d"
    },
    {
        "nl_input": "The query requires a function to generate a temporary filename derived from an original filename, incorporating a unique or modified identifier while retaining the original file extension. This involves manipulating the input filename to produce a new, temporary version with a distinct name but the same extension.",
        "url": "5d64d35b32b31a5d6d02bfa0b6d93eff"
    },
    {
        "nl_input": "The query requires a function that makes a HEAD request to a specified URI. The provided code includes examples of making HTTP requests, with one explicitly using the HEAD method to check if a directory exists by sending a HEAD request to a given URL and handling the response status. The requirement focuses on implementing or utilizing such functionality.",
        "url": "1de08117571a8ec22d8964787f402111"
    },
    {
        "nl_input": "The query requires a utility function to remove duplicates from a list while preserving the original order. It takes a sequence (list) as input and returns a new list with duplicates removed. The function uses a set to track seen elements, ensuring efficient duplicate detection and removal. Alternative implementations may optimize performance by storing the add method of the set separately.",
        "url": "695e29d80ca42056024f20cf87ce69a0"
    },
    {
        "nl_input": "The query requires ensuring that the path in a URL with authority starts with a leading slash. The provided code includes a function to validate this condition by raising an error if the path does not start with a slash when both host and path are present. It also includes functions to check for relative URLs and extract the host from a URL.",
        "url": "c1479c1418466abefea9034bbb795fa5"
    },
    {
        "nl_input": "The query requires a method to forcefully delete objects from memory. The provided code snippets demonstrate clearing or deleting instances and plugins from memory by iterating through lists and using clear() methods. The focus is on removing all references to ensure objects are deleted, including clearing objects, indexes, and keeping alive lists.",
        "url": "54e361163495de66afd390a12edfd5bd"
    },
    {
        "nl_input": "The query requires a function to check if all numbers in a sequence (s) are within a specified interval defined by lower (l) and upper (r) bounds. The function should optionally include or exclude the borders based on a parameter. It involves iterating through the sequence and verifying each number's position relative to the interval.",
        "url": "b81cfdd240c83e76a6587150b51a1068"
    },
    {
        "nl_input": "The query requires enforcing HTML escaping on variables, likely to prevent security vulnerabilities like XSS. The provided code examples include a function that performs HTML escaping by checking for a `__html__` method and then applying an `escape` function, ensuring that the variable is safely escaped even if it results in double escaping. This meets the need for secure variable handling.",
        "url": "3dd1d55124da3efc3cb4dcc02a252531"
    },
    {
        "nl_input": "The query requires a function to compute logarithmic loss for non-binary labels. The relevant code defines a log_loss function that calculates log likelihood using predicted probabilities and true labels, averaging over all samples. It supports multi-class scenarios by accepting non-binary label inputs and computing the loss accordingly. Other provided functions are unrelated to this computation.",
        "url": "a7e256b73adf2d656acee870a3a79760"
    },
    {
        "nl_input": "The query requires computing the Pearson correlation coefficient between two variables. The provided code includes a function that calculates this coefficient by removing NaN values and using numpy's corrcoef method, which matches the query's need. Other codes are unrelated as they focus on covariance and chi-square calculations. Thus, the requirement is to implement or use a function for Pearson correlation computation.",
        "url": "95479cad0b74fe06bcd262b9f5750cff"
    },
    {
        "nl_input": "The query requires a function to save data to a pickle file. It needs to serialize a variable or object and store it in a file for later use, using Python's pickle module. The function should accept the data to be saved and the filename as arguments, and it may optionally return the saved object.",
        "url": "a0c6bdbe745a48b0c5ff9e6435ea812c"
    },
    {
        "nl_input": "The query requires a function to calculate the size of a request payload. It needs to measure the size by processing different components, such as strings or data structures, and summing their individual sizes. The function should handle input elements like 'name' and 'function', returning the total size as an output.",
        "url": "96a858eabc728fc5967a94fb8288ff8b"
    },
    {
        "nl_input": "The query requires a function to draw a horizontal line with specified parameters: starting point (x, y), width, and color. The most suitable code defines a method that uses a rectangle with a height of 1 to create a horizontal line, fulfilling the requirement for simplicity and directness in drawing the line. Other codes involve more complex drawing mechanisms not specifically tailored to horizontal lines. \n\n--- Description of Query's Needs ---\nDraw a simple horizontal line defined by start coordinates (x, y), width, and color using a rectangle-based approach.",
        "url": "bb672ed0a0391881ee18bccacf406e44"
    },
    {
        "nl_input": "The query asks whether logging should be skipped for a specific handler. The requirement is to check if logging is disabled either through a request header \"x-request-nolog\" or via an attribute set on the function itself. This involves evaluating headers and function attributes to determine the skip condition.",
        "url": "e9004b0eb97dd8833d1979057cf3557e"
    },
    {
        "nl_input": "The query requires a function to strip agents (unnecessary components, potentially whitespace or specific characters) from a string. The provided code examples demonstrate methods for removing spaces, tabs, or other attributes from strings or byte sequences, indicating the need for a solution that cleans or trims strings by eliminating unwanted characters.",
        "url": "939f688bbd8bfbcb8630b0f3636c5c14"
    },
    {
        "nl_input": "The query requires a function to remove duplicates from a list and return a unique copy. It seeks an efficient method to iterate through the input list, identify distinct elements, and produce a new list containing only these unique items while preserving their original order. The provided code examples demonstrate different approaches to achieve this functionality.",
        "url": "3cbb0d61a47fcf107eb90adf46f865af"
    },
    {
        "nl_input": "The query requires a function to convert pyspread style into an xlwt pattern, specifically focusing on background color (\"bgcolor\"). The function should check if \"bgcolor\" exists in the pys_style, create a solid pattern using xlwt, and map the background color to the appropriate index for pattern_fore_colour. If \"bgcolor\" is absent, it should return None.",
        "url": "9c92cc076049eee7eda2f0428ba69851"
    },
    {
        "nl_input": "The query requires a function to return the key preceding a given key in a tuple of tuples. The first code snippet fulfills this by iterating through the tuples, identifying the given key, and returning the previous key, handling cases where no previous key exists with a try-except block. Other codes are unrelated as they check for key existence rather than finding the previous key.",
        "url": "a9f49c41a4259bbd6e398fd943917f8f"
    },
    {
        "nl_input": "The query requires synthesizing white noise with a specified duration. The code should generate uniform random samples between -1 and 1, based on the samplerate and duration, returning audio samples. Alternatively, it may involve generating normal noise by combining random values and normal distributions, though the primary focus is on white noise synthesis.",
        "url": "f262d61c7690f2df3b731ba862e94301"
    },
    {
        "nl_input": "The query requires a function to convert a sequence into a comma-separated string. If the input is a single object, it should return the string representation of that object. The function should handle lists, tuples, and single objects, ensuring proper conversion and joining with commas when applicable.",
        "url": "933992c3c30c3e7204a12c26102f4cff"
    },
    {
        "nl_input": "The query requires a function to apply gzip compression to a response. The function should take the response data, compress it using gzip with a specified mode, and return the compressed data. The provided code examples demonstrate writing the response to a gzip file object and retrieving the compressed value. Ensure the function handles the response correctly and returns the compressed output.",
        "url": "01df1f7502b37cbfa0c1093f3ac8af8d"
    },
    {
        "nl_input": "The query requires a function to check if a given string is a punctuation mark. The relevant code should return true if the string is not a vowel or consonant, implying it could be a punctuation symbol. It uses a configuration with predefined vowels and consonants for comparison. Other provided functions are unrelated to punctuation detection.",
        "url": "e4b57fbe5c67f44a11eb1116c674b42e"
    },
    {
        "nl_input": "The query requires a function to check if a given key exists in a dictionary, with the search being case insensitive. The function should iterate through the dictionary keys, compare them to the input key (both converted to lowercase), and return True if a match is found, otherwise return False. This ensures that the key search ignores case differences.",
        "url": "da943b499fe7be187ec7e73bf3623c8f"
    },
    {
        "nl_input": "The query requires a function to generate a lowercase sortable title for instances, similar to Plone's sortable_text index. It involves retrieving a title from an instance, ensuring it's callable if necessary, and converting it to lowercase for consistent sorting. The focus is on creating a sortable, normalized string representation of the title.",
        "url": "bf8ce0236578b4476e2e2300f7e64037"
    },
    {
        "nl_input": "The query requires a function to calculate the mean of non-None elements in a list, ignoring any sentinel value representing missing data. It should iterate through the list, summing up the valid elements and counting them, then return the average if there are valid elements; otherwise, return None.",
        "url": "fdb8b5e3cd38ee9a1c11aac2eb093594"
    },
    {
        "nl_input": "The query requires a function to write a dictionary to a JSON file with indentation and sorted keys. The most suitable code is a function that opens a file in write mode, then uses `json.dump` to serialize the dictionary into the file with an indent of 2 spaces and sorted keys for better readability.",
        "url": "380b53a3dd3846cf3bce78ed3f7cb50d"
    },
    {
        "nl_input": "The query requires a function to perform dragging an element to another element. Specifically, it needs a method that utilizes actions like scrolling and performing drag-and-drop operations between two elements using a driver interface, as seen in the first code snippet provided. Other codes do not meet this requirement.",
        "url": "76d7727145c20df82e3cdd84ce19c14e"
    },
    {
        "nl_input": "The query requires a function to reshape a list of lists into the specified shape and data type using NumPy. It involves converting the input list into a NumPy array with a given data type and reshaping it according to the desired dimensions, as demonstrated in the first two code examples provided. The third code is unrelated to reshaping.",
        "url": "75029e9b5315bf8366b2c9d646b179e4"
    },
    {
        "nl_input": "The query requires a method to conveniently change the font size. The most relevant code provides a function `set_font_size` that adjusts the font size if it differs from the current size, utilizing a private method `_set_size` for the actual modification. This function ensures efficient updating by avoiding unnecessary changes when the desired size matches the existing font size.",
        "url": "9b8369463483ff7acf0d48fdb0173ba3"
    },
    {
        "nl_input": "The query requires a function to convert Minigo coordinates to GTP coordinates. It involves mapping a given coordinate (x, y) to a GTP format using predefined column labels and adjusting the row index based on the board size defined in the 'go' module. If the coordinate is None, it should return 'pass'.",
        "url": "f80f557e979d5bad8c10b42ac118bcda"
    },
    {
        "nl_input": "The query requires implementing a function to run PyLint in verbose mode on a source file, with an optional parameter to generate HTML output. The function should execute PyLint with the specified format and open the HTML report if generated. It needs to handle both colorized terminal output and HTML file generation based on the input parameter.",
        "url": "4e7fc7292467413a1cfacc5b3c233894"
    },
    {
        "nl_input": "The query requires a function to select rows where a specified field is not None. The most suitable code defines a function that filters a table for rows where the given field has non-None values, potentially allowing complementing the selection. It uses a lambda function to check if the value is not None.",
        "url": "4637b5cbf53ffd9b5dc57fa7dddb71b9"
    },
    {
        "nl_input": "The query requires generating random lognormal variates with specified parameters. The function should take mean (mu) and shape parameter (tau), optionally a size, and return values sampled from the lognormal distribution. The primary focus is on utilizing a lognormal random sampling method to produce the desired output efficiently. Other distributions or calculations are irrelevant to this query.",
        "url": "9688e9bb942e9ce1c123ba0b5179f748"
    },
    {
        "nl_input": "The query requires a function to determine the last occurrence of the minimal value in an array 'x'. The position should be relative to the length of 'x'. It involves converting 'x' into a suitable format, identifying the minimal value's index from the end, and normalizing it by the array's length. If 'x' is empty, it should return NaN.",
        "url": "22f1d49b1969ee7e89c6533b9e92988f"
    },
    {
        "nl_input": "The query requires a function to compare two strings by ignoring whitespace differences and asserting if they are identical. The most relevant code defines a function that normalizes whitespace in two input strings and raises an error if they do not match, ensuring string comparison is robust against formatting variations. This meets the need for a whitespace-insensitive string assertion.",
        "url": "fc1326a05fcddae2c66c888da1670117"
    },
    {
        "nl_input": "The query requires a 1x1 convolution implementation, which reduces dimensionality in neural networks. It needs a function taking input planes, output planes, and stride as parameters, returning a Conv2d layer with specified kernel size, stride, and no bias. The focus is on efficient feature transformation using 1x1 convolutions in deep learning models.",
        "url": "1c63a8f567508c2dbbd974597db516e0"
    },
    {
        "nl_input": "The query requires a boolean type converter that can process various input types (e.g., strings, booleans) and convert them into a boolean value in a user-friendly way. The solution should handle empty values, string representations of boolean values (e.g., \"true\", \"false\"), and numeric equivalents (\"1\", \"0\") while ensuring type checking for robust conversion.",
        "url": "5effe214bd4eb37a839bd6cc85d96f1d"
    },
    {
        "nl_input": "The query requires a function to return the size of a Jacobian matrix as a tuple (nrow, ncol). The dimensions depend on the input string 'm', where the first character determines the number of rows ('F' for self.n or 'G' for self.m), and the second character determines the number of columns ('x' for self.n or 'y' for self.m).",
        "url": "1cc69e1108c67013d1749b1e3b2f697c"
    },
    {
        "nl_input": "The query requires a function to validate if a given value is a valid enum constant. The function should check whether the input belongs to a predefined set of constants associated with an enum type, ensuring it is correctly mangled and matches the expected enum values. It must handle string types and confirm the value's validity within the enum context.",
        "url": "aeee8726b5988ca3cfb4cf62da5ad292"
    },
    {
        "nl_input": "The query requires a function to flatten a potentially deeply nested list into a single-level list. The solution should handle lists of any nesting level and include all elements in the resulting flat list, preserving their order. The provided code examples demonstrate different approaches to achieve this functionality using recursion or list comprehensions.",
        "url": "1b6646003e72c1cab411541d62676516"
    },
    {
        "nl_input": "The query requires a function to navigate to the parent directory of the current working directory. The most relevant code demonstrates changing the directory to the parent path using `os` and `osp` modules. It constructs an absolute path to the parent directory and changes the current working directory to it. Other codes focus on retrieving parent directory names or paths but do not change the directory.",
        "url": "8089b0416c588b33db7fed71f2648f52"
    },
    {
        "nl_input": "The query requires generating a 20-character passphrase using easily typeable characters including ., [. The solution should focus on creating a passphrase with a specified length, utilizing a set of characters that are simple to input, ensuring the generated passphrase is both random and typeable.",
        "url": "dfca7d4ad7f48b18f0ab7973bae010d7"
    },
    {
        "nl_input": "The query requires generating a fresh, unique identifier. It needs a function that creates IDs, potentially customizable in length or format, and may involve randomness or sequential generation. The provided code examples suggest methods using UUIDs, random strings, or alphanumeric combinations for ID creation. The solution should focus on producing a new, distinct identifier efficiently.",
        "url": "fd0f14db1e14692747016c200776eda9"
    },
    {
        "nl_input": "The query requires a function to convert a snake case string (e.g., \"example_string\") into camel case (\"exampleString\"). It should split the input string by underscores, capitalize the first letter of each fragment except the first one, and concatenate them without separators. The result is a camel-cased string representation.",
        "url": "b19a39d8871b9aba99c3328dd4a655df"
    },
    {
        "nl_input": "The query requires a method to transform a string value into its corresponding data type, such as converting a string to an integer if possible. The method should check if the string represents an integer and return it as an int, handling potential errors like ValueError or OverflowError during conversion. If conversion isn't possible, the original value should be returned.",
        "url": "552f0922b8f6a45b814f34ba736cd93d"
    },
    {
        "nl_input": "The query requires calling a C function with a pointer as its last argument and retrieving the value stored in the pointer after the function execution. The goal is to return the C object contained in the pointer. This involves creating a new pointer, appending it to the function arguments, executing the C function, and then extracting and returning the value from the pointer.",
        "url": "0fd6c95993321c05b30171eec7a02101"
    },
    {
        "nl_input": "The query requires formatting a log message by replacing newline characters with indented newlines. It involves defining a method that overrides the default formatting behavior to ensure multi-line messages are properly indented in the log output, maintaining readability and structure for logged information.",
        "url": "3f0750078e82a7d14d344a26ecdd7721"
    },
    {
        "nl_input": "The query requires a function to iterate through a dictionary of {key: default value} pairs and apply the `setdefault` method on the target dictionary for each key-value pair, ensuring all specified keys exist with their default values. The function should then return the updated dictionary.",
        "url": "9bbbb20f503ba46da76eaa77b98784af"
    },
    {
        "nl_input": "The query requires a function to move a datetime object by a specified number of years in a given direction. The function should use a 'delta' with the relativedelta method for year adjustments and call '_move_datetime' to apply the shift, while ignoring irrelevant units like 'day'. The provided code examples focus on implementing this year-based datetime movement.",
        "url": "83c7e1fd8666e261b69048f44f984a14"
    },
    {
        "nl_input": "The query requires a function to check if a graph contains a specific edge between two nodes, returning True if the edge exists. The relevant code defines a method that verifies whether both nodes are present in the graph's edges dictionary and confirms the connection between them. This meets the requirement by checking node existence and their adjacency.",
        "url": "7ce5918e50714bd3660f99f0a95cbfe9"
    },
    {
        "nl_input": "The query requires a function to convert a list of integers into a string representation with customizable separators. The provided code demonstrates how to transform each element into a string and join them using a specified separator, allowing for flexible formatting of list elements as a single string output. Only relevant code for list-to-string conversion should be considered.",
        "url": "bde3fb5a6302302752336ef6267a3877"
    },
    {
        "nl_input": "The query requires a function to obtain the string representation of a given type. It should handle custom types by converting them to strings and use the `__name__` attribute for other types, returning an empty string if neither condition is met. The focus is on type conversion and string representation logic.",
        "url": "2e39bbd87c8e5002835db5c873dc5a66"
    },
    {
        "nl_input": "The query requires extracting line numbers from comments in a Python file. The relevant function matches patterns in comments to retrieve an integer representing the line number or returns 0 if no match is found. Line number extraction is based on a regular expression pattern designed to capture line numbers within specific comment formats.",
        "url": "fbc86c5f63c6cbab0a4aa72f0faadcaf"
    },
    {
        "nl_input": "The query requires a function to calculate the memory byte size of a Numpy array, returning an integer value. It involves determining the product of the array's shape and multiplying it by the item size of the array's data type. The focus is on computing memory usage based on array dimensions and element size.",
        "url": "f0456030f3cb36953670e94276edb1d5"
    },
    {
        "nl_input": "The query requires a helper function to convert strings to integers using quick base conversions. It should support customizable radix and alphabet for encoding, enabling flexible numeral system transformations. The ideal function processes input strings, applies the specified base conversion logic, and outputs corresponding integer values efficiently.",
        "url": "bb7fca42c0c60dc5dcc3212c85ea60c7"
    },
    {
        "nl_input": "The query requires a function to determine if an object is a valid path. It should check the existence of the path and handle potential errors, ensuring the input is a string-type object representing a file or directory path. The function must return a boolean value indicating whether the object is indeed a path.",
        "url": "4edf2a89aa8f5a8713825607f13b3a6c"
    },
    {
        "nl_input": "The query requires a function to compose a list of functions into a single function that applies them sequentially. The composed function should take an input and apply each function in the list, feeding the output of one as the input to the next, and finally return the result after all functions have been applied.",
        "url": "2842f428a9186c722cb73f43029707ed"
    },
    {
        "nl_input": "The query requires a function to remove duplicate items from a list while preserving the original order. The provided code examples demonstrate different approaches to achieve this, focusing on iterating through the list and maintaining a result list or set that only includes unique items, ensuring no duplicates are present in the final output.",
        "url": "f47adf1dd2cd6ee94174173d4c0dba3f"
    },
    {
        "nl_input": "The query requires a function to check if 'cnr' or 'cns' files are empty, meaning they only contain a header. The needed function should open the file, read lines, and return True if no data exists beyond the header, indicating the file is effectively empty. This matches the functionality of checking for files with only headers.",
        "url": "450cc73f5679416b2729c29d17c5a97f"
    },
    {
        "nl_input": "The query requires a function to determine if the game is over, which is true when the last two moves were Passes or if the current move exceeds the maximum allowed depth. The provided code includes a relevant function that checks if the game is over or if the move count surpasses the maximum game length. Other codes are unrelated to the query's needs.",
        "url": "c4ef266e883c3d9c6e5ae62b8ab668ef"
    },
    {
        "nl_input": "The query requires a function to retrieve the current desktop using the _NET_CURRENT_DESKTOP property from the EWMH specification. It needs to interact with the window manager to obtain the index or identifier of the currently active desktop for proper workspace management. The provided code snippet demonstrates a ctypes-based implementation for this functionality.",
        "url": "e5a9e1bb21a3cd7df0858dad0b20c589"
    },
    {
        "nl_input": "The query requires creating a real matrix object using numpy from given data. The focus is on constructing a numpy array by iterating through row data or converting existing structures into a numpy-compatible format. The provided code snippets demonstrate methods for generating or transforming matrices, emphasizing the use of numpy.array to create the desired matrix object.",
        "url": "a3a4c61e7eea53c9e490604db0b3590b"
    },
    {
        "nl_input": "The query requires a function to determine whether a given value is either a byte string or a unicode string. The provided code examples aim to identify string types, with one specifically checking for unicode and another distinguishing between str and bytes classes based on Python version compatibility. The goal is to classify the input as one of these two string types.",
        "url": "26c958614bee5fc1c19896b5f0551f81"
    },
    {
        "nl_input": "The query requires a function to read text from a file while automatically detecting the file's encoding using the 'chardet' library. The function should open the file in binary mode, detect its encoding, and then decode the content accordingly. This ensures proper handling of files with unknown or varying encodings.",
        "url": "9969728e6736bf82b1e9a03044364571"
    },
    {
        "nl_input": "The query requires a function to clear unused counters by iterating through the counters dictionary and deleting keys with empty values. The relevant code demonstrates this by checking if each counter value is empty and, if so, removing it from the dictionary. This ensures that only active counters remain stored.",
        "url": "1f84fc1e090db77de8d51c7190146975"
    },
    {
        "nl_input": "The query requires a function to rewrite a file by adding a specified line at its beginning. The function should open the target file, insert the given line as the first line, and then write the updated content back to the same file, effectively prepending the line while preserving the original content.",
        "url": "b58a9251f71e60af76cc02adf3aeb3e2"
    },
    {
        "nl_input": "The query requires calculating the closest distance between a line segment (defined by points 'a' and 'b') and a point 'p'. The relevant function is identified as it computes the distance between point 'p' and its projection on the line segment using the 'closest_point' function, then returns this distance. Other codes involve unrelated computations such as array proximity or center-based distances.",
        "url": "9241c85c39ed221796f46af344122ca2"
    },
    {
        "nl_input": "The query requires a wrapper function for the iter method callback, ensuring the result is always iterable. If the result isn't inherently iterable, it should be converted into a single-element list. The provided code examples demonstrate forcing iterability by checking attributes and wrapping non-iterable results in a list.",
        "url": "a7ae1c18c06bd04b301a3a9dd6511232"
    },
    {
        "nl_input": "The query requires a method to release a resource back to its originating pool, ensuring it is available for reuse unless marked as errored, in which case the resource should be deleted. The provided code demonstrates conditional logic for releasing or deleting a resource based on its status, interacting with a pool object.",
        "url": "c143548cafea9a3925ec6ee6efc41438"
    },
    {
        "nl_input": "The query requires a function to convert a nested list into a single-level list without splitting strings. The desired function should preserve strings as individual elements while flattening the structure of the list. Among the provided code, the focus is on identifying the implementation that meets this specific requirement without altering string integrity.",
        "url": "fd38a2c403c3400fdc8927dbab88c8c1"
    },
    {
        "nl_input": "The query requires a function to upload an IP list as a JSON payload. It needs to check if the IP list exists by name, and if so, upload the provided list in JSON format using the 'upload' method with the 'json' parameter and type set to 'json'. The focus is on handling IP lists and their JSON serialization for uploading.",
        "url": "3c6c3247179fba80a83ab23b9c53b9ef"
    },
    {
        "nl_input": "The query requires a function to return the shape of an image (img). It should check if the image object has a 'shape' attribute and return it directly; otherwise, it should retrieve the shape from the image's data. The focus is on handling different image types and ensuring the shape can be extracted accurately.",
        "url": "cbc0170c46062096a84468b365429079"
    },
    {
        "nl_input": "The query requires a function to extract key property names from a class. It needs to identify properties marked with a 'key' qualifier and return their names as a list. The focus is on filtering class properties based on specific qualifiers and collecting the relevant property names.",
        "url": "662c104ceb549d3c48424fadc1836101"
    },
    {
        "nl_input": "The query requires calling a C function with a pointer as its last argument and returning the contained C object after execution. The focus is on creating a pointer, invoking the C function with appropriate arguments, and extracting the value stored in the pointer post-execution. This involves dynamic memory handling and interfacing with C functions via a foreign function interface.",
        "url": "0fd6c95993321c05b30171eec7a02101"
    },
    {
        "nl_input": "The query requires a function to add attributes to a widget of a bound form field, with an option to replace or append the attribute value. The first code snippet matches this requirement by defining a function that modifies the widget attributes of a form field based on the given attribute name and value, with a replace flag for different behavior.",
        "url": "c33ee1c2506ac02f6f60f8415a7f720a"
    },
    {
        "nl_input": "The query requires a function to execute a command (*cmd*) and exit the program with an appropriate exit code based on the command's result. The focus is on running the command and ensuring the program terminates with the correct status code reflecting the command's outcome.",
        "url": "13dc817c65ddde88d2a2ec6eee680a81"
    },
    {
        "nl_input": "The query requires a function to merge two dictionaries into a new one, similar to how subclassing works. The resulting dictionary should update the original with new key-value pairs, overwriting existing keys if necessary. The solution should not modify the original dictionaries but return a newly merged dictionary instead.",
        "url": "6355dab675855466faa16c64350ef5f7"
    },
    {
        "nl_input": "The query requires a function to load and execute Python files by iterating through a list of file paths, logging each file's execution, and using the `execfile` method to run them within specified global and local contexts. The focus is on processing multiple Python files dynamically.",
        "url": "fafac547be2039f7ecb1de9409b4e007"
    },
    {
        "nl_input": "The query requires a function to replace null values (None or empty strings) in a specified column with NaN. The provided code demonstrates methods to achieve this by identifying null values and substituting them with NaN, ensuring data consistency. The focus is on handling exceptions and compatibility with different data types during the replacement process.",
        "url": "93c0c2ede9a5c8a8b970af18721497ae"
    },
    {
        "nl_input": "The query requires computing a boxplot for a given pandas Series. It involves using the matplotlib library to calculate boxplot statistics, handling null values, checking for numeric data types, and formatting the output, including adding a count of non-null values and converting outliers (fliers) into a string format separated by \"|\". The result should be a dictionary containing the computed boxplot statistics.",
        "url": "8dd4b555f0e59a0dec7e2a588e55945c"
    },
    {
        "nl_input": "The query requires a function to find the index of a specific geometry in a list, using identity comparison (avoiding costly equality checks). It seeks an efficient method to identify if a given geometry exists within a collection by reference, returning its index if found. This ensures performance optimization by bypassing detailed geometric comparisons.",
        "url": "aebc38a583a508530af17ee1c8fef11f"
    },
    {
        "nl_input": "The query requires a function to convert CamelCase named strings into a C-like naming convention, specifically snake_case, where each word is lowercased and separated by underscores. The provided code examples demonstrate regex-based transformations to achieve this by inserting underscores between lowercase letters and capital letters within the input string.",
        "url": "245f32e66d5c23e21c45f22693852c11"
    },
    {
        "nl_input": "The query requires a function to determine the number of leaf nodes in a tree structure. It should recursively traverse the tree, counting nodes that have no children (leaves). The function must handle both leaf and non-leaf nodes, summing the leaves in the left and right subtrees appropriately.",
        "url": "7003757d630c03cf7dd68203952cd4cf"
    },
    {
        "nl_input": "The query requires using openpyxl to read an Excel file. The task involves loading the workbook in read-only mode to optimize performance and handling exceptions that may occur during the file loading process. The goal is to successfully return the workbook object for further data processing. Other provided functions are unrelated to this specific requirement.",
        "url": "3cd62873f26fd670aeecec18cc0dd297"
    },
    {
        "nl_input": "The query requires a function to rotate a list in-place by a specified number of steps. The function should modify the original list rather than creating a new one, handling both positive and negative step values efficiently. It must ensure that the rotation wraps around the list length and avoids unnecessary operations when steps are zero or a multiple of the list's length.",
        "url": "707569fdd77ebde2ce9e44aeb15df944"
    },
    {
        "nl_input": "The query requires a function to recursively convert all iterables into tuples while leaving strings unchanged. The desired functionality should handle nested structures, converting each iterable level into a tuple format without altering string elements. This ensures the output is hashable and maintains the original data's structure in tuple form.",
        "url": "aea6b9304a9b41f33141846e80e9d158"
    },
    {
        "nl_input": "The query requires a function that ensures a specific exception is raised when certain predicates are called, and the string representation of the exception matches a given regular expression. The most relevant code describes a method that raises an exception if the expected exception's string does not match the provided regular expression.",
        "url": "910b81e1c0bbb58ca384ea2eccf81621"
    },
    {
        "nl_input": "The query requires a function to process an iterable of strings by converting each string to lowercase. The relevant code defines a generator function that takes an iterable of strings as input and yields each string in lowercase, meeting the requirement for efficient and memory-friendly string transformation. Other provided functions do not match this specific need.",
        "url": "24e9010513628fcbcbc40bc6617d3e5c"
    },
    {
        "nl_input": "The query requires a method to remove a resource instance from an internal cache by using its cache key. The provided code demonstrates removing an item from a cache dictionary using the resource's internally generated cache key, ensuring the resource is properly deleted or released based on its state.",
        "url": "bf6a4144ae873567dfbd61579c2bba94"
    },
    {
        "nl_input": "The query requires converting a confusion matrix into a 2x2 plain list of values. It needs a method to extract and organize the matrix values into a simple list format, such as [[a, b], [c, d]], where a, b, c, and d are integer values from the confusion matrix cells. This representation should be straightforward and not involve other data structures like dictionaries or arrays.",
        "url": "c86694b645e5ae2f3a398a6ffb38c3c1"
    },
    {
        "nl_input": "The query requires synthesizing white noise with a specified duration. The code should generate uniform random samples between -1 and 1, based on the samplerate and duration, returning audio samples. Alternatively, it may involve generating normal noise by combining random values and sampling specific points. The focus is on producing noise signals programmatically.",
        "url": "f262d61c7690f2df3b731ba862e94301"
    },
    {
        "nl_input": "The query requires a function to disassemble Python bytecode files (.pyc). It should read the bytecode, extract necessary information like version, timestamp, and code object, and perform disassembly on the code object(s). The function must support both single code objects and lists of code objects, outputting the disassembled result to a specified stream if provided.",
        "url": "765a09c3a704cf281562a8a77a1f8be0"
    },
    {
        "nl_input": "The query requires a function to flatten a nested list structure into a single list containing all the non-list elements. The provided code examples demonstrate recursive and comprehension-based approaches to achieve this, ensuring that all levels of nesting are resolved into a single, flat list output.",
        "url": "746e950661be8d29bb8cf497c2bb802a"
    },
    {
        "nl_input": "The query requires an asynchronous method to run a worker without closing connections, beneficial for testing purposes. It needs a function that starts the worker asynchronously and maintains the connection state without terminating it. The focus is on ensuring the worker operates in an async manner while keeping the connection active for continuous testing or operation.",
        "url": "74bfcc70541e0daebb0f4db57e3b2a94"
    },
    {
        "nl_input": "The query requires identifying the function that returns the path to the tensorflow_datasets directory. The requirement is to extract a function that navigates through directory levels using `os.path.dirname` and locates the desired directory relative to the current file's location. The result should provide the absolute path to the tensorflow_datasets directory.",
        "url": "64b730a598a02b60d9a4b7edcc0c6a63"
    },
    {
        "nl_input": "The query requires a function to convert a hexadecimal color code into an HSV (Hue, Saturation, Value) color representation. The function should normalize the hex input, extract RGB values, and then transform these values into the HSV color space using a library function like `colorsys.rgb_to_hsv`.",
        "url": "b1e30dc54d4a7c52b1b808729dfb1ec3"
    },
    {
        "nl_input": "The query requires a method to handle plotting scenarios where the plot function neither creates a figure nor calls a save function. It needs to ensure that a figure is created, the plot is executed, axes are defined, and the plot is saved before closing the figure, without relying on external display or manual figure management.",
        "url": "f1fef8351e7337c7f820cb898d402168"
    },
    {
        "nl_input": "The query requires a function to return the size of a multidimensional array. It needs to determine the dimensions of the array by recursively checking its structure and handling potential type errors, ensuring compatibility with various array formats and returning the dimensionality as a list or similar structure.",
        "url": "3658ef914c025d17376c894d11f4e034"
    },
    {
        "nl_input": "The query requires a method to convert Markdown content into plain text by utilizing an intermediate HTML representation. The function should take Markdown input, convert it to HTML, and then extract plain text from the HTML. The focus is on creating a process for documentation generation in HTML format.",
        "url": "a687d18eb86da6fe54b7cfe32af45a6e"
    },
    {
        "nl_input": "The query requires a function to establish a connection to an Access database using ODBC with a pre-specified DSN. The function should accept the DSN as a parameter and optionally allow setting autocommit behavior. Among the provided code snippets, the relevant one demonstrates connecting to the database with the specified parameters.",
        "url": "4b906d8d602bbb965d25996d5a4c5cb1"
    },
    {
        "nl_input": "The query requires a function to read lines from a file, remove whitespace, and optionally exclude commented or empty lines. The provided code demonstrates reading a file, handling potential errors, stripping whitespace from each line, and returning the cleaned lines as a list. One example also includes filtering out lines starting with comments.",
        "url": "4cd26ba017dabe234b6b960e4c174cd7"
    },
    {
        "nl_input": "The query requires a function to bring a specific figure window to the front, using a numeric identifier for the figure. The relevant code defines a function that accepts a figure identifier, checks if it is a number, retrieves the corresponding figure, and raises its window to the front. Other provided functions are unrelated to this requirement.",
        "url": "7b52bc293ffd1b3acabf6268fe94a913"
    },
    {
        "nl_input": "The query requires a function to draw lines connecting nodes adjusted for screen scaling. It needs to iterate through coordinates, drawing lines between them with specified color and background attributes. The function should handle moving to the first coordinate and then drawing lines to subsequent coordinates, ensuring proper screen adaptation and line properties.",
        "url": "c1c960991a9d910480d00ff6f90db309"
    },
    {
        "nl_input": "The query requires a function to return all callable attributes of an object, excluding those starting with underscores. The most relevant code defines a function that takes one or more objects, iterates through their attributes using `dir()`, filters out private attributes (starting with underscores), checks if the attributes are callable, and returns them as a set. This matches the query's need to identify callable object attributes.",
        "url": "ca8cd1bc1e11c8fd1689d1abe3f6d04b"
    },
    {
        "nl_input": "The query requires a function to check if a string is enclosed in quotes. It should take a string as input and return True if the string starts and ends with the same quote character (from a predefined set of quotes). The function must ensure the string length is greater than one and verify the presence of matching quotes at both ends.",
        "url": "cfbbfbdb5e84890f7b9938a79629e0e2"
    },
    {
        "nl_input": "The query requires a function to move a datetime object by a specified number of years in a given direction. The function should use a delta calculation with relativedelta for year adjustments and call an internal _move_datetime function, ensuring the API remains consistent with other time unit operations while ignoring irrelevant unit handling.",
        "url": "83c7e1fd8666e261b69048f44f984a14"
    },
    {
        "nl_input": "The query requires a function to add execute permission to a specified file. It should take the filename as a parameter and modify the file's permissions to include user execute rights, using os and stat modules to achieve this functionality. The function does not need to return any value explicitly.",
        "url": "5695327040bd9879c8c5374e42e55c3d"
    },
    {
        "nl_input": "The query requires a function to remove a specified element from a list, set, or dictionary. The function should handle each data type appropriately, using the 'remove' method for sets and lists, and 'del' for dictionaries, ensuring the element is removed only once. The provided code examples demonstrate this functionality.",
        "url": "0a08a131b7f20c6ae80cbd8db43c9210"
    },
    {
        "nl_input": "The query requires a function to check if all elements in a given sequence evaluate to True. The most relevant code demonstrates a solution using a reduce function with a lambda to logically 'and' all elements, returning True only if every element satisfies the boolean evaluation as True. This approach ensures the entire sequence meets the truth condition.",
        "url": "f1fa86112e0e73f4f4a31cbe14f04a6b"
    },
    {
        "nl_input": "The query requires a function to determine the first Sunday of a given month and year. It calculates the date by identifying the day of the week for the first day of the month and adjusting forward to the nearest Sunday. The result should return the specific date of the first Sunday in the desired format.",
        "url": "49aefd290af2372c6b5eb570281c6ce8"
    },
    {
        "nl_input": "The query requires a function to add an argument variable as one of the input variables. The desired function should take the variable as input, verify its type, and append it to a list of input variables within a class structure, ensuring proper management of input variables for further processing or computation.",
        "url": "26565a67fd195231572afee1165f9826"
    },
    {
        "nl_input": "The query requires a wrapper for iterating through a numpy array. The solution should involve creating a function that uses `np.nditer` to iterate over the array elements, ensuring references are handled correctly, and yielding non-None items during iteration. This allows for efficient element-wise access in the numpy array.",
        "url": "84b81599f848ba0a0de34034369ecd66"
    },
    {
        "nl_input": "The query requires a function to split a string *s* into a list of substrings, each with a maximum length of *length*. The provided code examples demonstrate splitting logic using list comprehensions and slicing. The requirement is to implement or extract a function that divides the input string into chunks of specified length, returning a list of these substrings.",
        "url": "fe1575ac247db28014a9b3ed32f060c3"
    },
    {
        "nl_input": "The query requires a function that takes a date object as input and returns the first day of the corresponding month. The function should ensure the returned value is set to the first day, regardless of the original date's day. It may involve replacing the day attribute with '1' while preserving the year and month information.",
        "url": "74483d2e3e4816f59f302670fc2add82"
    },
    {
        "nl_input": "The query requires a function to convert a string representing a float into an actual float value, while handling potential exceptions like non-numeric strings or special cases such as \"inf\". It should attempt conversion to float if the string represents a valid float and return the original object if conversion is not possible.",
        "url": "cf2e8a81dd31fa2f9c43e976123e281e"
    },
    {
        "nl_input": "The query requires a Pyglet-specific key press callback function that translates and forwards events to the `keyboard_event` function. It should handle key press actions and modifiers, as demonstrated in the provided code snippets. The solution must ensure proper event translation and action mapping for key presses within the Pyglet framework.",
        "url": "b9f179a182e7f371684191f4d2a4434d"
    },
    {
        "nl_input": "The query requires a function to convert a numpy array of 0s and 1s into a string representation. The function should handle the array's shape and data type, providing a concise string output that includes the array's content, dtype, and dimensions. The result must be a readable string format suitable for displaying small arrays effectively.",
        "url": "59ba4239d919130c70a0976daa47eb7d"
    },
    {
        "nl_input": "The query requires a function to determine if a given value is a string type, compatible with both Python 2 and 3. It should handle differences in string types between versions, using `basestring` for Python 2 and `str`/`bytes` for Python 3, ensuring proper type checking.",
        "url": "66bffc09e421f8b89cbcc1bc10580629"
    },
    {
        "nl_input": "The query requires a function to normalize a timestamp from an arbitrary timezone to a UTC-naive datetime object. This involves removing any timezone information while adjusting the time based on its UTC offset, resulting in a naive datetime object that represents the equivalent time in UTC.",
        "url": "6ca260fb0f4204fff966670dd6b53076"
    },
    {
        "nl_input": "The query requires a function to combine data and a FITS header, then write them into a FITS file. The provided code examples demonstrate creating a PrimaryHDU with data, updating its header, adding it to an HDUList, and writing the list to a file with overwrite capability. Logging the operation is also included.",
        "url": "48ad11d2bff0c767854ed2802f661500"
    },
    {
        "nl_input": "The query requires a function to print a dictionary tree in a JSON-like format with sorted keys. The desired output should be indented for readability, using a specific format with commas and colons as separators. Among the provided code snippets, the focus is on achieving this JSON-like representation of dictionaries, ensuring clarity and proper structure.",
        "url": "bbb8c24e82437ea03fccdc924a99d399"
    },
    {
        "nl_input": "The query requires a function to remove empty utterances from a list, ensuring only non-empty text entries remain. It processes a list of utterance objects, checking if the 'text' attribute is non-empty after stripping whitespace, and returns a filtered list excluding any empty texts.",
        "url": "5ca8d1be36d4955478ff4ef72fbc653a"
    },
    {
        "nl_input": "The query seeks to determine whether the handler utilizes `sys.stdout`. The focus is on a method that checks if a stream is associated with `sys.stdout`, considering special cases like an AnsiToWin32 object on Windows. The requirement involves evaluating the stream's relationship with `sys.stdout` directly or indirectly.",
        "url": "2d584925f28ca1a569c556b3cb0b23bb"
    },
    {
        "nl_input": "The query requires a function to check if a file-like object is readable by attempting to read a specified number of bytes and resetting the file pointer. It ensures the file supports reading operations without permanently altering its position, focusing on verifying readability rather than modifying file permissions or checking file existence.",
        "url": "ff74b00f4c8a98fb9cf3a85ef310f5bc"
    },
    {
        "nl_input": "The query requires a function to retrieve the modified time of the RPM Database. It needs to check if the database path exists and return the modification time in seconds, defaulting to 0 if the path does not exist. The solution should use file system operations to achieve this functionality efficiently.",
        "url": "6f2c6c2911c241095457edad8d4f610c"
    },
    {
        "nl_input": "The query requires a Python function that serves as an alternative to the built-in `map()` function, capable of applying a given function to each item in an iterable and returning a new iterable with the results. The provided code demonstrates a custom implementation achieving this functionality, allowing additional arguments for the applied function.",
        "url": "a7edaf5497f4d1c28abc87eedd67ec8f"
    },
    {
        "nl_input": "The query requires implementing a Short-Time Fourier Transform (STFT) for real data while retaining the full FFT block. It needs a function that computes the STFT, preserving the magnitude or complex output of the transform without discarding any frequency components, using real-valued input signals and customizable parameters like FFT length, hop length, and windowing.",
        "url": "dc43a25a987b9cb527a790deaae7be02"
    },
    {
        "nl_input": "The query requires a function to determine if the current system is running on a Debian-like operating system. It should check for specific indicators, such as distribution identifiers or file paths unique to Debian-based systems, and return True if these criteria are met, ensuring accurate detection of Debian-like environments.",
        "url": "05385bcc31475b348629045db7ae74b2"
    },
    {
        "nl_input": "The query requires a function to remove both C-style single-line (//) and multi-line (/* */) comments from code. The provided code examples include functions that handle comment removal or manipulation, focusing on identifying and cleansing lines of code by stripping or substituting comments to achieve the desired output.",
        "url": "6e369a16a8e70d37aa500da1cf9eff39"
    },
    {
        "nl_input": "The query requires a function to set a unique application identifier for Windows, ensuring the application has its own icon on the taskbar. This involves using the `ctypes` library to call the Windows API function `SetCurrentProcessExplicitAppUserModelID` with a specified application ID. The provided code demonstrates how to implement this functionality.",
        "url": "3c6813b3e153505df450e4718d17865b"
    },
    {
        "nl_input": "The query requires a method to clean up nodes in an XML document by removing child nodes that are text nodes with only whitespace. This involves iterating through the child nodes of the document element, checking if they are text nodes containing whitespace, and removing them if the condition is met, ultimately returning the cleaned document.",
        "url": "2c1a6a5126487b41335a09e81eadf164"
    },
    {
        "nl_input": "The query requires a function to count the frequency of each unique item in a list. It needs to iterate through the list, identify unique items, and generate a sorted result of tuples containing each item and its corresponding count. The provided code examples demonstrate different approaches to handling lists and uniqueness but focus on counting unique item occurrences efficiently.",
        "url": "0b667a6f675e931da772a1275fa53ee2"
    },
    {
        "nl_input": "The query requires a function to remove all non-printable characters from a text string. The desired implementation should filter out characters with ASCII values less than 32, ensuring only printable characters remain in the output string. This can be achieved by iterating through the input text and joining characters that meet the printable condition.",
        "url": "0f171b4626d9f0ea2a003661289af42f"
    },
    {
        "nl_input": "The query requires a function to convert XY points from Spherical Mercator (EPSG:900913) to latitude and longitude coordinates in the WGS84 datum. The desired function should take XY inputs, perform necessary transformations using specific formulas, and return the corresponding lat/lon values.",
        "url": "1bc345e3253ff84cfda626f47ab1a8df"
    },
    {
        "nl_input": "The query requires printing the header for a CSV table. The needed function should take an optional header parameter and use the Python CSV module to write the header fields to the standard output. The function 'printheader' in the first code snippet matches this requirement by utilizing the CSV writer to output the specified header.",
        "url": "065a776db0489e0d6071522739dc609d"
    },
    {
        "nl_input": "The query requires calculating the overlap count between the values of two dictionaries. This involves comparing the values (assumed to be sets) of corresponding keys in both dictionaries and counting the number of common elements. The result should be a matrix where each element represents the overlap count between a key in the first dictionary and a key in the second dictionary.",
        "url": "c8478233dae0b972efc02759fdfebc63"
    },
    {
        "nl_input": "The query requires a function to save a value to a session using a specific key. It involves setting a session variable with a given key-value pair, ensuring the session data is appropriately stored for later use. The focus is on directly associating a value with a session key within the session management context.",
        "url": "d8d33578fcd0ad196398b5dd87568b3f"
    },
    {
        "nl_input": "The query requires a function to read input from stdin, specifically checking if both stdin and stdout are ttys. If true, it prints a helpful message indicating reading until an end-of-file signal (Ctrl+D) and then reads the input. The focus is on handling tty conditions and providing user guidance during stdin reading.",
        "url": "e0733d51ee06d0addebb4595beb97e0b"
    },
    {
        "nl_input": "The query requires a function to display the JSON indented representation of a dictionary 'd'. The desired function formats the dictionary into a readable, sorted JSON string with specific indentation and separators. Among the provided code snippets, the focus is on identifying a method that uses JSON serialization with sorting keys and custom formatting for pretty-printing dictionaries.",
        "url": "790cc6142b91109d4d9d5a64f0ec5b3b"
    },
    {
        "nl_input": "The query requires a wrapper for the iter method callback, ensuring the result is always iterable. If the result of the callback is not inherently iterable, it should be converted into a single-element list to maintain consistency. This ensures callbacks uniformly handle iterable results during iteration processes.",
        "url": "a7ae1c18c06bd04b301a3a9dd6511232"
    },
    {
        "nl_input": "The query requires a function to break a list into smaller sublists of a specified size. The provided code includes examples of how to create such a function, either by returning a list of chunks or using a generator to yield chunks. The requirement focuses on implementing a method to divide a list into manageable parts for further processing.",
        "url": "7d97cc48df768552ecb833ac5da561e1"
    },
    {
        "nl_input": "The query requires a function to extract and return all uppercase characters from a given string. The result should only contain the uppercase letters, ignoring any other characters. The first code snippet matches this requirement by iterating through the string and concatenating uppercase characters into a new string.",
        "url": "c7986d1e5882fe056f16ccd5a932d84e"
    },
    {
        "nl_input": "The query requires a function that compiles source code to native Python bytecode, optionally optimizes it, and executes the compiled code, returning the topmost value from the stack. The focus is on compiling and running the program efficiently while handling stack-based operations.",
        "url": "cd6c0b5919ed35ca54f03aed7155d59c"
    },
    {
        "nl_input": "The query requires a function to retrieve a property by its name. The desired function should search through a list of properties and return the one that matches the specified name. If no match is found, it should return None. The function needs to efficiently handle the search process within the given data structure.",
        "url": "6991aa2924b52404ff77faa2b677d3e2"
    },
    {
        "nl_input": "The query seeks a function to determine if an object is iterable like a list but not a string. It requires checking if the object has an \"__iter__\" attribute and ensures it is not a subclass of string or unicode types, effectively distinguishing list-like iterables from string types.",
        "url": "e8d906db3eac56229992dd6701dafd90"
    },
    {
        "nl_input": "The query requires a function to transpose a matrix. The provided code includes a function that iterates through the matrix columns and constructs a new matrix with rows and columns swapped. This function takes a matrix as input and returns its transpose by rearranging elements such that the row index becomes the column index and vice versa.",
        "url": "f72094ee819dfe55ef594b4d29424ad0"
    },
    {
        "nl_input": "The query requires a function to bring a figure window to the front, optionally specifying the figure by its number. The relevant code demonstrates raising a figure window using a given figure identifier, ensuring it is brought into focus. Other provided functions are unrelated to this requirement.",
        "url": "1af4bba3546dc398bb5ed2f79e80596b"
    },
    {
        "nl_input": "The query requires a function to solve matrix equations, allowing for optional adjoint operation on the input matrix 'a' before solving. The solution should use 'np.linalg.solve' with the capability to handle both standard and adjoint matrices, as demonstrated in the reference code. Other provided codes are unrelated to matrix solving operations.",
        "url": "5877389d9eb25b563ada6e2220248ba5"
    },
    {
        "nl_input": "The query requires determining the absolute path to the directory containing the package data. The relevant code defines a function that retrieves the absolute path of the current file and joins it with a \"data\" subdirectory, providing the desired package data directory path. This meets the need for locating the specific data directory within the package structure.",
        "url": "b49f6af022fb00932348cc036f786a2c"
    },
    {
        "nl_input": "The query requires a function to escape a filesystem path for use as a command-line argument. It needs to handle different operating systems, such as replacing special characters in paths for Windows and other systems. The focus is on ensuring the path is properly formatted and safe to use in shell commands by escaping necessary characters.",
        "url": "c717888ec77092e7b6e56415d851e2be"
    },
    {
        "nl_input": "The query requires a function to pretty-print a numpy matrix with specified decimal precision. The desired function iterates through the rounded matrix rows and prints them in a readable format, ensuring neat and organized output presentation for better visualization. It should allow customization of decimal places for floating-point values within the matrix.",
        "url": "144142c4f682e2fc8c47507a12eb8b46"
    },
    {
        "nl_input": "The query requires a function that searches for the first file in a specified path whose name matches a given pattern using `fnmatch.fnmatch`. If no match is found, it should raise an `IndexError`. The function logs a critical message if the file isn't found, indicating the pattern and path details.",
        "url": "4c136dbf27a5d08891bc2d374574506d"
    },
    {
        "nl_input": "The query requires creating a shared memory array with the same shape and data type as a given array, filled with a specified value. The relevant code defines a function that initializes such an array and assigns the value to all its elements, ensuring it matches the input array's characteristics. Other codes are unrelated as they deal with reshaping lists into arrays.",
        "url": "7022cdc7764380a374323ec964b9e1d1"
    },
    {
        "nl_input": "The query requires a function to check if a given value is callable. The extracted information should validate whether the input is callable and return it if true, otherwise raise an error indicating the value is not callable. This involves using Python's `callable()` function for the validation process.",
        "url": "3f6168cffe8cb21984c6a12267502db1"
    },
    {
        "nl_input": "The query requires a function to manually set the default figure size of plots using x-axis size, y-axis size, and aspect ratio as parameters. The function should update the matplotlib rcParams with the specified figsize parameters to adjust the default plot size accordingly. This ensures all subsequent plots use the defined dimensions unless otherwise specified.",
        "url": "cdb682fdaddf92e4c85ac1006ec2f2ac"
    },
    {
        "nl_input": "The query requires a function to truncate a numerical value to a specified number of decimal places without rounding. The desired functionality involves taking a value and the number of decimal places as inputs, then returning the truncated value as output, ensuring precision control by simply cutting off excess digits beyond the defined decimal points.",
        "url": "a9f00f4b4472333451594b653fd3ddf4"
    },
    {
        "nl_input": "The query requires a function to read and return the entire content of a file as a string. It should take the file path as an argument, open the specified file, and return its contents without any modifications or additional processing. The focus is on simplicity and direct retrieval of the file's text data.",
        "url": "3a909aebbf2e4e790a70a9a6a5aeb917"
    },
    {
        "nl_input": "The query requires a function to redraw/update a plot based on new parameter values. Specifically, it needs to adjust plot elements dynamically in response to changes in parameters, ensuring the visualization reflects updated data accurately. This involves iterating through parameters, updating their values, and refreshing specific plot components accordingly.",
        "url": "051279ae1faa9b3e8ad99859217a31a9"
    },
    {
        "nl_input": "The query requires a function to verify if a given string path exists and is a file. It should check the existence of the path and confirm it is a file, providing appropriate feedback or handling if the path does not exist or is invalid. The solution must ensure accurate path validation and type checking.",
        "url": "2eb8c1c213084c2d6663d2798151922e"
    },
    {
        "nl_input": "The query requires a function to generate a random positive integer suitable for a Django PositiveIntegerField. The provided code includes a function that returns a random positive integer using the `anon.faker.positive_integer` method, meeting the query's needs. The other code generates a random string, which is unrelated to the query's requirement.",
        "url": "85d319ea47a8b2db80fd83fa200969b4"
    },
    {
        "nl_input": "The query requires a function to calculate the average price between two asset states using their respective quantities and prices. The relevant code computes the weighted average price by combining the total price of each asset state and dividing it by the sum of their quantities. This satisfies the need for averaging prices based on quantity and price inputs.",
        "url": "6c4b912ed406d1c613c8c86898501f18"
    },
    {
        "nl_input": "The query requires plotting a smoothed histogram using kernel density estimation (KDE). The data is a numpy array, and the plot should optionally include a filled area under the curve, customizable color, and a title. The function should handle list inputs by converting them to numpy arrays and use KDEUnivariate for density estimation.",
        "url": "20d4c9337731d52fe439d7ae337e6913"
    },
    {
        "nl_input": "The query requires a function to replace null values (None or empty strings) in a specified column with NaN. The provided code demonstrates methods to achieve this by identifying null values and substituting them with NaN, ensuring data consistency and readiness for further analysis or processing.",
        "url": "93c0c2ede9a5c8a8b970af18721497ae"
    },
    {
        "nl_input": "The query requires a function to return the current blend mode of a console. Among the provided code snippets, none directly fulfill this requirement, as they relate to background flags, desktop contexts, and terminal size retrieval instead. However, the query's need is to obtain the specific blend mode setting applied to a console instance for rendering purposes.",
        "url": "b58a4d28bb6598443049dbbc4bbf8e92"
    },
    {
        "nl_input": "The query requires a function to calculate bins for a histogram plot (histplot). Specifically, it needs to determine the range of bins based on the minimum and maximum values of a dataset column, ensuring an appropriate number of intervals for data visualization. The result should facilitate accurate and efficient histplot generation with customizable bin counts.",
        "url": "9f884647cf34443dee2bc6ff92f875c3"
    },
    {
        "nl_input": "The query requires a method to determine if two revisions have meaningful changes. The focus is on comparing strings or configurations, ignoring insignificant differences such as whitespace. The solution should involve normalizing inputs and identifying actual discrepancies between the two revisions, potentially using techniques like stripping whitespace, field filtering, or deep comparison with order ignorance.",
        "url": "ffef61824d78a9266d404137a97101b1"
    },
    {
        "nl_input": "The query requires running Python test cases that interact with Java runtime classes. Specifically, it needs a function that sets up an environment with a specified PYTHONPATH, executes Python scripts against Java runtime classes, and logs the execution process. The focus is on integrating Python tests with Java runtime components effectively.",
        "url": "02839b0594938f5a9b149e4eb63f9dcf"
    },
    {
        "nl_input": "The query requires a function to wait until all messages in the send queue are processed, with an optional timeout parameter. The relevant code defines a method that clears and waits for the send queue to be cleared, fulfilling this requirement by managing a queue-cleared signal. Other provided codes are unrelated to the query's need.",
        "url": "09a15b5addf9063f3d0c6597aa38a5d0"
    },
    {
        "nl_input": "The query requires a function to convert a 3x3 skew-symmetric cross-product matrix into its corresponding vector representation. The solution should extract specific elements from the matrix (S[2,1], S[0,2], S[1,0]) to form a 3-element vector, effectively \"desking\" the matrix. This process is limited to 3x3 matrices and assumes the input is already a valid skew-symmetric matrix.",
        "url": "ea96df64c6665e80be6a7d81f07c7a4f"
    },
    {
        "nl_input": "The query requires extracting all href attributes from anchor tags in given HTML markup. The task involves parsing the HTML and collecting URLs linked via anchor elements. Using a library like BeautifulSoup, the solution finds all 'a' tags and retrieves their 'href' values, returning them as a list of strings representing the hyperlinks present in the input markup.",
        "url": "a0295573f1dcf89a25aa9337bd3f9207"
    },
    {
        "nl_input": "The query requires a function to convert a ctypes structure into a dictionary. The needed code should iterate over the fields of the ctypes structure and create a dictionary where each key is a field name, and each value is the corresponding value from the structure. Only the first code snippet matches this requirement by using `getattr` and `_fields_`.",
        "url": "3e40d7e81d715f046db351aee91b0c62"
    },
    {
        "nl_input": "\\033[1;32mThe query requires a function to apply ANSI escape sequences for text coloring in the terminal. It needs to take a color and text as input, then return the formatted string with the specified color code, ensuring proper reset of terminal styling after the text.\\033[0m",
        "url": "361543bea6004540b3a709ec2b6f852f"
    },
    {
        "nl_input": "The query requires a function to reshape a list of lists into the specified shape and data type. It involves converting the input list into a NumPy array with a given dtype and reshaping it according to the desired dimensions. The provided code includes a relevant function, `shape_list`, which performs this operation using NumPy's `array` and `reshape` methods. Other codes are unrelated.",
        "url": "75029e9b5315bf8366b2c9d646b179e4"
    },
    {
        "nl_input": "The query requires a function to print all rows from a given result set. It should iterate through the result and display details such as experiment name, project name, IDs, and group information in a specific format. The focus is on presenting query results clearly, ensuring all rows are printed with relevant data fields included.",
        "url": "3cb2ed3d1f3f748abda37ef3aefc286e"
    },
    {
        "nl_input": "The query requires a function to read lines from a file, remove whitespace, and optionally exclude commented or empty lines. The provided code demonstrates reading a file, handling potential errors, stripping whitespace from each line, and returning the cleaned lines. One variant also filters out lines starting with a comment symbol (#).",
        "url": "4cd26ba017dabe234b6b960e4c174cd7"
    },
    {
        "nl_input": "The query requires a decorator that filters the return value of a function using a specified filtering function. The decorator should take the filtering function as an argument and apply it to the results of the decorated function, ensuring only values passing the filter are returned. This allows for flexible result modification based on the provided filtering logic.",
        "url": "a86e59f13d1de0744181898183974b07"
    },
    {
        "nl_input": "The query requires a function to sort a list into natural alphanumeric order, where numeric parts of strings are considered for numerical comparison rather than lexicographical. The provided code includes a function that generates a sorting key for natural ordering by splitting strings into numeric and non-numeric components, enabling correct sorting of lists with mixed string-integer elements.",
        "url": "e8ba965e00c981d460681f001f1b646b"
    },
    {
        "nl_input": "The query requires a function to generate a unique, random string identifier. It should utilize a combination of uppercase, lowercase letters, and digits or leverage UUID for randomness. The length of the identifier can be configurable, typically around 10\u201315 characters, ensuring uniqueness and suitability for identification purposes.",
        "url": "25a29e374311824cbed549355d28c30b"
    },
    {
        "nl_input": "The query requires a function to convert a list of key-value pairs into a dictionary. The provided code examples demonstrate methods to achieve this, either by directly assigning values to keys or by using `setdefault` to handle potential multiple values per key. The goal is to create a dictionary where each key maps to its corresponding value(s) from the input list.",
        "url": "1b73a949780175c73d5778ca8e2f5b2e"
    },
    {
        "nl_input": "The query requires a function to convert a string, dictionary, or object into a JSON-formatted string. The provided code examples demonstrate methods using libraries like `json`, `simplejson`, and custom utilities to serialize objects while handling specific cases such as NaN values, ASCII encoding, and indentation. The goal is to ensure safe and properly formatted JSON output.",
        "url": "a9048b56499578414cb6dca3141d871d"
    },
    {
        "nl_input": "The query requires a method to convert a pymongo cursor into a JSON object suitable for UI display, ensuring \"_id\" fields are renamed to \"id\" and unnecessary fields are removed. The provided code demonstrates handling BSON encoding and restructuring the cursor data for JSON compatibility. It focuses on transforming database query results into a user-interface-friendly JSON format.",
        "url": "82821e87505d717d99a5a6982e80b533"
    },
    {
        "nl_input": "The query requires a function to write a string to a file. The desired functionality involves opening a file in write mode, writing the specified string to it, and then closing the file to ensure data is saved properly. The function should take a file path and the string to be written as parameters. JSON writing is not relevant to this requirement.",
        "url": "cfe10971d3e9565b10d9a8da615d0b58"
    },
    {
        "nl_input": "The query requires a function to pad a PIL Image with specified parameters. The most relevant code demonstrates padding an image using the function `F.pad` with arguments for padding size, fill color, and padding mode. The requirement is to implement or utilize a method that applies padding to an image according to given specifications.",
        "url": "9a8806be60753c5afc2c2886b26a8147"
    },
    {
        "nl_input": "The query requires a method to close or disconnect from a database connection, ensuring resources are properly released. It involves checking for the existence of a closure method on the database object and executing it, handling exceptions if necessary, and potentially logging the disconnection process. The focus is on cleanly terminating the database session or connection.",
        "url": "01b6ef83cb7b0e20fe4063575ba37afc"
    },
    {
        "nl_input": "The query requires a function to determine if an object was created today by comparing its date attribute to the current date. The function should return True if the dates match and False otherwise, focusing solely on the date portion and not the time.",
        "url": "5e650f644d8fd521a2fb566997bac200"
    },
    {
        "nl_input": "The query requires a function to clean up whitespace in column names. It seeks a method that adjusts column names by removing or replacing whitespace, potentially converting them to a more uniform format such as lowercase with underscores. The ideal solution should effectively handle string manipulations for column names in data structures like DataFrames.",
        "url": "30bf76a15a72979f26c21ec5492d7e9e"
    },
    {
        "nl_input": "The query requires initiating a Pdb debugging instance at the caller's frame, ensuring stdout is directed to sys.__stdout__. This allows debugging with proper output routing, bypassing any redirections. The provided code examples include a function to set a trace with desired stdout handling and another for temporarily redirecting stdout.",
        "url": "0a05a5da32b1fb72cca49d13dc8e3410"
    },
    {
        "nl_input": "The query requires a function to serialize and save a Python variable to a specified file path using the Pickle library. The function should accept the variable to be saved and the output file path as arguments, utilizing Pickle's serialization capabilities to store the variable in binary format. The provided code examples demonstrate saving with different argument names and protocols.",
        "url": "c2a530e3185141f26984493fe461a1e4"
    },
    {
        "nl_input": "The query requires a function to stop an ongoing process or computation. It should handle interruptions, disable interaction if necessary, and ensure proper termination of the operation, potentially involving threads or kernels. The implementation must be robust to avoid conflicts during the stopping procedure.",
        "url": "ffe1a2a9c49e02611417c3d70568ca6c"
    },
    {
        "nl_input": "The query requires a function to filter dictionary items based on a condition, where the filtering function (f) has the signature f :: key -> value -> bool. The function should iterate over the dictionary's key-value pairs and retain only those for which f(key, value) evaluates to True. The provided code snippets offer examples of implementing such filtering logic.",
        "url": "f241dcba436401f13b432446f7acf74c"
    },
    {
        "nl_input": "The query requires a function to determine if a given type is an enum type. The desired function should check whether the provided type is an instance of a specific class and a subclass of tuple containing enum types. It focuses on identifying enum types directly, ensuring compatibility with predefined enum categories.",
        "url": "8f828b31221d8d3d250582d6e33119d8"
    },
    {
        "nl_input": "The query requires a function to serialize a protobuf object into JSON format. It should take the protobuf object as input and optionally allow customization of JSON output, such as indentation. The function must convert the protobuf message into a dictionary and then encode it as a JSON string for further usage or storage.",
        "url": "ae464d2f99fa7222e80bee299a792d9f"
    },
    {
        "nl_input": "The query requires a function to retrieve a specific key's value from a request object. The desired function should accept a request and a key as parameters, then return the corresponding value associated with the key in the request's headers. If the key is not found, it should handle this gracefully, potentially returning None or a default value.",
        "url": "b20b2cbf97fe0d5450903f1b53292657"
    },
    {
        "nl_input": "The query requires a function to convert JSON number strings into appropriate Python numeric objects (int, float, etc.). It should handle various cases, including negative numbers, floating-point values, and potential edge cases like 'nan' or 'inf'. The solution must accurately determine the suitable type for the given string representation while maintaining compatibility with JSON standards.",
        "url": "e7bad2f188ea39babea17d023e47e629"
    },
    {
        "nl_input": "The query requires conforming a pandas Series to a new index with optional filling logic. This involves reindexing the Series to align with a new set of labels, potentially using filling mechanisms to handle missing data. The focus is on adjusting the Series index while applying appropriate strategies for filling or managing unmatched entries.",
        "url": "feb258741d3bed95c3717ef0f1fccc39"
    },
    {
        "nl_input": "The query requires a function to print a colored string to a specified target handle, allowing customization of foreground and background colors, with an optional ending character. The function should also reset color settings after printing and ensure compatibility with Python 3.x by flushing the output buffer.",
        "url": "5e7880a46ffa2a7b19d6212e49eb068b"
    },
    {
        "nl_input": "The query requires a function to return a vector with its elements rounded to a specified number of digits. The function should take the vector and the number of digits as inputs, perform rounding, and return the modified vector without altering the original data.",
        "url": "ce214949d37d2602b1bae63f9c7323a2"
    },
    {
        "nl_input": "The query requires a function to fill an array with a compatible fill_value, given the array's data type. The function checks compatibility between the fill_value and array, then fills the array if compatible. It ensures the fill operation is performed only when the fill_value aligns with the array's dtype, preserving data integrity during the process.",
        "url": "f62e3c00eea2ee9dfa9d98e0e1e50c53"
    },
    {
        "nl_input": "The query requires an error handling mechanism to manage exceptions, log details, and possibly terminate the program. It needs functionality to identify specific error types, output error messages to stderr, and optionally write logs. Additionally, it may involve handling non-OK status responses and providing clear error descriptions for better debugging.",
        "url": "82b961ae1166cc5272220f0ff3a4e2f0"
    },
    {
        "nl_input": "The query requires a function to check if a given value is callable. The desired functionality involves validating the input and ensuring it is callable, raising an error if it is not. The implementation should return the callable value if the check passes.",
        "url": "3f6168cffe8cb21984c6a12267502db1"
    },
    {
        "nl_input": "The query requires a function to pretty print an object's representation, allowing customization through parameters like verbosity, maximum line width, and newline characters. It should format the output for better readability, potentially using streams and printers for object representation or leveraging JSON formatting with sorted keys, indentation, and specific separators.",
        "url": "c8a5512cc83335ec25437a84dcfb884a"
    },
    {
        "nl_input": "The query requires a function to convert CamelCase strings to lowercase strings with underscores. It needs to identify transitions between lowercase to uppercase letters and insert underscores accordingly, finally converting the entire string to lowercase. The provided code examples include relevant regex patterns for this transformation.",
        "url": "4af2cb83cba01f1a2877affc9f9af1fd"
    },
    {
        "nl_input": "The query requires a function to check if a given string is a palindrome, considering both strict and non-strict modes. In strict mode, the string should exactly match its reverse. In non-strict mode, it should ignore spaces and possibly other delimiters, using a regular expression for cleaning the string before checking. The function should handle full strings properly.",
        "url": "0a8601aa40e8e29e9a34b4bfee20bdb0"
    },
    {
        "nl_input": "The query requires a function to convert a string from snake_case to CamelCase. It should split the string by underscores, capitalize the first letter of each fragment except the first one, and concatenate them without separators. The provided code examples demonstrate different implementations of this conversion logic.",
        "url": "96f5c07d79e853ad64b6e045f2ea2e3b"
    },
    {
        "nl_input": "The query requires a method to convert keyword arguments (kwargs) into object properties, using a provided name attribute to assign values from kwargs to corresponding properties. The focus is on identifying and utilizing a function that processes kwargs and maps them to properties within an object or class structure.",
        "url": "0a32a04e8445904777f8caeebdb8fffd"
    },
    {
        "nl_input": "The query requires a context manager that temporarily disables certificate validation in Python's SSL library. It should store the current SSL context, replace it with an unverified context, and restore the original context after execution, ensuring secure connections are re-enabled afterward. The solution must use a try-finally block to guarantee the original context is reinstated.",
        "url": "e8d31bf9064cd469a1dc39294f7fe457"
    },
    {
        "nl_input": "The query requires a function to determine the number of bytes needed to represent a given data type (dtype). The focus is on extracting the relevant logic that calculates the byte size of the dtype, either through TensorFlow's `tf.as_dtype` or NumPy's `np.dtype`. The result should return the itemsize of the specified dtype.",
        "url": "991303bd65d07a7092b5456f65501117"
    },
    {
        "nl_input": "The query requires a function to extract the hostname from a given URL. It should take a URL as input and return the hostname by parsing the netloc component, removing any port information, and handling cases where the netloc is empty. The provided code examples demonstrate this functionality using Python's `urllib.parse` module.",
        "url": "13343f8f3c5515600e035d8cca7abd84"
    },
    {
        "nl_input": "The query requires a function to remove duplicates from a list while preserving the original order of elements, assuming hashable entries. The provided code examples demonstrate methods to achieve this by using a set to track seen elements and list comprehensions to construct a new list with duplicates removed, ensuring the original order is maintained.",
        "url": "6156271232598d8b1fcc3d17b7f70287"
    },
    {
        "nl_input": "The query requires a function to retrieve a value associated with a key from different object types, supporting nested keys and providing a default value if the key is missing. The desired function should handle integer keys and dotted string keys for accessing nested structures while allowing fallback to a default value when necessary.",
        "url": "b6bb535456a96c9b909bb499e8a0d64f"
    },
    {
        "nl_input": "The query requires a function to write a string to stdout with optional parameters for formatting and flushing. The provided code examples demonstrate writing strings to stdout, with one example including color management and another focusing on raw output, ensuring the output is flushed immediately after writing.",
        "url": "130fea41886bd6573c8f66d1d1b1cc62"
    },
    {
        "nl_input": "The query requires a function to get the RAM memory usage. It needs to calculate the memory consumed by a process in megabytes using the psutil library. The most relevant code retrieves the Resident Set Size (RSS) memory usage of the current process and returns it in MBs. Other codes are unrelated as they focus on memory differences or byte reading.",
        "url": "36e35aabc8ba46fc2ddb8e9843fbb19f"
    },
    {
        "nl_input": "The query requires a function to determine if a given value is a finite number. It should return true for finite numbers, handling both integers and finite floating-point values appropriately, ensuring non-finite values like infinity or NaN are excluded. The solution must accurately distinguish finite numeric types from others.",
        "url": "20a9dee3715bfda8b9951585455866ce"
    },
    {
        "nl_input": "The query requires a function to retrieve the column mapped by a given database field name. It should search for the column using a mapping between database field names and actual column names, returning the corresponding column object if found. This involves looking up the provided name in a mapping dictionary and using it to fetch the correct column from a collection of columns.",
        "url": "09fe8b23516543ed7b0beb4c00c2c151"
    },
    {
        "nl_input": "The query requires a function to downsample an array (x) by a specified factor using striding. The relevant code achieves this by utilizing numpy's slicing with strides, allowing efficient downsampling based on the provided factor. Other codes are unrelated as they focus on image blurring and skew correction instead of downsampling through striding.",
        "url": "4a46bee21402859242a82bb3267915e7"
    },
    {
        "nl_input": "The query requires a method to clean up or delete a session or connection if it was created within the code. This involves checking for the existence of a session or connection, then properly closing or deleting it to ensure resources are released. The focus is on cleanup logic to maintain code efficiency and prevent resource leaks.",
        "url": "a8a603e0ae848a1659ac97bbf97c393d"
    },
    {
        "nl_input": "The query requires a function to remove spaces from a given input. The desired functionality includes stripping spaces and tabs, potentially using replacement methods or regular expressions, and returning the modified string without unnecessary whitespace characters. The focus is on effectively cleaning the input by removing or replacing space-related characters.",
        "url": "5c2cb0d747482f06316ecf2034c1b403"
    },
    {
        "nl_input": "The query requires a function to find the index of the last occurrence of an element 'x' in a sequence. The provided code examples demonstrate methods to calculate this by reversing the sequence and finding the first occurrence, then adjusting the index accordingly. The requirement is to implement or utilize such functionality for the given task.",
        "url": "f0181095e2b214bca904dedc120dac57"
    },
    {
        "nl_input": "The query requires a function to pad a given text with specified spacing. The padding involves adding a defined number of newline characters and spaces around the text, ensuring consistent spacing on all sides. The implementation should use predefined padding values and account for both vertical (top/bottom) and horizontal (left/right) padding. The result is a uniformly padded text output.",
        "url": "2182fa769b2e6aebf55d8607b1aeae43"
    },
    {
        "nl_input": "The query requires a function to remove punctuation from a given string while allowing for exceptions to be specified The function should use a pattern that excludes punctuation marks and preserves words spaces and any additional exceptions provided in the input The result is a cleaned string without unwanted punctuation",
        "url": "05d248c97e02432ffcafa5fc4d135e4c"
    },
    {
        "nl_input": "The query requires a function to create a unit ball using L2 norm constraints, as indicated by the relevant code defining `unit_ball_L2` with shape parameter and utilizing `constrain_L2`. The focus is on generating a tensor variable initialized to zero and applying L2 normalization. Other provided codes are unrelated to this requirement.",
        "url": "af7417dd34ffedc528d5b41aa79a25a3"
    },
    {
        "nl_input": "The query requires a function to convert a given value into a JSON-compatible representation. It should handle different data types, ensuring the output is properly formatted and encoded, potentially including serialization of complex objects or byte data, with optional formatting parameters like indentation for readability.",
        "url": "ccb63a861341c1600c1672d2347c2a48"
    },
    {
        "nl_input": "The query requires a function to discover the current time zone and its standard string representation. The desired output is a tuple containing the timezone object and its formatted string (e.g., \"+02:00\"). The relevant code should use the current datetime, convert it to the local timezone, and format the offset with a colon separator. Other codes focus on parsing or formatting dates and are not related to the query's needs.",
        "url": "9a9656208511dc76df08f3417ff13f0b"
    },
    {
        "nl_input": "The query requires a function to strip whitespace from string columns in a table. It should identify string-type columns and remove leading/trailing spaces using an efficient method. The provided code examples demonstrate different approaches, but the requirement focuses on processing string columns specifically, ensuring cleanliness of data by eliminating unnecessary whitespace.",
        "url": "c614fa426ccf3da4b2087a058e08c051"
    },
    {
        "nl_input": "The query requires a function to check if all elements in 'x' belong to any of the specified 'types'. The needed function flattens 'x' and verifies each element against the provided types, ensuring they match at least one. The most relevant code implements this logic using numpy's ravel for flattening and nested comprehensions for type checking.",
        "url": "5ab579ff3b2ee7681b98e2869ba83148"
    },
    {
        "nl_input": "The query requires a function to check if a specific element, identified by its selector, exists on a web page. The most relevant code defines a function that takes a driver, selector, and optional by-parameter (defaulting to CSS_SELECTOR), attempts to find the element, and returns True if present, otherwise False. It handles exceptions to ensure robustness.",
        "url": "9d5df68fdf38594b8242be10f8ee487c"
    },
    {
        "nl_input": "The query requires a function to retrieve all column names and their corresponding data types as a list of tuples. The desired output format is a list where each element contains a column name and its data type, extracted from the schema fields or table information. This functionality should work with database tables or structured data schemas.",
        "url": "1001aab66e7872b45d9825d901ea4412"
    },
    {
        "nl_input": "The query requires a function to check if a given object, l, is a one-dimensional numpy array consisting of integers. The function should confirm the object's type as a numpy ndarray, ensure it has only one dimension, and verify that its data type is either integer ('i') or unsigned integer ('u').",
        "url": "4c44318e0564a3746341c25cb08796fb"
    },
    {
        "nl_input": "The query requires creating a \"run.log\" file within a specified folder, containing the timestamp of the latest successful run in UTC format (YYYY-MM-DD HH:MM:SS). The function should write this timestamp to the log file, ensuring it documents when the latest successful execution occurred.",
        "url": "8595eb12cbc332479f76bff0d5054589"
    },
    {
        "nl_input": "The query requires extracting a value named \"key\" from the headers. The relevant code demonstrates a function that takes a request object and a key name as input, retrieves the value associated with the key from the request headers, and returns it after converting to a native format. This matches the requirement to read a specific key from headers.",
        "url": "d0f81def36969915a8a8466379b2a7ab"
    },
    {
        "nl_input": "The query requires extracting a specific value from a cookie jar. The needed function should access the cookies stored in a request object and retrieve the value associated with a given name and field. This involves using a method that can handle cookie data, such as parsing or converting the cookie jar into a usable format for value extraction.",
        "url": "7c99a79a7ad75ac06ade2a1e106df71a"
    },
    {
        "nl_input": "The query requires a function to prettify SQL statements by splitting them into a list of lines, making it easier to compare differences between two SQL statements. The function should handle line breaks and commas to format the SQL neatly for better readability and diff utility.",
        "url": "457aff9c7058c3ba33b7ae0d5386ee0f"
    },
    {
        "nl_input": "The query requires a function to parse a string into an integer with error handling. It should safely convert strings to integers, encapsulating exceptions or invalid input scenarios to ensure robustness. The ideal solution will handle non-integer strings gracefully and return appropriate results or errors without crashing.",
        "url": "c69e122da2d2e1d72e89cfa0116a4f34"
    },
    {
        "nl_input": "The query requires a function that compiles source code to native Python bytecode, optionally optimizes it, and executes the compiled code, returning the topmost value from the stack. The focus is on compiling and running the program efficiently while handling stack operations.",
        "url": "cd6c0b5919ed35ca54f03aed7155d59c"
    },
    {
        "nl_input": "The query requires a function to set an integer value into a bytearray at a specified index using two bytes. The function should ensure the input is an integer, convert it to bytes using big-endian format, and update the bytearray accordingly. It involves byte manipulation and struct packing for efficient conversion.",
        "url": "6fec9d169b0a9416a97ce4a338dd32d8"
    },
    {
        "nl_input": "The query requires adding an object to JavaScript in a Python environment. Specifically, it needs a method to integrate a variable into the JavaScript context of a web page or frame, allowing interaction between Python and JavaScript. The solution should involve using a function that adds the object to the JavaScript window.",
        "url": "3502745173b0a9b89ae0a7f4243ce2a3"
    },
    {
        "nl_input": "The query requires creating a list of items separated by specified separators. The function should handle converting items to strings and joining them with a given separator, optionally suppressing trailing separators. It aims for a concise output where items are combined into a single string representation, allowing customization of the separator used.",
        "url": "4d487dd5451d858ae1df55545338d20c"
    },
    {
        "nl_input": "The query requires a utility function to create a regular expression that matches escaped separators within strings. The function should take a separator as input and generate a regex pattern capable of identifying sequences where the separator is escaped, allowing for proper parsing or manipulation of strings containing such patterns.",
        "url": "c293149f21c05346b0edfd6e017c0a32"
    },
    {
        "nl_input": "The query requires a wrapper to return a named API method. The solution involves dynamically generating a method call using the provided name, appending it to an API prefix, and utilizing functools.partial to bind arguments. This allows for flexible API method invocation without explicitly defining each method.",
        "url": "941e68a199cee63e302662e2ce8fe281"
    },
    {
        "nl_input": "The query requires a function to convert a comma-delimited string into a list of strings. The provided code includes a function named `comma_delimited_to_list` that checks if the input is a string and splits it by commas, returning a list of strings. If the input is already a list, it returns it as is; otherwise, it returns an empty list.",
        "url": "bef112878733e2d59a2929a7920b88a7"
    },
    {
        "nl_input": "The query requires a function to restore settings to their default values. Specifically, it involves resetting global variables such as CACHE_DIR, SET_SEED, and SEED to the original default settings and logging a confirmation message. The function should ensure all settings are reverted accurately without analyzing individual code snippets.",
        "url": "3ba6b208b4ed697b5fe003d50b17d99c"
    },
    {
        "nl_input": "The query requires a function to find the parent folder of a given file. It needs to extract the directory name one level above the file's location in the path hierarchy. The solution should handle absolute paths and ensure compatibility with different file structures, returning the parent folder name as a result.",
        "url": "b020996768e441735bad95910a16907e"
    },
    {
        "nl_input": "The query requires a function to remove newlines and multiple spaces from a string. It should clean up unnecessary whitespace, including spaces and tabs, potentially using replacement or regular expressions to ensure the string is concise without altering its meaningful content. The solution must handle byte strings and return the cleaned string efficiently.",
        "url": "ffaf50749737d70a6ecb6ce9b0f9ac24"
    },
    {
        "nl_input": "The query requires computing the average gradient norm of an image. This involves calculating the gradient of the image data, squaring it, and then averaging the result to obtain the norm. The most relevant code provided defines a function that computes the average of squared gradients, which aligns with the query's requirement for average gradient norm computation.",
        "url": "11dee73808ab5dea87b4d7e3fe459006"
    },
    {
        "nl_input": "(0 2) The query requires a function to return the start and end indices of an item based on its given index. It should calculate the start index considering the previous index and determine the end index from the current index in a predefined index list.",
        "url": "82969a6dbd0cf5948252addf78f02f52"
    },
    {
        "nl_input": "The query requires a function to join elements of an iterable into a string, separated by commas, converting each element to a text type. The provided code demonstrates a function that achieves this by using a generator expression to convert each item in the iterable to a text type and then joining them with a comma separator. Only relevant code for joining with commas should be considered.",
        "url": "d5cd6bdee354cd4c13e1317060fe6702"
    },
    {
        "nl_input": "The query requires a function to generate an adjacency matrix from edges. It needs to initialize a zero matrix with dimensions based on the number of edges, then populate it by setting symmetric entries to 1 for each edge's connections. Finally, it should return the resulting adjacency matrix.",
        "url": "77ba8682acb16363f35ee39438c5c00b"
    },
    {
        "nl_input": "The query requires a helper function for constructing left and right column lists used in join operations. It should iterate through a given 'by_entry' list, appending string elements to both lists or specific indices to each list respectively, and finally return the two lists for join functionality.",
        "url": "b43d396e0c2cb764c7a3923e30cee800"
    },
    {
        "nl_input": "The query requires a function that raises a `requests.exceptions.HTTPError` when the HTTP response status code is not 200. It should check the response status and throw an exception with a message including the status code and URL if the status is non-200, ensuring proper error handling for HTTP requests.",
        "url": "0c0e2e21a0ef56f98b03f742885dd7b1"
    },
    {
        "nl_input": "The query requires a function to convert a dictionary into YAML format output. The most suitable code demonstrates converting an ordered dictionary into YAML using `ordered_dump` with safe dumper and disabling default flow style. The result should produce YAML output from the given dictionary while preserving its structure and order.",
        "url": "3e751fb619760a9827d1958fe4a20f42"
    },
    {
        "nl_input": "The query requires a function to remove stopwords from a given list of words. It should iterate through the list, check if each word is not in a predefined stopwords list (case-insensitive), and return a new list excluding those stopwords. The provided code demonstrates this functionality by filtering out unwanted stopwords effectively.",
        "url": "6ce9ae857507f7292c65caae0d829141"
    },
    {
        "nl_input": "The query requires a function to return unique rows from a given array or list. The implementation should efficiently identify and remove duplicate rows, ensuring each row in the output is distinct. The provided code examples demonstrate different approaches to achieve this functionality using either numpy for arrays or iterative methods for lists.",
        "url": "5585a4d97c570d3a3d4ee8539bdc383c"
    },
    {
        "nl_input": "The query seeks to determine the possible range for the minimum function, specifically focusing on identifying the lowest values within given intervals or segments. The requirement involves calculating minimum values across multiple inputs, potentially represented as intervals or arrays, and determining their respective ranges or positions. This may include segment-wise or interval-based minimum computations.",
        "url": "e7a213e5ce364fbbb4eebdb777dcae72"
    },
    {
        "nl_input": "The query requires a function to check if a list contains elements of a specified type (vtype) or None. The desired function should return True if the list meets this condition, ensuring all elements are either of type vtype or None, and at least one element is of type vtype. This ensures the list is nullable with respect to the given type.",
        "url": "9f1568e9761dff31a32f5c4b9e8edd9a"
    },
    {
        "nl_input": "The query requires identifying the code that retrieves the currently active window. The focus is on a method or function capable of determining which window is currently active, potentially initializing it if not already set. This involves checking for an existing active window and defaulting to a predefined one if necessary.",
        "url": "dde85ac504b2390acdd3091d4eb9bcae"
    },
    {
        "nl_input": "The query requires a function to generate a formatted table displaying port results with columns for Name, Port, Protocol, and Description. The table should align text appropriately, add padding, and populate rows using the provided port data for clear presentation.",
        "url": "f97eba655064cbbbe5fab244004635ad"
    },
    {
        "nl_input": "The query requires a method to determine if a request was made to a Flask endpoint, considering error handling and endpoint ownership. It involves checking for specific error codes (e.g., 404, 405) and verifying whether the Flask Request Router dispatched the route by examining the `request.url_rule` and endpoint association.",
        "url": "1f9a6c557386541c8bf3018a1e3947c6"
    },
    {
        "nl_input": "The query requires a function that waits for a keyboard event and returns the event's name or, if unavailable, its scan code. It should handle key press or release events and potentially suppress event propagation. The focus is on capturing keyboard input and providing relevant event details like name or scan code.",
        "url": "fffa142ba9856c6a86224d3d99407a7d"
    },
    {
        "nl_input": "The query requires a function to determine if a given object or string can be considered an integer. The function should handle different types, such as integers, strings that represent integers, and potentially account for Python version differences. It should return a boolean value indicating whether the input is an integer or can be converted to one without loss of information.",
        "url": "2832fbd8beeec023e6e6ef3e6b82340c"
    },
    {
        "nl_input": "The query requires a function to convert strings from CamelCase format to snake_case format. The function should identify capital letters as word boundaries and insert underscores before them, then convert the entire string to lowercase. Among the provided code snippets, the relevant ones perform this transformation using regular expressions.",
        "url": "6c93672cda684ac1a95b2d799714bebf"
    },
    {
        "nl_input": "The query requires a function to convert various data types into a bytearray in Python. The provided code examples demonstrate converting integers, strings, and other types into bytearrays, with specific encoding considerations. The requirement is to handle different input types and ensure proper conversion to bytearray using appropriate encoding like 'latin-1' or handling specific cases such as UTF-8 decoding.",
        "url": "c5046e85180e9f65f88280117dffd4cf"
    },
    {
        "nl_input": "The query requires a function to remove comments from lines of code while preserving the actual code content. It should handle different types of comment indicators, such as \"#\" for Python or \"//\" for C-like languages, and ensure that only the comment portion is stripped, leaving the rest of the line intact. The solution must support cleansing lines from specific comment patterns effectively.",
        "url": "ca1be3d31ee8cf3523dfc4b4d395589e"
    },
    {
        "nl_input": "The query requires a function to print a message with emphasis, using a predefined format that includes a timestamp and specific color codes. The function should flush the output to ensure immediate printing. The focus is on creating a highlighted, time-stamped message for user feedback or logging purposes.",
        "url": "e2aa9367d8be0f1d00d8b3baa409dd7a"
    },
    {
        "nl_input": "The query requires a function to check if a given float can be converted to an integer without changing its value, ensuring compatibility when both values are equal. It needs a safe conversion mechanism that verifies whether the float is essentially an integer in numeric value before casting, avoiding improper type conversions.",
        "url": "dd11b3695df51c0247478c289387f290"
    },
    {
        "nl_input": "The query requires a function to toggle pause mode, enabling or disabling playback. The relevant code defines a method that switches the playback state and calls a toggle_pause function on a music object, effectively pausing or resuming playback based on the current state of the controller's playing attribute. This meets the requirement to control pause functionality.",
        "url": "fd17bc7997ec03214258fa4bd8501d56"
    },
    {
        "nl_input": "The query requires a function to convert markdown content into plain text by first transforming the markdown into HTML and then extracting the text from it. The provided code includes a relevant function, `md_to_text`, which performs this conversion using a markdown parser and an HTML-to-text utility. Other code is unrelated to markdown conversion.",
        "url": "a98a0d961b4a5dfb134ed7d96517dc6a"
    },
    {
        "nl_input": "The query requires a function to execute a bash script located in the local directory. The provided code includes a relevant function that uses `subprocess.call` to run a bash script by accepting the script's filename as an argument, flushing stdout beforehand to ensure proper output ordering. Other codes are unrelated to running bash scripts.",
        "url": "d1387105e649f48d23a75e735be58fdf"
    },
    {
        "nl_input": "The query requires a function to remove newlines and multiple spaces from a string. It needs to handle whitespace characters, such as spaces and tabs, and ensure that the resulting string contains neither leading/trailing spaces nor consecutive internal spaces. The solution should efficiently clean the input string for a more uniform output.",
        "url": "ffaf50749737d70a6ecb6ce9b0f9ac24"
    },
    {
        "nl_input": "The query requires a function to retrieve an object if its child has already been read; otherwise, it should retrieve the child. The provided code snippets include logic for accessing objects or children based on certain conditions, handling attribute reading, and retrieving values using keys. The focus is on implementing conditional retrieval with consideration for prior access or existence.",
        "url": "a0eea2c799b9e9787443166f8163bbac"
    },
    {
        "nl_input": "The query requires a PyQt-specific key release callback function that translates and forwards events to the `keyboard_event` function. It should capture the key release event, identify the key involved, and pass it along with an action type indicating release and no modifiers to the designated handling function.",
        "url": "0dedd93aa4ea060e3981a64d1946e3b8"
    },
    {
        "nl_input": "The query requires a function to modify a file by inserting a new line at the beginning. The function should open the specified file, read its contents, prepend the given line, and write the updated content back to the file while ensuring data consistency and proper file handling.",
        "url": "9c5ed7678eec60027b77c36e9f85ed9f"
    },
    {
        "nl_input": "The query requires a function to check if a specific process is running by using the Unix 'ps' command. It needs to take a process ID as input, utilize subprocess to execute the 'ps' command, and verify the existence of the process ID in the output lines. The result should return True if the process is found, otherwise False.",
        "url": "08c543187101769aa1d6bf51dce8be2e"
    },
    {
        "nl_input": "The query requires a function to recursively delete a directory and all its contents. It should traverse the directory structure, removing all files and subdirectories, and finally delete the main directory itself. The provided code examples demonstrate methods for deleting files and directories, with one specifically showing recursive directory deletion.",
        "url": "0d26e92ada91f0c98d4a321d3bcc7a28"
    },
    {
        "nl_input": "The query requires a function to perform a log transformation using log(x + 1) on array-like data. It needs to handle both sparse and dense data formats, ensuring the data type is appropriate for the operation. The function should return the transformed data while preserving the structure of the input data.",
        "url": "cc88f21701ab6077cbe986ba301bb315"
    },
    {
        "nl_input": "The query requires extracting and retrieving the contents of each page from a PDF file. The relevant code should iterate through all pages of the PDF, using a method to access each page's content by its index. The result should provide the text or data contained within every page of the specified PDF document. Other codes are unrelated to PDF processing.",
        "url": "a0f3d82a41b02af3c9649aa06b89db3d"
    },
    {
        "nl_input": "The query requires a function to generate a random positive integer suitable for a Django PositiveIntegerField. The provided code includes a function that uses a faker method to return a random positive integer based on the field specifications, meeting the query's needs for generating appropriate values.",
        "url": "85d319ea47a8b2db80fd83fa200969b4"
    },
    {
        "nl_input": "The query requires extracting all union operations from a given table. Specifically, it involves identifying and flattening union queries in the table structure, including handling left and right components of the union, and considering distinctness. The provided code demonstrates a recursive approach to flatten unions by concatenating left and right parts while preserving distinct attributes. Other codes are unrelated to this requirement.",
        "url": "f3c15a88ba4b34b9a86e75aa4a8c83b8"
    },
    {
        "nl_input": "The query requires transforming a TensorFlow variable to ensure it is constrained within an L2 unit ball. This involves defining a variable initialized with zeros and applying a function to constrain it under the L2 norm condition. Only the first code snippet is relevant, as it defines a TensorFlow variable and applies an L2 constraint.",
        "url": "e5fa2723774427d207b10c231427d4c8"
    },
    {
        "nl_input": "The query requires a function to recursively traverse a directory, identify all Python script files (.py), and analyze them for import statements. The function should take a directory path as a parameter and return a generator yielding details of each Python file found, facilitating further analysis of their import statements.",
        "url": "a2f84605b27e7336f7c619e6e6ecb26f"
    },
    {
        "nl_input": "The query requires a function to extract a de-duped collection (set) of text from a file, assuming one item per line. The provided code examples demonstrate reading a file, stripping whitespace, and adding unique lines to a set for deduplication. The goal is to return a collection with no duplicate entries.",
        "url": "af678636432a410c764ca9cb0a1afa68"
    },
    {
        "nl_input": "The query requires a function to batch a list into sub-lists, each sized by a specified batch size. The provided code examples demonstrate different implementations of this functionality, using either a list comprehension or a generator approach to create and return the sub-lists from the original list based on the given batch size.",
        "url": "673c4038436f7b604c37ed0acf9a5adf"
    },
    {
        "nl_input": "The query requires a function to move the cursor up in a text editor or similar application. It should adjust the cursor's position to the previous line while maintaining the current column index, ensuring smooth navigation within the document structure. The implementation must handle edge cases, such as being at the first line.",
        "url": "f4e10c5aa2fe8595abd6657ba28db1c5"
    },
    {
        "nl_input": "The query requires a function to calculate and return the progress ratio in the format \"current/total\" along with the percentage completed. It should take the current value, total value, and optionally time remaining as inputs, then output a string displaying the progress and completion percentage.",
        "url": "205d2257a363e4a52180c14d82ad05e0"
    },
    {
        "nl_input": "The query requires a function to check if a float can be converted to an integer without changing its value. It needs to verify if the float and integer representations of a number are equal, ensuring compatibility for conversion. The solution should handle potential errors and confirm the equality of values after conversion.",
        "url": "dd11b3695df51c0247478c289387f290"
    },
    {
        "nl_input": "The query requires converting a byte string into an integer following the X9.62 standard. The provided code snippets demonstrate methods for byte-to-integer conversion, such as using big-endian byte order, iterating through byte strings, or employing specific radix and alphabet conversions. The solution should focus on implementing a function that adheres to the X9.62 standard for this conversion.",
        "url": "1731237c9b4f7c37e8c66ec5a989582f"
    },
    {
        "nl_input": "The query requires a function to extract and return only the letters from a given string, ignoring any non-alphabetic characters. The desired functionality should iterate through the input string and construct a new string containing alphabetic characters exclusively. The result is a cleaned string with only letters preserved.",
        "url": "a81ea10e95124147157d96bd92d03a50"
    },
    {
        "nl_input": "The query requires a function to retrieve a field member by its name from a collection of fields, returning the field if found or None otherwise. It should iterate through the fields and match the provided name with the field's name attribute, ensuring an exact match before returning the corresponding field object.",
        "url": "a3cd5a39a6a438b727432f565b6b0acf"
    },
    {
        "nl_input": "ThequeryrequiresacodethatensuresastringcontainsnowhitespaceandraisesaValueErrorexceptionifwhitespaceisdetected.Italsoneedstoverifythestringisnon-emptyandhandlespotentialerrorsappropriatelybyraisingatypeerrorifnecessary.",
        "url": "c04cc51d17f6cd1739f09e2c0b66a917"
    },
    {
        "nl_input": "The query requires a function that creates a dictionary excluding any null values or specific keys, such as '_codes'. It aims to filter out unwanted entries while preserving meaningful key-value pairs, ensuring the resulting dictionary is clean and free of unnecessary or empty items. This involves iterating through the original dictionary and selectively including non-null values.",
        "url": "ed25600864e57226782fe2815f6ea7a1"
    },
    {
        "nl_input": "The query requires a function to load and execute Python files by iterating through a list of file paths, logging each file's execution, and using `execfile` to run them within the current global and local scope. The focus is on processing Python files specifically, not other formats like YAML.",
        "url": "fafac547be2039f7ecb1de9409b4e007"
    },
    {
        "nl_input": "The query requires a callback function to handle the closure of a websocket connection. It should log a message when the connection is closed and potentially include functionality for reconnecting or stopping the connection, ensuring the system is aware of the disconnection state.",
        "url": "aa593ebc558493cc0add3bd8bb6e70e5"
    },
    {
        "nl_input": "The query requires a function that flattens a multi-dimensional array into a one-dimensional array while preserving the original contents. The provided code includes a solution that recursively iterates through the input array, appending elements to a temporary array until a single-dimensional structure is achieved, matching the query's need for content preservation during dimension reduction.",
        "url": "6c2f0cae41d4a8defbd80e5fc9ecf368"
    },
    {
        "nl_input": "The query requires a function to convert strings from camel case to snake case. The desired function takes a string input and outputs the string in snake case, where each word is lowercased and separated by underscores. Among the provided code snippets, the relevant ones involve regex substitutions to insert underscores before uppercase letters and convert the result to lowercase.",
        "url": "da53eabc5a7a8f4162b28d726e183372"
    },
    {
        "nl_input": "The query requires a function to validate if an object is a string type. It should handle both Python 2 and Python 3 environments, checking for 'basestring' in Python 2 and 'str' or 'bytes' in Python 3, ensuring compatibility across versions by using conditional logic or exception handling.",
        "url": "bf5d68d072e8122a9a46bc9e0824407b"
    },
    {
        "nl_input": "The query requires a method to write configuration data in YAML format to a specified file. The generated method should take a file name as input and return a function that accepts configuration data, converts it into YAML format using the `yaml.dump` method, and writes it to the specified file with write-plus mode (`w+`).",
        "url": "d5172b2564f44b89541d52f8c075d897"
    },
    {
        "nl_input": "The query requires a function to write floating-point audio samples (ranging from -1.0 to 1.0) into a WAV file. The function should take the file path, audio samples, and sampling rate as inputs, convert the samples to 16-bit integers, and save them using a WAV file writing library.",
        "url": "02774e4da081abce4e8cff9febd5339d"
    },
    {
        "nl_input": "The query requires rendering a plot using Bokeh's interactive functionality and pushing it to a Jupyter notebook environment. Specifically, it involves utilizing the `bokeh.io.push_notebook` method to update and display the plot dynamically within the notebook context. The code should handle updates and ensure efficient rendering.",
        "url": "02f514c324cacaf0704c2a6509112ebf"
    },
    {
        "nl_input": "The query requires a function to determine the dimensions of a nested list and identify the element type. It should recursively analyze the list structure, returning the size of each dimension and the type of elements contained within. The solution must handle varying levels of nesting and different data types, providing a comprehensive description of the list's shape and content.",
        "url": "986d95a235b4666e17e297bc1814526c"
    },
    {
        "nl_input": "The query requires a function to decompress gzipped data streams into uncompressed streams. It should handle the data in chunks, use zlib for decompression with appropriate wbits settings, and manage unused data for continuous processing. The focus is on yielding decompressed streams from a gzipped input stream.",
        "url": "d81906107a72bbbb48477c029365c550"
    },
    {
        "nl_input": "The query requires a function to validate whether a given string is non-empty. It should handle potential errors, such as raising a TypeError if the input is not a string and a ValueError if the string is empty after stripping whitespace. The function must return True for non-empty strings and raise appropriate exceptions otherwise.",
        "url": "4c267ab3b1fbf3f4c4270f715d93e37c"
    },
    {
        "nl_input": "The query requires a function to check if a given input, l, is a 2D numpy array consisting of boolean values. The function should return True if the input meets these criteria and False otherwise, ensuring the data type and dimensionality are correctly validated.",
        "url": "8a3b1c52b2ad77e9fd817568f4cec12c"
    },
    {
        "nl_input": "The query requires a function to divide a given list into sublists of a specified size. The most relevant code defines a function that returns sublists of size 'n' from list 'l'. It uses list comprehension to iterate through the list and create chunks of the desired size, ensuring no elements are skipped or repeated. This meets the requirement for splitting a list into equal-sized parts.",
        "url": "9b703ce1495ac3025601f5addf5595e4"
    },
    {
        "nl_input": "The query requires a function to check if a float can be converted to an integer without changing its value. It needs to verify whether the float value is essentially an integer in disguise, ensuring compatibility by confirming equality before conversion. The desired function should handle errors gracefully and confirm the equivalence of float and int values prior to typecasting.",
        "url": "dd11b3695df51c0247478c289387f290"
    },
    {
        "nl_input": "The query requires a function to convert a list of strings into a list of integers. The desired functionality involves taking each string element in the input list, converting it to an integer, and returning a new list containing these integers. This transformation should handle basic numeric strings without additional complexities like separators or floating-point conversions.",
        "url": "d03c341cc5f160d047d5458a3393cbdf"
    },
    {
        "nl_input": "The query requires a function to create a new dictionary by removing any empty items from the given dictionary. The solution should retain non-empty values, including integers, and exclude keys with missing or null values. The provided code examples demonstrate methods for filtering and constructing dictionaries based on these criteria.",
        "url": "a8c133739d961e115a4cc14c827b0992"
    },
    {
        "nl_input": "The query requires a method to install or upgrade setuptools and EasyInstall. The relevant code should involve downloading a setuptools tarball and executing an installation process with appropriate arguments. The focus is on functionality that handles the installation or upgrading of these Python package management tools. Other provided functions are unrelated to this specific task.",
        "url": "6cb48314baad69035e44a579e4c28a4a"
    },
    {
        "nl_input": "The query requires a function to terminate a shell session, potentially closing associated resources or connections before exiting. The desired functionality should ensure proper cleanup and shutdown procedures are followed, such as closing the current session and resource manager, then exiting the program gracefully.",
        "url": "552e6841d09f58e5e1c8fb096c977099"
    },
    {
        "nl_input": "The query requires a function that tokenizes the input *source* and returns the tokens as a list of lists. The desired implementation involves using a string IO object and leveraging the `tokenize.generate_tokens` method to produce the tokenized output, as demonstrated in the referenced code example.",
        "url": "2aef12f2c1527ef8de50aefbdd1bf8a2"
    },
    {
        "nl_input": "The query requires implementing a \"read_range\" primitive to read a specific range of data from a buffer or memory. It should take parameters like start position and size, returning the specified slice, possibly as a memoryview or similar construct. This functionality combines elements of data parsing and memory manipulation for efficient data extraction.",
        "url": "873e2e123d4b3e09c5cf9042128e4ea4"
    },
    {
        "nl_input": "The query requires a function to print a message (msg) to standard output (stdout) and optionally log it at the info level if a logger is provided. The most suitable code defines a function that prints the message to stdout and logs it at the info level if a logger is specified.",
        "url": "6a20ea317b052d61a5e30244282c661a"
    },
    {
        "nl_input": "The query requires a function to extract all the colors present in an image. The most relevant code defines a function that takes an image as input, retrieves its size, converts it to RGB format, and returns a list of unique color tuples found in the image. This matches the requirement to return a list of all the image's colors. Other codes are unrelated to this specific task.",
        "url": "1009f0bae620cb88f3f2c0ffef639cb5"
    },
    {
        "nl_input": "The query requires a function to convert an underscore-separated string into PascalCase. This involves capitalizing the first letter of each word, removing underscores, and concatenating the words. The provided code examples demonstrate methods to achieve this transformation using regular expressions or string manipulation techniques. The goal is to produce a PascalCase string from a given snake_case input.",
        "url": "4850c6548e9a829b0ecf457c6f739fdc"
    },
    {
        "nl_input": "The query requires a function to convert a list into a string with comma-separated values, leaving strings unchanged. The function should handle lists, tuples, or sets by joining their elements with commas. If the input is already a string, no operation should be performed. The provided code examples demonstrate converting lists to strings using a specified separator, typically a comma.",
        "url": "fba927400ace7484b9037afcd300e79b"
    },
    {
        "nl_input": "The query requires identifying and returning duplicate elements from a list. The desired output is a list of duplicates. The provided code examples involve methods to find or handle duplicates, but the focus should be on extracting and returning duplicate items specifically. The solution should efficiently identify items that appear more than once in the input list and return them as a list.",
        "url": "3f760b95cc5ab5274f1b7ef94bbb83ac"
    },
    {
        "nl_input": "The query requires a function to calculate the chi-squared value given classes, a contingency table, and related parameters (TOP, P, POP). The calculation involves determining expected values based on these parameters, iterating through the classes to compute differences between observed and expected values, and summing their squared ratios to obtain the chi-squared result.",
        "url": "3af9a5c791b244e41cb0891c47ff4327"
    },
    {
        "nl_input": "The query requires a recursive method to calculate the size of a tree, counting all nodes. The provided code examples demonstrate a basic recursive approach, checking if a node is null and summing the sizes of left and right subtrees. This method is noted as slow, implying a need for efficiency improvement while maintaining the recursive structure to traverse and count each node in the tree.",
        "url": "8f388f52ff9e9531e8395ea311574a61"
    },
    {
        "nl_input": "The query requires a function to retrieve the last entry from a specified database table, ordering by ROWID in descending order and limiting the result to one. If no table is specified, it should default to the main table. The function should execute the query and return the fetched result.",
        "url": "43e0333244d180f72905137d8d1335f7"
    },
    {
        "nl_input": "The query requires moving the cursor to a specific line in the current buffer. The relevant code defines a function that takes an editor and a line number, then sets the cursor position to the specified line by translating row and column indices to a buffer index, ensuring the line number is valid and adjusting it accordingly.",
        "url": "85bf8f526e4cc0590ecb0b556389c65a"
    },
    {
        "nl_input": "The query requires a function to terminate all workers and threads. The most suitable code defines a 'terminate' method that iterates through all threads, calling a 'quit' method on each, and then clears both the thread and worker lists, ensuring all associated workers and threads are properly terminated.",
        "url": "8a01d94ec727f7f460e884f936334ec5"
    },
    {
        "nl_input": "The query requires extracting a specific value from a cookie jar. The task involves accessing cookies stored in a request object and retrieving a particular named value or field. This may include parsing cookies directly or saving session information to a file using serialization methods like pickle for later use, ensuring the cookie data is appropriately handled.",
        "url": "7c99a79a7ad75ac06ade2a1e106df71a"
    },
    {
        "nl_input": "The query requires a function to verify if the clang-apply-replacements binary is operational by checking its version. The function should handle exceptions, provide an error message if the binary fails to run, and ensure the binary is correctly specified. It must interact with the system to execute the binary and manage potential errors gracefully.",
        "url": "6adea12a7dde7655f0f1a389ceb335ef"
    },
    {
        "nl_input": "The query requires a function to convert numbers into float values, handling both '.' and ',' as decimal separators. The provided code examples demonstrate various approaches to converting string representations of numbers into floats, including handling integers, managing different number formats, and dealing with non-standard numeric strings. The solution should ensure proper conversion while accommodating diverse input formats.",
        "url": "1834a6c375a0ddbea017871ca95904c0"
    },
    {
        "nl_input": "The query requires a function to retrieve a random node from a binary tree. Specifically, it needs to traverse the tree recursively, choosing left or right child nodes randomly until it reaches and returns a leaf node. The provided code examples include a relevant recursive implementation for obtaining a random leaf node from a binary tree structure.",
        "url": "3f554dfb1717ee0df76ea31085afcf39"
    },
    {
        "nl_input": "The query requires a function to call a spell checker with specified arguments, handling input text by processing it line by line. It ensures long lines are split to avoid truncation, writes chunks to the spell checker's input stream, and returns the process's output with optional encoding. The focus is on integrating with a spell-checking tool like Hunspell.",
        "url": "d13d06b0d9509b466ca8f6f77508ccde"
    },
    {
        "nl_input": "The query requires a function to verify if each element of a given value exists within corresponding positions of a list of values. The most relevant code iterates through the elements of the input value and checks their existence in the respective columns of the provided values, returning True if all elements match their corresponding positions and False otherwise.",
        "url": "6108b1d5909a32358df805e683091bc8"
    },
    {
        "nl_input": "The query requires a function to return a list of dictionaries sorted for unique entries based on a specific key. The function should eliminate duplicates by ensuring that dictionaries with the same key value are reduced to a single entry, maintaining only unique items in the resultant list.",
        "url": "bcf740019b55c972892333070f45ed82"
    },
    {
        "nl_input": "The query requires a function to yield all items from an iterable except the last one. The relevant code defines a generator function that iterates through the given iterable, yielding each item except the last one by maintaining a reference to the previous item and stopping before yielding the final element.",
        "url": "1ee47a36d336de1330bd893bd95750fb"
    },
    {
        "nl_input": "The query requires a function to retrieve primary key properties of a SQLAlchemy class. Specifically, it needs to use the class mapper to identify and return the primary key columns as properties. The focus is on extracting this information directly from the class definition in a manner similar to the implementation found in marshmallow_sqlalchemy.",
        "url": "344250efb585be8c0f0d437f27185d11"
    },
    {
        "nl_input": "{\"description\": \"The query requires a function to create a dictionary with swapped keys and values from the given input dictionary. The function should handle potentially unhashable values by converting them into hashable forms before swapping.\"}",
        "url": "979f3f0fe1af433ff17407bf66d96cad"
    },
    {
        "nl_input": "The query requires a function to retrieve the width and height of a video capture. It should use a capture object and return the dimensions as integers, utilizing properties like CAP_PROP_FRAME_WIDTH and CAP_PROP_FRAME_HEIGHT from the cv2 library. The primary focus is on obtaining these specific frame dimensions effectively.",
        "url": "aaaa24a0f289ed002bc3da51e3d15cdf"
    },
    {
        "nl_input": "The query requires a function to determine the memory allocated at the termination of a function. It needs to calculate the difference between the memory usage at the start and end of a function's execution, returning the memory used or None if not available. The focus is on measuring memory usage effectively upon function termination.",
        "url": "b9198474e1ef2266728aed7e2f57c2cc"
    },
    {
        "nl_input": "The query requires a function to read and return the content of a file located in the project's root directory as a string. The function should handle opening the file, reading its content, and ensuring proper closure. It may involve joining paths, handling different encodings, or stripping unnecessary whitespace from the result.",
        "url": "5b53077086acefdfc481f0156c22d45a"
    },
    {
        "nl_input": "The query requires creating an anonymous, file-based Bucket instance tied to a single key. This involves initializing a Bucket object with a specific key, without requiring additional functionality such as downloading files or handling RSA keys. The focus is on constructing the object around the given key for file-based operations.",
        "url": "1cd1dc7bbfb30f40638f2a27dd200559"
    },
    {
        "nl_input": "The query requires a function to compute a 3x3 cross-product matrix from a 3-element vector. The resulting matrix should follow the skew-symmetric structure, where the input vector's elements define the non-zero off-diagonal entries. This operation is essential for tasks like calculating rotations or forces in 3D space using vector algebra.",
        "url": "2492a256abb481d43a2a066b8da72044"
    },
    {
        "nl_input": "The query requires a function to retrieve the mapping for a given index from an Elasticsearch URL. It involves identifying the appropriate Perceval backend for the index, obtaining its elastic mappings, and logging the mapping details if found. The focus is on finding and returning the mapping associated with the specified index.",
        "url": "88e0c23054a375aa864fdce761d35810"
    },
    {
        "nl_input": "The query requires a function to determine if a given number (num) is a power of two. The most relevant code checks if the base-2 logarithm of num is an integer, indicating that num is indeed a power of two. This involves using a logarithmic calculation and comparing integer and float values of the result for equality.",
        "url": "38e59d8098901fb657abe07ea53e4970"
    },
    {
        "nl_input": "The query requires a function to validate if a given argument is an existing file on the file system. It should check for the file's existence, ensure it's not a directory, and confirm it has a size greater than zero. The function may also handle exceptions or provide error messages if the file does not meet these criteria.",
        "url": "457753fd65f06a706c64700d4933ab00"
    },
    {
        "nl_input": "The query requires a function to prepare a header as a list for writing to a TSV file. It should take an optional header parameter and output it in a format suitable for TSV, potentially using CSV utilities to write the row. The focus is on formatting and preparing the header fields correctly for delimited file writing.",
        "url": "721c3006e76c0a49f0cdb41715be8519"
    },
    {
        "nl_input": "The query requires a function to determine if a given value is a string compatible with both Python 2 and 3. It needs to handle differences in string types between the two versions, using checks for 'str' and 'bytes' in Python 3, and 'basestring' in Python 2, ensuring type safety across versions.",
        "url": "f6c2c4043a72ee6ac596800045699aa3"
    },
    {
        "nl_input": "The query requires a function to compute a vector of spherical Bessel functions yn for a given argument x and integer N, where n ranges from 0 to N-1. The function should recursively calculate the values of yn based on previous results and return them as an output array.",
        "url": "2c2d10e576f0ffc704b857558dbe68d1"
    },
    {
        "nl_input": "The query requires a function to identify and return the names of columns with object data types in a DataFrame. The desired output should list these column names, ensuring they are extracted based on their data type being 'object' or categorical. This helps in handling specific data types within data analysis tasks.",
        "url": "ff434fe169ce9fa91ed8e9ecd5323b31"
    },
    {
        "nl_input": "The query requires plotting a smoothed histogram using kernel density estimation (KDE). The data should be in a numpy array format. The provided code includes a function to plot KDE with options for color, filling, and title. The focus is on creating a visually enhanced KDE plot with smoothing capabilities.",
        "url": "20d4c9337731d52fe439d7ae337e6913"
    },
    {
        "nl_input": "The query requires a function to remove a specified parameter from a query object by its name. If the parameter exists in the query, it should be deleted or popped from the query's internal dictionary structure. The implementation must ensure that the parameter is only removed if it exists, avoiding errors when the parameter is absent.",
        "url": "5e2992e3203231f5d04080655e6e6c94"
    },
    {
        "nl_input": "The query requires a function to close a connection. Specifically, it needs to disable auto-reconnect functionality, check if a websocket exists, and then close it properly. The provided code examples demonstrate closing a connection, handling websocket closure, and deleting a connection by stopping it if certain conditions are met.",
        "url": "aaa8ca744df057fc7df107df0da2946e"
    },
    {
        "nl_input": "The query requires a function to read input from stdin and provide a helpful message when interacting with ttys. Specifically, it should check if both stdin and stdout are ttys, print a message indicating reading until an end-of-file signal (Ctrl+D), and then read the input. The solution must support Python 2 and 3 compatibility for input handling.",
        "url": "e0733d51ee06d0addebb4595beb97e0b"
    },
    {
        "nl_input": "The query requires a function to download a file from an S3 bucket. The needed code should take parameters like the bucket name, file path, and key, then use these to download the file object and save it locally. Among the provided snippets, the relevant functionality involves using `download_fileobj` to achieve this purpose.",
        "url": "12fc3abe142e491a071b985a41eacbcc"
    },
    {
        "nl_input": "The query requires a function to perform type casting, converting a value to a specified type. It involves determining the type name and using a casting mechanism, while handling exceptions if the conversion fails. The focus is on a flexible typecasting process that can adapt to different data types and structures.",
        "url": "2d8dc20b01a0f3edb16213fdac9acaa8"
    },
    {
        "nl_input": "The query requires a function to return a memoryview object representing a specific slice of memory based on the given start position and size. It should allow accessing a portion of the underlying bytes without copying them, enabling efficient memory handling. The focus is on creating a view into the memory with specified boundaries.",
        "url": "20bcf139232a957c771376918dce26db"
    },
    {
        "nl_input": "The query requires a function to return the index of column 0 for the current item in an underlying model, considering the distinction between current and selected items. The desired function uses the current item's index to locate its corresponding row and column 0 position within the model.",
        "url": "8ff34d03fd1a41d19991e700bf7264c1"
    },
    {
        "nl_input": "The query requires a recursive method to calculate the size of a tree, counting all nodes. It accepts that the solution may be slow. The desired function should return 0 for an empty tree and otherwise sum 1 with the sizes of its left and right subtrees. The provided code examples include a recursive size function matching this description.",
        "url": "8f388f52ff9e9531e8395ea311574a61"
    },
    {
        "nl_input": "The query requires a function to calculate the median of numeric data using the mean of the middle two values when the dataset has an even number of elements. If the data is empty, the function should return 0. The provided code examples demonstrate different implementations of median calculation, with the first one closely matching the query's requirements.",
        "url": "a2ed58dc05b0f96ed45e74171c63422e"
    },
    {
        "nl_input": "The query requires a function to determine if two numbers are equal up to a specified number of decimal places. It checks the absolute difference between the numbers, rounded to the given decimal places, and returns True if the difference is zero, indicating equality within the specified precision.",
        "url": "fa3233a6cd42dc3060664f97aa1c6dd5"
    },
    {
        "nl_input": "The query requires a function to find the index of the last occurrence of an element 'x' in a sequence. The provided code examples demonstrate methods to calculate this by reversing the sequence and finding the first occurrence of 'x', then adjusting the index accordingly. The requirement is to determine the position of the final appearance of a specific element within a list or sequence.",
        "url": "f0181095e2b214bca904dedc120dac57"
    },
    {
        "nl_input": "The query requires a function to populate GUI axis limit widgets with the current plot's x-axis minimum and maximum values. It involves retrieving these values using `get_xlim()` and updating corresponding GUI text fields (`x_lo` for minimum and `x_hi` for maximum) to reflect the current plot's x-axis limits dynamically.",
        "url": "52074cdb32ef6249813156e7efc7b978"
    },
    {
        "nl_input": "The query requires a method to temporarily redirect the standard output (stdout) to an alternative stream while ensuring the original stdout can be restored afterward. This involves creating a context manager or function that switches stdout to a new target, executes code within this context, and reverts stdout upon completion, maintaining the integrity of output streams.",
        "url": "22f5ab096acfd0ced92efc860645bcaf"
    },
    {
        "nl_input": "The query requires a function to rotate a list in-place by a specified number of steps. The function should modify the original list, moving the first 'steps' elements to the end of the list, and return the modified list. If the list is empty or the steps are zero, the list remains unchanged.",
        "url": "707569fdd77ebde2ce9e44aeb15df944"
    },
    {
        "nl_input": "The query requires a function to replace all occurrences of specified symbols in a string based on a given mapping dictionary. The function should take the mapping and input string as arguments and return the modified string with replacements applied according to the mapping.",
        "url": "85d3c78c884351b4ba1ab4b9bbd83d89"
    },
    {
        "nl_input": "The query requires calculating the short-time Fourier transform (STFT) magnitude of a signal. This involves framing the signal, applying a window function (like Hann), and computing the FFT's magnitude for each frame. The result is the magnitude spectrum of the signal over time, represented as the absolute value of the FFT output. Parameters include signal, FFT length, hop length, and window length.",
        "url": "dbd5611f954c88c313e4e96e1ccb797b"
    },
    {
        "nl_input": "The query requires calculating the Sum of Squared Errors (SSE) to the cluster center for data points. It needs a function that computes distances between data points and their cluster center, then sums these squared distances. The relevant code should use a distance metric and handle data arrays effectively for this calculation.",
        "url": "103206f393d3e14ed03ee8f1adc4a0d0"
    },
    {
        "nl_input": "The query requires implementing a function similar to 'lpop' in Redis, which removes and returns the first element of a list stored at a given key. If the key does not exist or the list is empty, it should return None. The function needs to handle list operations and manage cases where the list becomes empty after popping an element.",
        "url": "08901634f481f05ed3b04c1da455b8b2"
    },
    {
        "nl_input": "The query requires identifying code that handles actions when a block or resource usage ends, ensuring proper closure and cleanup. This involves decrementing indentation levels, writing new lines if necessary, or closing current resources and managers. The focus is on maintaining structure and releasing resources appropriately when exiting a context or block.",
        "url": "1d447a9da9154b393c31270b1bb034a1"
    },
    {
        "nl_input": "The query requires a function to create symbolic links compatible with both Windows and Unix-like operating systems. It should detect the OS and use the appropriate method: `os.symlink` for Unix-like systems and `ctypes.windll.kernel32.CreateSymbolicLinkW` for Windows, handling directory vs. file links appropriately. The solution must manage OS differences seamlessly.",
        "url": "1be0c088c4ccabf8a0a9cbc7a533fb82"
    },
    {
        "nl_input": "The query requires a function to terminate the current session by removing it from the cache, specifically when a session is no longer valid. The solution involves setting a specific key (e.g., 'auth0_key') in the cache to None and clearing the Flask session to ensure the session data is removed. This process ensures proper session logout functionality.",
        "url": "6b1aedce31fc54b676ef475bbccca0f4"
    },
    {
        "nl_input": "The query requires calculating the Hamming distance between two strings of equal length using an iterative approach. The function should compare corresponding characters in the two strings and count the number of positions where they differ. If the strings have unequal lengths, the function should raise an error or indicate mismatch. Only relevant information from the provided code is to be extracted for this purpose.",
        "url": "864a82eccd4052bf4623bc043e1da9f7"
    },
    {
        "nl_input": "The query requires a helper function that processes an array of intervals and returns an array containing the boundary points (left and right) of these intervals. The function should extract the 'left' boundaries from each interval and include the 'right' boundary of the last interval in the resulting array.",
        "url": "5521725c7f9fb840aa2233e10462e5e9"
    },
    {
        "nl_input": "The query requires a function to submit a form using its unique identifier (ID). The relevant code demonstrates locating the form element by its ID through an XPath expression and submitting it. Other provided functions are unrelated, focusing instead on form data retrieval and widget attribute manipulation. The goal is to execute form submission based on the given ID.",
        "url": "2456b464c2cdd924c757ebcacad877ac"
    },
    {
        "nl_input": "The query requires a function to convert a filename into a slugified version while retaining its extension. This involves removing special characters, spaces, or other non-standard characters from the filename and replacing them with a cleaner format, ensuring it is URL-friendly or suitable for systems that require simplified filenames. The provided code demonstrates achieving this by separating the name and extension, processing the name, and recombining them.",
        "url": "d03c8445844950a0fdafc88eb5631845"
    },
    {
        "nl_input": "The query requires a function to run a unit test framework, potentially overriding default behavior. It should return True for passing tests and False for failures. The function needs to discover and execute tests, possibly with verbosity or detailed output, ensuring the test results are clearly indicated. Additionally, it may involve handling environments or external dependencies for execution.",
        "url": "595642aaa9f754ce601e2d291d98ec1a"
    },
    {
        "nl_input": "The query requires a function to extract and parse comments from a file, primarily for testing and interactive use. It involves reading the file, identifying comment lines, and processing them while considering the next line of code. The focus is on handling Python-style comments effectively without affecting string literals.",
        "url": "1dc3a21cdc2e7628cf01cea3b18aacba"
    },
    {
        "nl_input": "The query requires registering a plugin in Spyder's main window by connecting the restore scrollbar position and adding the dock widget to the main interface. The relevant code demonstrates how to achieve this by using the `register_plugin` method, ensuring the plugin integrates correctly with Spyder's GUI functionalities. Other provided codes are unrelated to the registration process.",
        "url": "864135b3a55a9a79c0d47a33500139f2"
    },
    {
        "nl_input": "The query seeks to determine if an object is iterable like a list but not a string. It requires a function that checks for the presence of the `__iter__` attribute in the object while excluding instances where the object is a string or unicode type, ensuring non-string iterables are identified accurately.",
        "url": "e8d906db3eac56229992dd6701dafd90"
    },
    {
        "nl_input": "The query requires a function to check if a file or directory is world writable. The relevant code should determine if others have write permission by examining the file's mode using os.stat and verifying if the S_IWOTH flag is set, indicating world writability. Only the first code snippet directly addresses this requirement.",
        "url": "b4b9c1d50409852d0126efded851221b"
    },
    {
        "nl_input": "The query requires a function to return all dates between two given dates. The most relevant code generates a list of dates using a list comprehension with timedelta, iterating through the number of days between the start and end dates. It calculates the difference in days and adds each day incrementally to the start date, forming a complete list of dates within the range.",
        "url": "2ec6dccbbbb87558aac51d057330ced6"
    },
    {
        "nl_input": "The query requires creating a SHA256 hash from a Numpy array. It needs to consider the array's data type, shape, and byte representation to ensure the hash uniquely represents the array content and structure. The solution should use hashlib for generating the hash and numpy functionalities for handling array properties.",
        "url": "1b3888d1a58935502e5b2adb2b60e05c"
    },
    {
        "nl_input": "The query requires a function to encode a numpy ndarray into a base64 string representing image data. The function should accept an ndarray and optional kwargs for configuring the image saving process, utilizing matplotlib's imsave. It must determine the image format, encode the resulting image bytes into a base64 string, and return it in a URL-data format specifying the image type.",
        "url": "d2d722cc0e28ad756bd471900ecc9d88"
    },
    {
        "nl_input": "The query requires a list of functions declared or defined in a module. The provided code snippets include examples of function definitions that either extract functions from a given context, retrieve callable methods from objects, or compose multiple functions into one. The requirement focuses on identifying and listing such function declarations within a module.",
        "url": "c39dfb1294e1cedacd1dba82fe10444c"
    },
    {
        "nl_input": "The query requires a function to check if an object is a list or tuple. It should return True for lists or tuples and False otherwise, ensuring the object is not mistakenly identified as iterable due to other types like strings or sets. The focus is on specifically identifying list or tuple types.",
        "url": "4fe4993dee777785be3fcaec037b4d45"
    },
    {
        "nl_input": "The query requires a non-optimal implementation of a regex filter function. It should involve replacing substrings in a given string using regex, potentially with multiple replacements defined in a dictionary. The function needs to apply regex substitution logic, iterating through keys and performing replacements accordingly, though not necessarily in the most efficient manner.",
        "url": "360c91549b5a9b4a4c05559eccff8f03"
    },
    {
        "nl_input": "The query requires a function to convert a list of key-value pairs into a dictionary. The provided code examples demonstrate methods to achieve this, either by directly assigning values to keys or using `setdefault` to handle multiple values per key. The goal is to create a dictionary from the given list structure efficiently.",
        "url": "1b73a949780175c73d5778ca8e2f5b2e"
    },
    {
        "nl_input": "The query requires a function to convert any given timestamp to UTC, ensuring the inclusion of tzinfo for timezone awareness. The desired functionality involves checking if the timestamp already has timezone information; if not, it assigns UTC as the timezone. Otherwise, it converts the timestamp to UTC while preserving timezone awareness.",
        "url": "2a5f56a6f9bf9db10ce4af896725130d"
    },
    {
        "nl_input": "The query requires a function to parse date strings formatted as YYYY-MM-DD. The provided code snippets demonstrate methods to achieve this, using libraries like `datetime` and `dateutil.parser`. The function should take a string input and return the corresponding date object, handling potential import errors or non-string inputs gracefully.",
        "url": "023556d0f9084731234739f423f423b8"
    },
    {
        "nl_input": "The query requires a function that retries a given callable up to a specified number of times, trapping certain exceptions and invoking a cleanup function on each exception occurrence. If the final attempt also fails, it should allow exceptions to propagate. The function should handle retry logic, exception trapping, and cleanup invocation effectively.",
        "url": "1a64146c41dcc175d7dced14a4e1efc2"
    },
    {
        "nl_input": "The query requires a function to convert a given timestamp into a datetime object in UTC. The desired functionality should handle timezone localization and ensure the returned datetime object is in Coordinated Universal Time (UTC). Among the provided code snippets, the focus is on extracting the method that accurately performs this conversion while maintaining UTC consistency.",
        "url": "3d70f3cd7bb4fcd28a864cd53385c91a"
    },
    {
        "nl_input": "The query requires a function to determine the dimensions of an array, specifically the number of rows and the maximum number of columns. It should handle nested lists, returning the count of rows and the length of the longest sublist for irregular arrays. If the array is not nested, it should return the count of elements as rows and 1 as the column.",
        "url": "cdc6bd5ccb9ba6e6aaf76e2667547b09"
    },
    {
        "nl_input": "The query requires a function to print log messages to standard error, typically including the script name and the log message itself. It may also support additional formatting options like colors for better visualization in the output. The provided code snippets demonstrate writing formatted messages to stderr or stdout with optional styling based on platform compatibility.",
        "url": "336b9bafdd37d354437a6c0bf18ca5ba"
    },
    {
        "nl_input": "The query requires a function to decode a base64-encoded string into bytes. The provided code includes a relevant function that checks if the input is a string, converts it to bytes if necessary, and then decodes it using base64. The requirement focuses on handling string input and producing byte output through base64 decoding. Other codes are unrelated to this specific task.",
        "url": "e1355896799feac76852156156c7c4ce"
    },
    {
        "nl_input": "The query requires a function to iterate through a dictionary of {key: default value} pairs and apply the `setdefault` method for each key in the target dictionary, ensuring all specified keys exist with their default values if not already present. The function should return the modified dictionary.",
        "url": "9bbbb20f503ba46da76eaa77b98784af"
    },
    {
        "nl_input": "The query requires a function to return the locale based on the 'lang' parameter from a GET request. If the 'lang' parameter is not provided, it should fallback to automatically selecting the locale using a babel utility function tied to the request context. The solution needs to handle both explicit parameters and automatic detection gracefully.",
        "url": "61f13c0b5a9183042dccc906393eddee"
    },
    {
        "nl_input": "The query requires a function to validate if a given key exists within a set of keys retrieved by a method called `get_keys`. The function should take the key as input and return a boolean indicating whether the key is present. This involves checking membership of the key in the retrieved keys list or set.",
        "url": "a095b82ce6afd497cdc7fa027a60c84f"
    },
    {
        "nl_input": "The query requires a function to check if a socket, managed by a connection, is currently connected. It should return true if the socket exists, is active (based on its properties), and the base transport confirms the connection. Error handling for socket exceptions must also be included.",
        "url": "513d431a27bb592c41048d90039995f4"
    },
    {
        "nl_input": "The query requires a function to convert CamelCase strings to camel_case (snake_case). This involves identifying uppercase letters in a string and inserting underscores before them, then converting the entire string to lowercase. Among the provided code snippets, the focus should be on achieving this transformation effectively using regular expressions or string manipulation techniques.",
        "url": "e62605ac6be1e0109853647a645d5a0f"
    },
    {
        "nl_input": "The query requires a function to format a byte-sized value into a human-readable string. It should handle potential errors, such as ValueError or TypeError, and return \"N/A\" if formatting fails. The result must align with the length of a formatted size for consistency.",
        "url": "d92799ba562962beae001113ca6732fe"
    },
    {
        "nl_input": "The query requires updating the requests session's user-agent to match the driver's user agent. This involves extracting the user-agent string from the browser driver and setting it in the headers of the requests session for consistent behavior between the browser and HTTP requests. Only relevant code achieving this specific task should be considered.",
        "url": "0bad6ea9859d756f7237f3fa3dcf1973"
    },
    {
        "nl_input": "The query requires a function that ensures any function returns an iterable object. If the result is already iterable, it remains unchanged; otherwise, it wraps the result in a list. This guarantees consistent handling of return values across different functions.",
        "url": "1cf347f32e0553e66342c5b228b6d453"
    },
    {
        "nl_input": "The query requires a function to check if a specific line of text exists within a file. The function should read the file, compare each line with the given input, and return True if the line is found, otherwise return False. The solution must ensure the input line does not contain newline characters for accurate matching.",
        "url": "4c56c26e86dccb73a7524fa62749b3c7"
    },
    {
        "nl_input": "The query requires a function to check if a file exists and is non-empty. It should verify the existence of the file and ensure it has a size greater than zero, handling potential errors gracefully without detailed code analysis.",
        "url": "ba4351c8eadd8c502a13959ccbb889d2"
    },
    {
        "nl_input": "The query requires finding the largest real value h such that all elements in array x are integer multiples of h. This involves determining the greatest common divisor (GCD) of the elements in x, as the GCD represents the largest value by which all elements can be divided to yield integers. The solution should compute and return this GCD value for the given array x.",
        "url": "7a0e230522dc1bfb6f427d5c55f1b354"
    },
    {
        "nl_input": "The query requires a function to linearly interpolate variable x from rangeX onto rangeY. It needs to map the value of x proportionally between two ranges by calculating the relative position of x in rangeX and applying this ratio to scale between the values in rangeY, thus providing the corresponding interpolated value.",
        "url": "bba8e86c58de9c086c25b972de480920"
    },
    {
        "nl_input": "The query requires a function to unpickle a Python object from a given file path. It should load the serialized object using a library like `dill` or `pickle`. The function must handle errors, such as failing to load the object, and return the unpickled object if successful. Only the first code snippet matches this requirement.",
        "url": "64f148c6a3c867b3f9380ee9172cce34"
    },
    {
        "nl_input": "The query requires a function to determine if a given input is an integer. It should return True for integer values and False for non-integer values, including floating-point numbers. The function needs to handle different input types, such as strings representing integers, and ensure compatibility with Python 3.",
        "url": "eaa5d3df3bbe1169308e890817a30790"
    },
    {
        "nl_input": "The query requires a function to determine if one set is a subset of another. The relevant code defines a method `issubset` that checks if all items in the current set exist in another set, returning a boolean result. It first performs a fast check by comparing lengths for efficiency. Other provided codes are unrelated to subset checking.",
        "url": "b13301061e6e68891948ff771a0dd969"
    },
    {
        "nl_input": "The query requires a method to serve static files in a Django application, ensuring it works during development by collecting and serving individual files quickly without interfering with template tags. It should handle cases where the static-serving view is only accessible in debug mode or with insecure options enabled.",
        "url": "cc5b140743d1613ffe94214545936630"
    },
    {
        "nl_input": "The query requires a function to recursively merge two dictionaries, combining nested dictionaries rather than overwriting them. The desired implementation should iterate through the second dictionary, update existing keys in the first dictionary, and merge nested dictionaries by recursive calls, ensuring all key-value pairs are appropriately integrated without losing data in nested structures.",
        "url": "367ef0f0e3ea4a8eafab16a7ab44c725"
    },
    {
        "nl_input": "The query requires a function to remove trailing zeros from an indexable collection of numbers. It should iterate through the collection from the end, identify trailing zeros, and return the collection without these zeros, effectively trimming the unnecessary zeroes while preserving the original order of the remaining elements.",
        "url": "18282b3d8bec1a731e59daf433dfd841"
    },
    {
        "nl_input": "The query requires a function to handle actions when a block or resource usage ends, ensuring proper closure and cleanup. This includes reducing indentation, writing necessary new lines, or closing current resources and managers while preparing for termination. The focus is on maintaining structure and releasing resources appropriately when ending a context or operation.",
        "url": "1d447a9da9154b393c31270b1bb034a1"
    },
    {
        "nl_input": "The query requires a function that retrieves the current xy coordinates of the mouse cursor as a two-integer tuple using the GetCursorPos() win32 function. The function should utilize ctypes to interface with the Windows API and return the cursor's position in a tuple format (x, y).",
        "url": "967b8409877fab7c6d1a05090f226266"
    },
    {
        "nl_input": "The query requires a function to open a GUI browse dialog for the user to select a target directory, returning the selected directory path as a string. The provided code includes a function that logs actions, calls an external script for directory selection, processes the output, and returns the chosen path if available.",
        "url": "d5e734d1fcfeb6be60382165bf589df5"
    },
    {
        "nl_input": "The query requires adjusting the height of bars in a horizontal bar chart to make them thinner. This involves modifying the bar height and recentering the bars vertically to maintain their position within the chart. The solution should iterate through the bars, update their height, and adjust their y-position accordingly.",
        "url": "b0be624b8cf1eb2cc8c65f5ac8f1b1fc"
    },
    {
        "nl_input": "The query requires a function to uncheck a checkbox. The desired functionality involves checking if the checkbox is currently checked and, if so, performing an action (like a click) to uncheck it. The solution should handle optional parameters for forced actions. It does not involve setting values or handling combo box changes.",
        "url": "cf3e688ced0a0895f3c3cf7463d322ee"
    },
    {
        "nl_input": "The query requires a 1x1 convolution implementation, which reduces dimensionality in neural networks. It needs a function taking input planes, output planes, and stride as parameters, returning a Conv2d layer with kernel size 1 and no bias. The focus is on efficient feature transformation using 1x1 convolutions in deep learning architectures. Other unrelated convolutions, like Gaussian, are not relevant here.",
        "url": "1c63a8f567508c2dbbd974597db516e0"
    },
    {
        "nl_input": "The query requires a function to retrieve the installed FFmpeg version by executing the 'ffmpeg -version' command, parsing the output to extract the version number using a regular expression, and returning it as a string. If the version cannot be determined, it should return None. The focus is on identifying and extracting the FFmpeg version dynamically.",
        "url": "5672c84f0fb6f7657f191a3093ff16c4"
    },
    {
        "nl_input": "The query requires a function to draw a horizontal line specified by position (x, y), length (width), and color. The desired implementation uses a rectangle with a height of 1 to represent the line, ensuring it is filled. Alternative methods using coordinate enumeration and drawing individual segments are not relevant to the query's needs.",
        "url": "bb672ed0a0391881ee18bccacf406e44"
    },
    {
        "nl_input": "The query requires identifying the longest consecutive sequence of True values. The provided code examples involve finding maximum lengths or longest sequences in different contexts, such as runs of data, ORFs, or contigs. The requirement is to implement a function that processes a sequence and returns the length of the longest consecutive run of True values. This involves iterating through the sequence and tracking the longest run. Length: 80 words.",
        "url": "f96218fe24cc389de0fb1c77fe88bf40"
    },
    {
        "nl_input": "The query requires a function to unpickle a classifier. Specifically, it needs code that reads a pickled file and loads the stored classifier object using either `pickle` or `dill`. The function should handle file operations properly and return the loaded classifier for further use in classification tasks.",
        "url": "9fddf29122817bde842baa42b083ce22"
    },
    {
        "nl_input": "The query seeks a method to map attribute names of an SQLAlchemy class to their corresponding database column names. It requires a function that iterates through the class attributes, retrieves the associated column names, and returns a dictionary where keys are attribute names and values are their corresponding database column names. This helps in understanding the correspondence between class attributes and database schema.",
        "url": "3d729ca5bcd13294547ba7baae28b3bc"
    },
    {
        "nl_input": "The query requires a function to clean up active connections and free DDEML resources. It needs to ensure all connections are properly closed and resources are released, preventing memory leaks or resource exhaustion. The solution should handle existing connections, remove instances, and delete plugins if necessary, ensuring a clean state after execution.",
        "url": "61e447348557f0698e3e0553701346ba"
    },
    {
        "nl_input": "The query requires a function to retrieve the value of a local variable from the call stack by its name. The solution should traverse the call stack, locate the variable in the frame's local variables, and return its value if found. If the variable is not present, it should return None or handle the absence gracefully.",
        "url": "7e2c5d8ffcd2cc1804e4430e37ffcd29"
    },
    {
        "nl_input": "The query requires a generator function to read from standard input in non-blocking mode. It should continuously yield lines as they are entered, without waiting for an end-of-file signal, allowing for real-time processing of input data. The solution must use Python's sys.stdin functionality effectively to achieve this behavior.",
        "url": "e7f60e34eae397045ead8f39e3e261c4"
    },
    {
        "nl_input": "The query requires a function to determine the number of factor levels for each categorical column in a dataset. This involves identifying categorical columns and calculating the count of unique levels within each. The provided code snippets include utilities for handling levels and identifying categorical columns, which can be utilized to fulfill this requirement.",
        "url": "a6c5e82314e0faff8a2fffca5ce8286b"
    },
    {
        "nl_input": "The query requires a function to read a string from a file-like object. It should open the specified file, read its content, and return it as a string. The provided code examples demonstrate reading a file's content using different methods, but the core requirement is to implement a function that takes a file path and returns its content as a string.",
        "url": "48e0185c07ad636ecb25d70cb2b5dd3d"
    },
    {
        "nl_input": "The query requires a function that takes a string and a dictionary, then replaces all occurrences of dictionary keys in the string with their corresponding values. The provided code examples demonstrate different implementations of this functionality, focusing on iterating through the dictionary and applying replacements to the input text.",
        "url": "248a51a67e1e4f407628e9ccafebb8d6"
    },
    {
        "nl_input": "The query requires a method to convert a pandas Series into an xarray DataArray. This involves taking a Series as input and transforming it into a DataArray while preserving its data and structure. The conversion should handle the Series' name and ensure compatibility with xarray's DataArray format for further analysis or operations.",
        "url": "8acad3dcdc0bc175f9a4ddd4dac2d19c"
    },
    {
        "nl_input": "The query requires a method to compare two strings securely, ensuring protection against timing attacks. The desired function should avoid revealing information through timing discrepancies, even when strings differ. It must consistently evaluate all characters and return a boolean result indicating equality, irrespective of string length differences or individual character mismatches.",
        "url": "71f181ff4390f325cea684ca6661f4f8"
    },
    {
        "nl_input": "The query requires a function to determine if a given extension matches any of the watched extensions. The relevant code defines a function that iterates through a list of valid extensions and checks if the provided extension ends with any of them, returning True if a match is found, otherwise False.",
        "url": "741cd035bc31b069280d84e5c84487d1"
    },
    {
        "nl_input": "```json\n{\n  \"description\": \"The query requires a function to create a dictionary with keys and values swapped from an input dictionary. It ensures values are hashable and handles dictionary views for inversion, while another unrelated function converts a list of pairs into a dictionary.\"\n}\n```",
        "url": "979f3f0fe1af433ff17407bf66d96cad"
    },
    {
        "nl_input": "The query requires extracting a list of words from an iterable of lines. The relevant code uses a regular expression to find all word patterns in each line and yields them as a list of words. It iterates through each line, identifies words using regex, and generates the words one by one for efficient processing. Other provided code snippets are unrelated to this specific task.",
        "url": "866cf01cf4308a742bd39972cdf57ead"
    },
    {
        "nl_input": "The query requires a function to execute a stored procedure and return the first row of the result set or None if no rows are returned. It should accept the procedure name, arguments, and an optional factory parameter, iterating through the result to return the first row or None if there is no data.",
        "url": "4bb07195c20355ce50cc040f5e70a269"
    },
    {
        "nl_input": "The query requires a function that applies another function in parallel to each element of an input iterable. The most relevant code demonstrates mapping a function to each element in the iterable, applying transformations with additional arguments if needed. It emphasizes parallel application and processing of elements while maintaining the structure or order of the input.",
        "url": "1a639907a649d5db69f9b6fdd58119d3"
    },
    {
        "nl_input": "The query aims to determine the largest contig for each strain by utilizing a dictionary that maps strain names to reverse-sorted lists of contig lengths. The requirement is to return a dictionary mapping each strain name to its longest contig length, extracting only the first element from each sorted list as it represents the largest contig.",
        "url": "fe624b37a24fae6c2ac1da10c64e2a3a"
    },
    {
        "nl_input": "The query requires a utility function to remove duplicates from a list while preserving the original order. It takes a sequence (list) as input and returns a new list with duplicates removed. The function uses a set to track seen elements, ensuring each element is included only once in the result. Efficient implementation is preferred, such as using `seen_add` for faster execution.",
        "url": "695e29d80ca42056024f20cf87ce69a0"
    },
    {
        "nl_input": "The query requires a function to save data to a pickle file. The provided code examples demonstrate saving a variable or object to a file using the pickle module in Python, with one example using the highest protocol for efficiency. The functions accept the data and filename as arguments and handle the file operations internally.",
        "url": "a0c6bdbe745a48b0c5ff9e6435ea812c"
    },
    {
        "nl_input": "The query requires a function to terminate and clean up an existing Bloomberg connection. It should check if the connection exists, stop the session if active, and ensure the connection is properly closed. The solution must handle cases where the connection or related sessions might not exist or have already been terminated.",
        "url": "fe9deca4af0d80078524960ad2b74574"
    },
    {
        "nl_input": "The query requires a method to determine if a Python script is running in an interactive shell or as a background process. The solution should detect interactivity by checking system outputs and process groups, disabling interactivity if conditions aren't met, as referenced in the provided StackOverflow link.",
        "url": "76aa03205e7480cb1280364d8181ad15"
    },
    {
        "nl_input": "The query requires a function to extract the hostname from a given URL. It should take the URL as input and return the hostname by parsing the netloc component, removing any port information if present. The provided code examples demonstrate this functionality using Python's `urllib.parse` module.",
        "url": "13343f8f3c5515600e035d8cca7abd84"
    },
    {
        "nl_input": "The query requires converting Napoleon-style docstrings to plain Sphinx docstrings. This involves processing the input docstring and adjusting configuration parameters like \"napoleon_use_param\" and \"napoleon_use_rtype\" to control the conversion behavior. The result should be a Sphinx-compatible docstring formatted appropriately for integration into Sphinx documentation systems.",
        "url": "40b653bcdc05a7556a73500d75ea2a95"
    },
    {
        "nl_input": "The query requires a function to scale an image to the uint8 data type by normalizing pixel values between 0 and 255. This involves converting the image array, finding its minimum and maximum values, and applying a linear transformation to fit the uint8 range. The result should be a properly scaled image suitable for further processing or display.",
        "url": "9b7c3a7b5223587100d77ad757569265"
    },
    {
        "nl_input": "The query requires a function to determine the day number of the last day in a given month, accepting a datetime parameter and returning an integer. The provided code examples demonstrate adding days to the input date, adjusting to the next month, then subtracting to find the last day of the original month. Only the first two code snippets are relevant to this requirement.",
        "url": "820668a155ea53034787f1042a2328c0"
    },
    {
        "nl_input": "The query requires a function to calculate Earth's orientation as a rotation matrix using x-pole, y-pole, and s-prime values. The result should represent the Earth's orientation at a given date by applying successive rotations (rot1, rot2, rot3) based on these parameters. The function must convert degrees to radians and combine rotations to produce the final matrix.",
        "url": "d5c0c0b2fdf91739d6b7fcf66bbb3579"
    },
    {
        "nl_input": "The query requires a method that validates input against a predefined schema or format and returns a boolean value indicating validity. Specifically, it involves parsing XML input and validating it against an XSD schema, ensuring proper structure and compliance. If validation is not possible due to missing schema, an exception is raised. The focus is on XML validation functionality.",
        "url": "2605045c4bab070d37e542733c536732"
    },
    {
        "nl_input": "The query requires a function to return a random element from a sequence repeatedly for 'n' times. If 'n' is None, the function should keep returning elements indefinitely. The function needs to handle sequences and ensure random selection, potentially converting sets to tuples for compatibility with the random selection process.",
        "url": "4b7b7a1e82c377437cb8d2c97b053eef"
    },
    {
        "nl_input": "The query requires a function to determine if two rectangles, defined by tuples (xmin, xmax, ymin, ymax), intersect. The function should check for overlapping intervals in both x and y dimensions and return True if they intersect, otherwise False. The provided code includes a relevant function that fulfills this requirement by checking interval intersections.",
        "url": "048248cc31234e7e17b1e3d8f525a955"
    },
    {
        "nl_input": "The query requires a function to count the number of leading whitespace characters in a given text. It should iterate through the text and return the count of consecutive whitespace characters from the beginning. The function stops counting when it encounters the first non-whitespace character or reaches the end of the text.",
        "url": "a2f407d02b38bb235bf47e7d92789cdf"
    },
    {
        "nl_input": "The query requires reversing a range by swapping its lower and upper bounds along with their inclusion flags. The relevant code modifies the range object by exchanging the from_value with to_value and include_lower with include_upper, effectively inverting the range's direction while preserving its properties. Other codes are unrelated to this functionality.",
        "url": "0bd3c70c60c995acfc00f9af226fdcd9"
    },
    {
        "nl_input": "The query requires a function to calculate system uptime in seconds on Syllable, returning None if unsuccessful. It involves checking boot time through a specific file's modification time and computing the difference from the current time, while handling exceptions gracefully. Only the first code snippet directly addresses this requirement.",
        "url": "a316ccd8b999becea02b2d527a5e8beb"
    },
    {
        "nl_input": "The query requires a function to remove empty utterances from a list, ensuring only non-empty text entries remain. It processes a list of utterance objects, checking if the 'text' attribute is non-empty after stripping whitespace, and returns a filtered list excluding any empty texts.",
        "url": "5ca8d1be36d4955478ff4ef72fbc653a"
    },
    {
        "nl_input": "The query requires a method to define the action triggered when a stop button is pressed. This involves disabling the button, interrupting ongoing computations or debugging processes, and potentially sending a command like 'exit' to stdin if the shell is actively reading. The focus is on ensuring proper interruption and cessation of current activities in the application.",
        "url": "435335bb0dc17309dd5d006b3f7bc474"
    },
    {
        "nl_input": "The query requires a function to determine if a callback is a simple, plain function. It should return True only for vanilla functions, excluding instances or classes. The provided code suggests checking if the callback is callable and not an instance or class, ensuring it meets the criteria of a basic function.",
        "url": "0e6cf5fd3544a439b3491daa4a358c98"
    },
    {
        "nl_input": "The query requires a function that mimics the behavior of `random.choice` while supporting the `set` type as a sequence input. The desired function should convert a set to a tuple (if the input is a set) before applying `random.choice`, ensuring compatibility with both sets and other sequence types like lists or tuples.",
        "url": "1ee8eef5f28bf7d5c8091fb2794bc444"
    },
    {
        "nl_input": "The query requires a method to detach from all tracked classes and objects, restore original constructors, and cleanse tracking lists. The provided code examples demonstrate clearing objects, indexes, and keepalive references, as well as cleaning up instances and plugins, to achieve the detachment and restoration of the original state.",
        "url": "c6cd16b1f8c53bd52a696c9afd132194"
    },
    {
        "nl_input": "The query requires a function to calculate and return the progress ratio in the format \"current/total\" along with the percentage completed. It should take the current value, total value, and optionally time remaining as inputs, then output a formatted string showing progress and completion percentage.",
        "url": "205d2257a363e4a52180c14d82ad05e0"
    },
    {
        "nl_input": "The query requires a function to extract the top-level domain (TLD) from a given URL. It should identify the TLD accurately, possibly handling protocol fixes or parsing the URL's netloc component to isolate the domain extension effectively. The solution must focus on returning only the TLD part of the URL.",
        "url": "40adfe081dbdd317187bc7c9fdb5dc37"
    },
    {
        "nl_input": "The query requires a function to determine and return the type of a subtree, specifically identifying if it is a Root, Nucleus, or Satellite. The provided code includes a function that extracts the tree type from a given tree structure, ensuring it matches predefined subtree types and returning the result.",
        "url": "ce3b5bf4b5f786aed0b49184b37aa877"
    },
    {
        "nl_input": "The query requires a function to check if a DataFrame contains a specified column with at least one non-NaN value. The function should return True if the column exists and has a non-NaN value, otherwise False. It involves column existence verification and NaN value checking within the specified column.",
        "url": "d09752f6ad8ae3d274cbfd233771df7a"
    },
    {
        "nl_input": "The query requires a function to bring a specific figure window to the front in a graphical interface, potentially allowing for the specification of the figure by an identifier. The most relevant code demonstrates raising a figure window using a given figure identifier, ensuring it is brought to focus in the application.",
        "url": "6ef3923ed895238369f9017c3075320b"
    },
    {
        "nl_input": "The query requires a method to disable stdout buffering, ensuring immediate output materialization and allowing log messages to appear before program termination. This involves modifying the stdout settings to remove buffering, enabling real-time message display during program execution. The focus is on achieving unbuffered output for instant visibility.",
        "url": "f4af9faea801abd2f6afcb51f3fd0f91"
    },
    {
        "nl_input": "The query requires a function to check if a configuration file is in JSON format, returning a boolean value. The function should attempt to load the file as JSON and handle exceptions to determine validity, optionally showing warnings. Among the provided code snippets, the relevant function performs this check by attempting to load the configuration dictionary from the file.",
        "url": "b6d56ef631a02d9785fd953fd088c09e"
    },
    {
        "nl_input": "The query requires a function to generate a string representation of a list or tuple using repr(). The function should handle tuples with a single element by appending a comma and format other elements with commas in between. It ensures the output adheres to Python's repr() conventions for lists/tuples, providing a valid string representation.",
        "url": "fbd29b6022db8726318c01905aec93b8"
    },
    {
        "nl_input": "The query requires a function to reset the state of an object by clearing previous data or settings. Specifically, it involves resetting attributes like previous frames, movement status, and time-related variables to their initial or default states, ensuring the object is prepared for a new sequence or operation.",
        "url": "746c5b08e8078cfe8bd345b2f06d87d1"
    },
    {
        "nl_input": "The query requires initializing a Python list with a fixed capacity, either 10 or user-defined, to mimic a static array's behavior. The focus is on restricting the dynamic nature of Python lists by predefining their size and ensuring they do not automatically resize. The first code snippet demonstrates this by creating a list with a predefined capacity and managing indices manually.",
        "url": "0b503029f353eb61ae98362d02f635c4"
    },
    {
        "nl_input": "The query requires a function to determine True or False from an argument, converting various input types (e.g., strings like \"true\", \"1\", \"false\", \"0\") into their corresponding boolean values. The function should handle boolean inputs directly and support case-insensitive string evaluation for flexibility in input processing.",
        "url": "6794fea99ea3f5a130f9b9f4a2d2e46a"
    },
    {
        "nl_input": "The query requires a function to modify `sys.argv` to simulate running a command with arguments. The desired functionality involves parsing a command string into arguments and extending `sys.argv` with these arguments, effectively mimicking command-line input within a script for testing or debugging purposes.",
        "url": "4e23368ecbd13cad64e50daa0581d413"
    },
    {
        "nl_input": "The query requires a function that checks if the values of a given expression are not contained in the passed values, acting as an inverse of the 'isin' function. It should iterate through the values, comparing them and returning a result indicating exclusion, similar to how 'isin' checks for inclusion but opposite in logic.",
        "url": "9cede792fe3f616f2e77fbe7d4feee1a"
    },
    {
        "nl_input": "The query requires a method to save a session to a file using Instaloader. It needs functionality that serializes session data, likely cookies, into a file for later use. The focus is on creating a persistent session storage mechanism, as demonstrated by the provided code examples.",
        "url": "aeedffc3c75a7937797d81d203e6e748"
    },
    {
        "nl_input": "The query requires a function that converts the output of a parse() method into a Text object. The function should accept a token parameter, which specifies the order of tags for each token in the input string. The most relevant code defines a tree() function that takes a string and an optional token list, returning a Text object as required.",
        "url": "eea459ea63f8d4aa2b864c391ee02500"
    },
    {
        "nl_input": "The query requires a function to print a dictionary tree in a JSON-like format with sorted keys. The desired output should be indented for readability and use specific separators. Among the provided code snippets, the focus is on implementing a method that formats and prints dictionaries in a clear, structured JSON style.",
        "url": "bbb8c24e82437ea03fccdc924a99d399"
    },
    {
        "nl_input": "The query requires retrieving the 'User-Agent' from the request headers if available. It involves checking for the presence of a 'User-Agent' in the headers, encoding it in UTF-8 if found, and returning it or an empty string otherwise. The focus is on accessing HTTP request headers to extract specific user agent information.",
        "url": "c92742645c96823709ad5b8166cb1c65"
    },
    {
        "nl_input": "The query requires a helper function for plotting. The function should facilitate creating, customizing, and saving plots with options like legends, gridlines, labels, or KDE (Kernel Density Estimation) plots. It may involve configuring axes, titles, colors, and displaying the plot. The solution should integrate these features for versatile plotting capabilities.",
        "url": "e5568372381b6eebbeb157515f43207b"
    },
    {
        "nl_input": "The query requires a method to check if an entity has a value for a specific property, ensuring the property is initialized or has a default value. It involves verifying the existence and validity of a property within an entity, confirming its presence and non-null status. This check is essential for managing property requirements and defaults in data entities.",
        "url": "09121d31a8d0eeeb5cf9dcd83ba98108"
    },
    {
        "nl_input": "The query requires creating a parser for Command Line Interface (CLI) arguments and options. It needs to define and return an ArgumentParser object, potentially including program details, formatting classes, and the ability to add arguments or options. The parser should support functionalities like dry runs and specifying components for actions such as releasing packages.",
        "url": "df7be6d0213c51a7bb23985c9f9ed388"
    },
    {
        "nl_input": "The query requires a function to calculate equality between two Comparable objects. It should log the comparison process, determine if the objects are equal using an equality method, and return the result of the comparison. The focus is on object equality with logging functionality for tracking comparisons.",
        "url": "d71243e301d8df8a50df0fa246ce4dc0"
    },
    {
        "nl_input": "The query requires a function to remove and return the root element from a heap structure, maintaining the heap property after removal. The provided code snippets include implementations for heap operations, with one specifically popping the last element and adjusting the heap accordingly. The description focuses on the need for a method to properly extract the root value while preserving the heap's integrity.",
        "url": "20ee54ac666aa4789a78c32a4103b045"
    },
    {
        "nl_input": "The query requires a function to compress data into a memory buffer using gzip compression without writing to a disk file. It should utilize an in-memory buffer, such as cStringIO or BytesIO, write compressed data into it, and return the compressed content. The focus is on achieving high compression levels and maintaining data in memory.",
        "url": "5b86e1dfc1552e2ad8e2a95d9bf9feaa"
    },
    {
        "nl_input": "The query requires a function to find the position of the most significant bit in a 1D array of binary values, specifically the first occurrence of '1' when reading from left to right. The function should return the index of this bit. It needs to handle numpy arrays and efficiently identify the target position without unnecessary computations.",
        "url": "085fc95e9cfffcdc0589e1ae27ff97d1"
    },
    {
        "nl_input": "The query requires extracting a specific value from the request's query string using a function. The function should take the request and the key name as parameters and return the corresponding value from the query string. This involves parsing the query string to retrieve the desired parameter value efficiently.",
        "url": "af8896eebbf01d8cdca7e081f088e946"
    },
    {
        "nl_input": "The query requires a function to convert a list of (key, value) pairs into a dictionary. The function should iterate through the list and assign each key-value pair into the dictionary, ensuring that the resulting structure accurately represents the input pairs without modifying the values or keys.",
        "url": "bf10521bc0f9003ddbc220d64ecc68eb"
    },
    {
        "nl_input": "The query requires a function to deserialize a string into a date object. It should handle cases where the input string is parsed into a date, with an optional check for ImportError or type checking to ensure the input isn't already a date object. The solution must rely on external libraries like `dateutil` for parsing.",
        "url": "926e7dc9d7779ac0c61e5c1297b2a5e9"
    },
    {
        "nl_input": "The query requires a function to search through an array of tuples, identifying the first tuple where a specified index contains a given value. The function should take three parameters: the tuple array (t), the index (i), and the value (v), returning the first matching tuple or None if no match is found. This involves iterating through the tuple array to compare values at the specified index.",
        "url": "b01054cbea99f2bb7ce3ffbe8771e4ac"
    },
    {
        "nl_input": "The query requires creating a function to wrap vertical table formatting for TabularOutputFormatter. The function should accept data, headers, and optional arguments, then pass relevant parameters (sep_title, sep_character, sep_length) to the vertical_table function for consistent table rendering. This ensures customizable and structured tabular output.",
        "url": "3a3657a34dc0ed457876ae075ffdc328"
    },
    {
        "nl_input": "The query requires a function or class that accepts a NumberGenerator operand, an operator, and optional arguments for the operator when called on the operand. It needs to store these components for potential operations, as seen in the first code example where operand, operator, and args are initialized in the UnaryOperator class.",
        "url": "1ba9155be7b2df6ba7e4674d731803fc"
    },
    {
        "nl_input": "The query requires a function to perform multiple string replacements using a list of search terms and their corresponding replacements. It should iterate through the lists, applying each replacement to the input string sequentially, and return the modified string. The focus is on handling multiple replacements efficiently and correctly.",
        "url": "4aa3a520458b5764e46c4f07eac8abf2"
    },
    {
        "nl_input": "The query requires setting a serial port, such as \"/dev/tty.usbserial-A4001ib8\". The task involves assigning the specified port to a serial object and attempting to open it, while handling exceptions if the port cannot be opened. The requirement is focused on configuring and opening the serial port for communication.",
        "url": "4c38388e223a226c56f8c77f1fc60153"
    },
    {
        "nl_input": "The query requires a function to check if the features data contains any empty entries. Specifically, it needs to verify whether the given 'features' data is non-empty and ensure none of its components have zero length. The most relevant solution involves iterating through the 'features' to confirm no individual feature is empty.",
        "url": "6bb7ab54a926ea8c1cf12f33c4e6128a"
    },
    {
        "nl_input": "The query requires a function to load YAML-encoded data from a file on disk. The function should open the specified file, read its contents, and parse the YAML data, returning it for use in the program. The provided code examples demonstrate loading YAML data using file operations and the YAML library.",
        "url": "ea01144e47e6054ffabeb2fd14ef547a"
    },
    {
        "nl_input": "The query requires a function to display tooltips at a widget's position with customizable text. The most relevant code defines a method that shows a tooltip using the provided tip text at the widget's global position. It takes an optional parameter for the tip content and displays it using the QToolTip.showText method.",
        "url": "894341368638fcabfe7714433b1b6e50"
    },
    {
        "nl_input": "The query requires a function to convert a Matrix3 object into a 3x3 NumPy array. The function should take Matrix3 as input and return an array containing its elements in a specific structure, utilizing the components (a, b, c) of the Matrix3 object for constructing the resulting array.",
        "url": "121d84c275378f7017a360c67108ed82"
    },
    {
        "nl_input": "The query requires a function to count occurrences of items in a list of lists, returning a dictionary with item counts. The most relevant code is the first option, which uses a defaultdict to iterate through each sublist and count item occurrences. It returns a dictionary with items as keys and their counts as values.",
        "url": "12da05d47f0365acc6d5050614aa24a8"
    },
    {
        "nl_input": "The query requires a function to calculate the start and end dates of the current week. It needs to determine today's date, find the weekday index, and use it to compute the week's starting date by subtracting the weekday offset and the ending date by adding the remaining days to complete the week.",
        "url": "7186890458a16d68f3ae86fdaed044f3"
    },
    {
        "nl_input": "The query requires a solution to execute jobs in processes using N threads. The provided code suggests implementing a function that utilizes a thread pool with a specified number of threads to map and execute processes in parallel, ensuring efficient job distribution and process management. The focus is on parallel execution and thread handling.",
        "url": "cf394654dccebe70bab591518bfddb75"
    },
    {
        "nl_input": "The query requires a function to measure and print the execution time of another function for basic profiling purposes. It should include a limit parameter to control when the duration is printed, along with the ability to log arguments and keyword arguments if the execution exceeds the specified limit.",
        "url": "c3a9f0a7366d3d26740db725d27afbd3"
    },
    {
        "nl_input": "The query requires a function to read and return the last specified number of bytes from a given file. The function should open the file in binary mode, check its size, seek to the appropriate position if the file is larger than the required bytes, and then read and return the desired content.",
        "url": "297a85bb493d0c806f74039a8a5906f1"
    },
    {
        "nl_input": "The query requires a function to update a dictionary with specific attributes from an object. It needs to iterate through the given attributes, check if the object has these attributes with non-null values, and add them to the dictionary. The focus is on selectively updating the dictionary based on the object's existing attributes.",
        "url": "dca9f4b5be5a5a31bfe15714e1760c23"
    },
    {
        "nl_input": "The query requires a function to determine if a given string represents an integer. It should return True for integers and False otherwise, handling both integer strings and non-integer inputs robustly. The function must accept a string argument and perform type checking or conversion to ascertain its integer nature without errors.",
        "url": "aef9f5feefc059d9e764b382b27992ec"
    },
    {
        "nl_input": "The query requires a function to create a string search query for reverse geocoding using given latitude and longitude, ensuring precision without scientific notation. It formats the lat and lng values as strings while maintaining user-specified decimal places, avoiding issues like e-5 notation. The result is a formatted string combining lat and lng for querying purposes.",
        "url": "15b12c412bbefcab9f103d1dc80a8eb5"
    },
    {
        "nl_input": "The query requires a function to check if a given string is a palindrome, considering both strict and non-strict modes. In strict mode, the function compares the string with its reverse. In non-strict mode, it removes spaces before checking. The function returns True if the string is a palindrome and False otherwise.",
        "url": "0a8601aa40e8e29e9a34b4bfee20bdb0"
    },
    {
        "nl_input": "The query requires a function to set the title of the console window, specifically for Windows platforms, using the `ctypes` library to call the `SetConsoleTitleW` function with a message converted to Unicode. The provided code examples include a function named `title` that fulfills this requirement by checking the platform and setting the console title accordingly.",
        "url": "adb202dabb7da58b5d21780a6344bf64"
    },
    {
        "nl_input": "The query requires a function that takes a value and a NumPy array, then computes the global minimum of the squared differences between the value and the array elements. The result should return the index of this minimum squared difference within the array.",
        "url": "2a95f703627a46eaed3c2acda1993e1a"
    },
    {
        "nl_input": "The query requires a function to remove duplicate items from a list while preserving the original order. The provided code examples demonstrate methods to achieve this by iterating through the input list, checking for existing items in a result list, and appending only unique items, ensuring the output maintains the initial sequence without duplicates.",
        "url": "7656d146fe450dcc47f61df1b20ef0ad"
    },
    {
        "nl_input": "The query requires a function to print a colored string to a specified target handle, allowing customization of foreground and background colors, with an optional ending character and defaulting to standard output. The function should also reset color settings after execution to ensure proper terminal behavior.",
        "url": "5e7880a46ffa2a7b19d6212e49eb068b"
    },
    {
        "nl_input": "The query requires a block of standard 2D convolutions, involving multiple layers or operations with specified filters, dilation rates, and kernel sizes. It aims to construct a convolutional block capable of processing input data through a series of 2D convolutional operations, potentially including parameters like strides and biases, for use in neural network architectures.",
        "url": "07584e5fda69b8f7642955511010ad86"
    },
    {
        "nl_input": "The query requires a function to remove all non-printable characters from a text string. It should iterate through each character in the input, check if its ASCII value is 32 or higher (indicating a printable character), and join these characters into a cleaned output string. The context parameter ensures proper string conversion before processing.",
        "url": "0f171b4626d9f0ea2a003661289af42f"
    },
    {
        "nl_input": "The query requires a function that allows a sprite to revert its position to a previous state after an update. The function should restore the sprite's position and adjust its bounding rectangle and feet attributes accordingly, enabling it to move back to its prior location seamlessly. This involves resetting specific attributes like `_position`, `rect.topleft`, and `feet.midbottom`.",
        "url": "6cbd916f3ecf9c37c1a7d1e9af1ab594"
    },
    {
        "nl_input": "The query requires a function to convert a value to str in Python 3 and unicode in Python 2. It needs to handle different string types based on the Python version, ensuring proper conversion using utf-8 encoding if necessary. The focus is on compatibility between Python 2 and 3 for string representation.",
        "url": "3d2fbb3f4b88d174fd2f578d0977f650"
    },
    {
        "nl_input": "The query requires a function to extract and return the year from a given date string formatted as '%m/%d/%Y'. If the date string does not match the format, the function should return 0. The provided code examples demonstrate handling potential ValueError exceptions when parsing the date string.",
        "url": "6c997aefc629ec3ddb36fa1869964c25"
    },
    {
        "nl_input": "The query requires an abstraction for the executemany method to efficiently handle multiple database insertions or updates. It needs a function that accepts SQL queries and values, executes them in bulk using executemany, and commits the transaction to ensure data persistence. The focus is on streamlining batch operations for improved performance.",
        "url": "8c81da54c84a8bf387c8abd981115c12"
    },
    {
        "nl_input": "The query requires loading a GeoJSON file into a Python dictionary using the `json` module. The focus is on utilizing the `json.load()` function to parse the file, with an optional encoding argument for different text encodings. The provided code examples demonstrate reading and decoding JSON files, but the requirement specifically emphasizes handling GeoJSON data.",
        "url": "36327fa884ccc7f85d0e3324f4100445"
    },
    {
        "nl_input": "The query requires a function to validate if a string represents a correct YYYYMMDD date format. It should return True for valid dates and False for invalid ones, ensuring the input matches the specified format strictly without any additional characters or deviations. The function must handle potential errors gracefully during parsing.",
        "url": "8dce08e6c99c22329f7a299e12d01400"
    },
    {
        "nl_input": "The query requires a function to model a linear variogram using parameters [slope, nugget] and distance 'd'. The desired function calculates the linear combination of 'd' with the slope and adds the nugget effect, representing spatial variability in geostatistics. Only the relevant code defining this specific variogram model should be extracted and described.",
        "url": "16d9a2609aa57f6f628be3348335008d"
    },
    {
        "nl_input": "The query requires calculating the margin in pixels above the plot area by setting the `border_top` value. It involves adjusting the margin based on whether a graph title or subtitle is shown, and incorporating their respective font sizes into the calculation. The result determines the total top border size dynamically.",
        "url": "ecd265ebe30c4d7de7c6d953ed229c88"
    },
    {
        "nl_input": "The query requires a function to check if a specified executable exists in the system's PATH environment variable. It should search through each directory in the PATH, verify the presence of the executable, and return a boolean value indicating availability. The provided code examples include functions for file validation and existence checks, which inform this requirement.",
        "url": "e8c5f4c92b428c3492797c43a4145c2f"
    },
    {
        "nl_input": "The query requires a function to perform multiple simultaneous substitutions in a string using a dictionary of patterns and replacements. The function should compile a regex pattern from the dictionary keys, then use `re.sub` with a lambda function to replace matched patterns with their corresponding values from the dictionary.",
        "url": "dd91f2aba163192f99af05825ee90b86"
    },
    {
        "nl_input": "The query requires a function to perform sum reduction along a specified axis with an option to keep dimensions. The relevant code defines a 'Sum' function that uses numpy's sum method, handling cases where the axis is a numpy array by converting it into a tuple, allowing for flexible multi-dimensional reductions while optionally preserving dimensions.",
        "url": "3f66655eab2db02115b31c2f24051dad"
    },
    {
        "nl_input": "The query requires a method to perform an I2C write operation at a specified I2C address with given data. The method takes parameters including the device address and data to write, and it does not return any message. The relevant code implements an asynchronous function for this I2C write request.",
        "url": "3d672b6acb926c7111962a80dbc3aba9"
    },
    {
        "nl_input": "The query requires resetting the view to the root of a tree structure. This involves setting a model for a square map using the root node, recording history, and configuring view type choices. The focus is on manipulating tree structures, specifically resetting or reconfiguring the view to start from the root node.",
        "url": "92051de4dfff09b7d8998a84f1a1242e"
    },
    {
        "nl_input": "The query requires a method to slowly convert a recarray into a list of records using Python types. It needs a function that iterates through the recarray, converting each record into a tuple with Python-native data types, ensuring compatibility and ease of use in further Python processing. The solution should maintain the structure and data integrity during the conversion.",
        "url": "abe0f8e81e16f427a549329c886a3d0c"
    },
    {
        "nl_input": "The query requires a function to check if a password is valid based on specific criteria. The password should be between 4 and 75 characters long. The provided code includes a function that uses a regular expression to validate the password length, ensuring it meets these requirements. Other codes are unrelated to password validation.",
        "url": "e407d959ae51e2deeb9c5729241dcd19"
    },
    {
        "nl_input": "The query requires a function to round the elements of an input array (array_in) and return the rounded array as arr_out. The function should handle both ndarray inputs and single numeric values, rounding them and converting the result to integers if necessary. The most relevant code defines a function that performs this rounding operation appropriately.",
        "url": "67238b7feb1584fc9527370198fcce31"
    }
]